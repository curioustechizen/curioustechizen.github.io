---
layout: post
title:  "UI ≠ UX"
description: "A great user interface does not guarantee a great user experience, and vice versa "
date: 2020-12-20 17:30 +05:30
comments: true
tags: [obvious]
---

<blockquote class="twitter-tweet"><p lang="und" dir="ltr"><a href="https://t.co/R8DfByhDJL">pic.twitter.com/R8DfByhDJL</a></p>&mdash; Rachel Appel (@RachelAppel) <a href="https://twitter.com/RachelAppel/status/1168905856773230594?ref_src=twsrc%5Etfw">September 3, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

This is a non-programming post in the series I call "re-stating the obvious". This series talks about topics that have been discussed at length, I'm just making my own observations about them. You can find all posts in this series [here](/blog/tags/obvious).

**Disclaimer:** I'm not a designer, so please take the opinions in this post with a pinch of salt.

## UI and UX

> A good user interface is a user acquisition tool, while a good user experience is a user retention tool.

To put it differently, a good user interface attracts users to your system, while a good user experience gets users to keep using your system. A couple of important observations about this:

  1. Neither is a subset of the other; a good UI does not necessarily translate to good UX and it is possible to have a good UX while the UI is poor.
  1. Both of these are important; their relative importance depends on the nature of the system (more on this when we discuss some examples in a minute).

### Good UI, not so good UX

Let's look at some examples where UI is good, but UX not so:

  1. **Automatic soap dispensers:** I got one for myself because it worked great when I tried it (It had a great UI). However during everyday use, I realized that it dispenses too much soap and that causes a mess near the sink. It has a poor UX.
  1. **Xcode:** All those "poof" animations looks so sleek (amazing UI) but they completely and utterly destroy the overall IDE experience (unacceptably poor UX). So many actions rely on gimmicky gestures and are completely undiscoverable (how do you remove a breakpoint that you set in XCode? Clue: It is not "right click and remove" like every other sane IDE on the planet)
  1. **In-car controls:** Multi-function controls on the steering wheels give them such a futuristic look. Those buttons on the infotainment console looks straight out of a spaceship. Amazing UI. But, how many times do you need to click on the steering wheel button to achieve a certain task? How reliably can you turn on or off the defogger using the center console? Can you do all of this without taking your eyes off the road?


There was a reason I chose that last example. Imagine an ill-thought out UX that causes a driver to take their eyes off the road for even a couple of seconds at three-digit speeds. The consequences can be disastrous, even death. This is compounded by the fact that the _problems with the UX are often not discoverable_ until it is too late.

This goes back to the relative importance part. The In-car controls example above is an instance where UX ought to be given a lot more importance than just UI.

### Good UX with mediocre UI

Now, some examples of systems where the UX is good but UI not so:

  1. **Elevators:** The elevator in my apartment is old-fashioned and ... how do I say this ... _boring_. It is not really welcoming in appearance. However, it just works. All the buttons are intuitive, it is disabled-friendly with braille buttons and you just cannot go wrong using it. The UX is near-perfect even though the UI does leave a lot to be desired.
  1. **Older cars:** My first car was very low on features, but now that I look back I have to admit the UX for the driver was fantastic. It had barely any features but whatever little it did, was a breeze to operate. The only control on the steering wheel was the horn, the stalks on the steering wheel column only had the light, indicators and wiper controls. The Air conditioner and defogger were trivial to operate without taking my eyes off the road, even in the dark. Fantastic UX, not an inviting UI at all.
  1. **Git:** (Uh oh .. I failed in my resolve to not include any programming related examples). Git is an indispensable tool for programmers and makes our lives so much easier. The whole experience of cheap branching, not requiring a network to work and more make it orders of magnitude better than its predecessors like CVS. However, the commands are named rather weirdly. Worse, some commands do very different things compared to what they did in previous source control systems like SVN. Incredibly good UX, a UI that leaves a lot to be desired.

This category probably has a lot more examples than the first. Think of all the things around you that just work even though they are not particularly attractive.

## Conclusion

UI ≠ UX. In my limited experience, UI is given more importance than UX. In my opinion this is counter-productive in the long run, both for businesses and users.

