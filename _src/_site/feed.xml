<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curious Techizen</title>
    <description>A place for discussing anything tech. Old and new. Experiences and Opinions. Questions and rants. Primarily programming-related, but not exclusively.</description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 21 Apr 2020 22:59:38 +0200</pubDate>
    <lastBuildDate>Tue, 21 Apr 2020 22:59:38 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Diff animations with SwiftUI</title>
        <description>&lt;p&gt;A few months back, I wrote &lt;a href=&quot;https://kiranrao.in/blog/2020/01/12/diff-util-part3/&quot;&gt;a post&lt;/a&gt; about implementing custom animations in Android using DiffUtil. In this post, we&amp;#39;ll explore how similar animations can be achieved with Apple&amp;#39;s &lt;a href=&quot;https://developer.apple.com/documentation/swiftui&quot;&gt;SwiftUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler Alert:&lt;/strong&gt; It was a breeze to implement this with SwiftUI. It was an enjoyable experience with the Preview canvas in XCode, and the framework itself is very well suited for stuff like implementing animations.&lt;/p&gt;

&lt;p&gt;This post uses GIFs to show off videos of the animations I achieved, but GIFs don&amp;#39;t convey really how smooth the animations are. I encourage you to check out the code and run it on a simulator or iOS device. The code for everything in this post is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks&quot;&gt;here&lt;/a&gt;. You&amp;#39;ll need XCode 11 and Mac OSX Catalina to run it.&lt;/p&gt;

&lt;h2&gt;The sample app&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s an example of what we will achieve&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-custom.gif&quot; alt=&quot;Custom animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not exactly the same as the one we ended up in the Android example, but it is close enough.&lt;/p&gt;

&lt;p&gt;To recap, this is how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are up to 7 colored circle views, arranged in a circle&lt;/li&gt;
&lt;li&gt;Some circles are &amp;quot;expanded&amp;quot;&lt;/li&gt;
&lt;li&gt;When you click on &amp;quot;Toggle&amp;quot;, some colored circles get removed, while others are added, and some get resized (their expansion state changes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The model consists of 2 pre-defined lists of circle data. Clicking the toggle button simple toggles the state between these 2 lists.&lt;/p&gt;

&lt;h2&gt;Baseline: Toggling state without animations&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/tree/swift_ui_no_animations/CircleDiffAnimationsSwiftUI&quot;&gt;starting point&lt;/a&gt; of this experiment is toggling between 2 states, &lt;em&gt;without&lt;/em&gt; any animation. For this, I took inspiration from &lt;a href=&quot;https://github.com/christophedellac/CDCircularMenu&quot;&gt;this library&lt;/a&gt; to arrange the views in a circle. Then, all I had to do was set the color and size property of each view from the model.&lt;/p&gt;

&lt;p&gt;On clicking the Toggle button, I update a &lt;code&gt;@State var&lt;/code&gt; property. All this is pretty standard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CircleInfo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toggle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The relevant code is in &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swift_ui_no_animations/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;this file&lt;/a&gt; and here&amp;#39;s how this looks&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-no-anims.gif&quot; alt=&quot;No animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Adding animations&lt;/h2&gt;

&lt;p&gt;This is where SwiftUI impresses. All I had to do was add one line to get nice default animations. Yes, you read that right. It was &lt;strong&gt;a one-line change&lt;/strong&gt; to get animations out of the box.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Replace this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//With this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;withAnimation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This change is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_withAnimation_default/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;tagged here&lt;/a&gt; and this is what it looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-withAnimation.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cannot get over how easy this was. Did you notice that we wrote zero code to find out what the diff was, zero code to tell what to insert, what to delete? Nothing. Compare this with what I had to do in the previous article on Android!&lt;/p&gt;

&lt;p&gt;But wait, it gets better.&lt;/p&gt;

&lt;h2&gt;Custom animations&lt;/h2&gt;

&lt;p&gt;This default animation is okay, but it is not what we want. You can see that item appearance animation doesn&amp;#39;t look all that good. The item just fades in behind whatever was there previously.&lt;/p&gt;

&lt;p&gt;How can we improve this? Well, again, just a handful of lines of code. First, create a transition to describe what the animation should look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asymmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, just apply an animation to each circle view specifying the transition and the curve.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that&amp;#39;s it. With these changes, you get the nice animations that you saw at the top of this post. The code is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_custom_animation/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There seems to be a problem with the Preview Canvas in XCode. It did not show the custom animation when I tried this code. Instead, it kept showing the default animation. Don&amp;#39;t rely too much on the LivePreview feature, especially for animations.&lt;/p&gt;

&lt;h3&gt;Icing on the cake&lt;/h3&gt;

&lt;p&gt;If you see the post on the Android implementation, you see this disclaimer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if you submit a list while animations for the previous diff are already in progress, it could crash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do we need to make our SwiftUI version handle this case? What happens if an animation is in progress and you click the Toggle button again?&lt;/p&gt;

&lt;p&gt;Well, the answer is - you guessed it - &lt;strong&gt;We need to do nothing&lt;/strong&gt;. The animations are interruptible by default. If we click on the toggle button while an animation is in progress, then the next animation starts. Like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-interruptible.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;What&amp;#39;s the catch?&lt;/h2&gt;

&lt;p&gt;This automagical animation feature is fine for a lot of situations, but there are still a lot of them that it might not be able to handle. For example&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choreographing the animations: If you look at the Android example, we wanted to perform the animations in a certain order (removals first, followed by moves and finally inserts). The SwiftUI version just animates everything simultaneously. You could probably play with &lt;code&gt;asymmetric(insertion:removal:)&lt;/code&gt; to impose some ordering but it would be rather limited.&lt;/li&gt;
&lt;li&gt;Animations occur on individual items: What if you wanted the animation to occur in relation to the containing view? For example, what if you wanted to animate scrolling to a different row in a list when the currently &amp;quot;selected&amp;quot; one gets deleted? These are possible but would probably require a lot of code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are probably others that I&amp;#39;m missing.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;SwiftUI is great for implementing animations. I had to barely write any code to achieve this pretty cool animation (it took me days to achieve the same on Android, and I&amp;#39;ve several years of Android experience!). However, all of this magic does come with its own limitations and it is good to be aware of them before going all-in.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 21:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2020/04/21/diff-animations-swiftui/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/04/21/diff-animations-swiftui/</guid>
        
        <category>swiftui</category>
        
        <category>animations</category>
        
        
      </item>
    
      <item>
        <title>Android Gradle: Lessons learnt using missingDimensionStrategy</title>
        <description>&lt;h2&gt;TL;DR:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If a &lt;em&gt;library module&lt;/em&gt; includes a flavor dimension that the &lt;em&gt;app flavor&lt;/em&gt; does not, then use &lt;code&gt;missingDimensionStrategy&lt;/code&gt; to specify default flavors from the missing dimension&lt;/li&gt;
&lt;li&gt;More generally, you can use this any time a &lt;em&gt;consumed module&lt;/em&gt; includes a flavor that the &lt;em&gt;consumer module&lt;/em&gt; does not. Remember, &lt;code&gt;missingDimensionStrategy&lt;/code&gt; DSL should be used in the &lt;code&gt;build.gradle&lt;/code&gt; of the &lt;em&gt;consumer module&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;However, point 2 might not always do what you think it is doing. In particular, when the &lt;em&gt;consumer module&lt;/em&gt; which is missing the flavor dimension is in &lt;strong&gt;itself a dependency for another module&lt;/strong&gt;, you are probably better off introducing this flavor dimension in this module, mirroring that of the consumed module.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Android Gradle Plugin introduces the concept of product flavors. When you have a project that contains multiple modules, it is possible that your modules do not agree on the number of flavors or flavor dimensions. The DSL offers ways to handle such situations.&lt;/p&gt;

&lt;p&gt;The important portions of the DSL are &lt;code&gt;matchingFallbacks&lt;/code&gt; and &lt;code&gt;missingDimensionStrategy&lt;/code&gt;. Which one you choose depends on &lt;strong&gt;which module declares more flavors&lt;/strong&gt;: the &lt;em&gt;consuming module&lt;/em&gt;, or the &lt;em&gt;consumed module&lt;/em&gt;. &lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;This table&lt;/a&gt; in the Android Gradle documentation explains this in more detail.&lt;/p&gt;

&lt;p&gt;I had a slightly more complex project structure where I thought &lt;code&gt;missingDimensionStrategy&lt;/code&gt; would be my tool of choice, but it turns out I was wrong. This post describes my situation and why I was wrong.&lt;/p&gt;

&lt;h2&gt;Project structure&lt;/h2&gt;

&lt;p&gt;The project that I use for this blog post is &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo&quot;&gt;here&lt;/a&gt;. The app itself is a shell. It has no activities, no functionality and almost no Android code. It has the following modules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt; module. 

&lt;ul&gt;
&lt;li&gt;Includes a flavor dimension &lt;code&gt;&amp;quot;target&amp;quot;&lt;/code&gt;, with values &lt;code&gt;&amp;quot;emulator&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;realdevice&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Depends on &lt;code&gt;intermediate-1&lt;/code&gt;, &lt;code&gt;intermediate-2&lt;/code&gt; and &lt;code&gt;leaf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intermediate-1&lt;/code&gt; module. 

&lt;ul&gt;
&lt;li&gt;Does not know about flavors&lt;/li&gt;
&lt;li&gt;Depends on &lt;code&gt;leaf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intermediate-2&lt;/code&gt; module. 

&lt;ul&gt;
&lt;li&gt;Does not know about flavors&lt;/li&gt;
&lt;li&gt;Depends on &lt;code&gt;leaf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leaf&lt;/code&gt; module. 

&lt;ul&gt;
&lt;li&gt;Includes the same flavor dimension and flavors as &lt;code&gt;app&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;Has no dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;String resources&lt;/h3&gt;

&lt;p&gt;To demonstrate how flavors work, I&amp;#39;ve created some string resources (using gradle&amp;#39;s &lt;code&gt;resValue&lt;/code&gt; feature) in every flavor, in every module that does care about the flavor. When I build an APK for a particular flavor, I can inspect the string resources in APK analyzer to figure out which variant was used.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// app/build.gradle

flavorDimensions &quot;target&quot;
productFlavors {
    emulator {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_app_module&quot;, &quot;App Emulator&quot;)
    }
    realdevice {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_app_module&quot;, &quot;App Real Device&quot;)
    }
}

// leaf/build.gradle

flavorDimensions &quot;target&quot;
productFlavors {
    emulator {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_leaf_module&quot;, &quot;Leaf module Emulator&quot;)
    }
    realdevice {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_leaf_module&quot;, &quot;Leaf module Real Device&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The build error&lt;/h2&gt;

&lt;p&gt;This is the starting point of my experiment, and it fails to build. You can &lt;code&gt;git checkout checkpoint-2&lt;/code&gt; if you want to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-2&quot;&gt;see it in action&lt;/a&gt;. The build error you see looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/build_error.png&quot; alt=&quot;Build Error&quot;&gt;&lt;/p&gt;

&lt;p&gt;The reason for this build error is that both the &lt;code&gt;intermediate&lt;/code&gt; modules know nothing flavors but they depend on &lt;code&gt;leaf&lt;/code&gt; which does.&lt;/p&gt;

&lt;h2&gt;Configuring &lt;code&gt;missingDimensionStrategy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;My first attempt at fixing this was to configure the &lt;code&gt;intermediate&lt;/code&gt; modules to specify &lt;code&gt;missingDimensionStrategy&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;//intermediate-1/build.gradle and intermediate-2/build.gradle
//this goes inside android { defaultConfig block

missingDimensionStrategy 'target', 'emulator'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we&amp;#39;re saying that when trying to build the intermediate modules, choose the &lt;code&gt;emulator&lt;/code&gt; variant of the &lt;code&gt;leaf&lt;/code&gt; module. This works, &lt;em&gt;kind of&lt;/em&gt;. We can build the APKs for both flavors and we can see the correct strings get included in the built APKs.&lt;/p&gt;

&lt;p&gt;This is what the &lt;code&gt;emulatorDebug&lt;/code&gt; flavor looks like. Note that it has included the strings &lt;code&gt;&amp;quot;App Emulator&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Leaf module Emulator&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/app-emulator-debug-apk-missing-dimension-strategy.png&quot; alt=&quot;app-emulator-debug-apk-missingDimensionStrategy&quot;&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;#39;s the &lt;code&gt;realdeviceDebug&lt;/code&gt; APK. Note that it has included the strings &lt;code&gt;&amp;quot;App Real Device&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Leaf module Real Device&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/app-realdevice-debug-apk-missing-dimension-strategy.png&quot; alt=&quot;app-realdevice-debug-apk-missingDimensionStrategy&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;code&gt;git checkout checkpoint-3&lt;/code&gt; if you want to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-3&quot;&gt;see it in action&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The problem&lt;/h4&gt;

&lt;p&gt;The problem with this solution becomes obvious when you see the build output window. It contains this warning&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Module &amp;#39;leaf&amp;#39; has variant &amp;#39;realdeviceDebug&amp;#39; selected, but the modules [&amp;#39;intermediate-1&amp;#39;, &amp;#39;intermediate-2&amp;#39;] depend on variant &amp;#39;emulatorDebug&amp;#39;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is this: When you chose &lt;code&gt;realdeviceDebug&lt;/code&gt; variant for &lt;code&gt;app&lt;/code&gt; module, the same variant is selected for &lt;code&gt;leaf&lt;/code&gt;module. However, for the &lt;code&gt;intermediate&lt;/code&gt; modules, we specified we want to use &lt;code&gt;emulator&lt;/code&gt; flavor.&lt;/p&gt;

&lt;p&gt;This is not a problem for us because we explicitly stated that the intermediate flavors don&amp;#39;t know or care about flavors. But, how do you fix those warnings?&lt;/p&gt;

&lt;h2&gt;Making intermediate module flavor-aware&lt;/h2&gt;

&lt;p&gt;Unfortunately, the only &lt;strong&gt;correct&lt;/strong&gt; way to achieve this was to make the intermediate module flavor-aware. This might seem tedious and against the original intent, but I would argue that for this situation, it is a future-proof approach compared to &lt;code&gt;missingDimensionStrategy&lt;/code&gt;. Because with &lt;code&gt;missingDimensionStrategy&lt;/code&gt; if for some reason an intermediate module had to become flavor-aware, it could end up silently choosing the wrong flavor of the leaf module.&lt;/p&gt;

&lt;p&gt;So, the fix is to actually introduce the same flavor dimensions and flavors in the intermediate modules as in the leaf modules. You can &lt;code&gt;git checkout checkpoint-4&lt;/code&gt; to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-4&quot;&gt;see it in action&lt;/a&gt;. If you are worried about the repetitive flavor configuration code in the intermdiate modules, you can extract it into a &lt;code&gt;flavors.gradle&lt;/code&gt; and then use it in the build.gradle files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// root flavors.gradle

android {
    flavorDimensions &quot;target&quot;
    productFlavors {
        emulator {
            dimension &quot;target&quot;
        }
        realdevice {
            dimension &quot;target&quot;
        }
    }
}

// build.gradle of intermediate modules
apply from: '../flavors.gradle'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;missingDimensionStrategy&lt;/code&gt; mainly if your &lt;strong&gt;app&lt;/strong&gt; module is missing flavor dimensions compared to library modules. Think twice before using it in a module that is itself a dependency for another module. It might look like it works, but it might be doing the wrong thing.&lt;/p&gt;

&lt;h2&gt;Credits&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/droidxav&quot;&gt;Xavier Ducrohet (@droidxav)&lt;/a&gt; for pointing out the potential pitfalls of using &lt;code&gt;missingDimensionStrategy&lt;/code&gt; for my use case.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 21:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2020/03/31/gradle-missing-flavors/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/03/31/gradle-missing-flavors/</guid>
        
        <category>android</category>
        
        <category>gradle</category>
        
        
      </item>
    
      <item>
        <title>Android DiffUtil Part 3: Custom animations</title>
        <description>&lt;p&gt;This is part 3 in a series of posts that looks into DiffUtil on Android. The previous posts in this series are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2020/01/06/diff-util-part1/&quot;&gt;Part 1&lt;/a&gt; where we take a deep dive into the DiffUtil API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2020/01/07/diff-util-part2/&quot;&gt;Part 2&lt;/a&gt; where we compare this API with similar APIs on other platforms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, we&amp;#39;ll look at an example of when to use custom animations. &lt;/p&gt;

&lt;h2&gt;The sample app&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s an example of the animations that we will achieve. The code for this sampe is available &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_custom.gif&quot; alt=&quot;Custom diff animation&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is admittedly a goofy example, but it serves a purpose. I originally wanted to demonstrate this using visualization of RingBuffer data structure as an example, but I settled for this Color Circles example because it prevents us from getting distracted learning ring buffer!&lt;/p&gt;

&lt;p&gt;Here is how the sample works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are 7 slots, arranged in a circle&lt;/li&gt;
&lt;li&gt;Each slot can be empty, or occupied by a colored view (I chose the colors of the rainbow, hence the number 7)&lt;/li&gt;
&lt;li&gt;Each view can be &amp;quot;expanded&amp;quot; or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data for the view is a &lt;code&gt;List&amp;lt;CircleInfo&amp;gt;&lt;/code&gt; where &lt;code&gt;CircleInfo&lt;/code&gt; is defined as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CircleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &amp;quot;Toggle&amp;quot; button switches between two hard-coded lists. It submits the entire list to the &lt;code&gt;ColorCirclesView&lt;/code&gt;, which in turn &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/app/src/main/java/in/kiranrao/diffutilsamples/ColorCirclesView.kt#L107&quot;&gt;applies a diff&lt;/a&gt; and runs some animations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an item&amp;#39;s &lt;code&gt;expanded&lt;/code&gt; property changed, then we animate the change in width and height of that view&lt;/li&gt;
&lt;li&gt;If an item was removed, then we shrink the view until it disappears, while simultaneously moving it to the center of the circle&lt;/li&gt;
&lt;li&gt;If an item was added, then we expand it from size 0 to its final size, while simultaneously moving it from the center of the circle to its final position along the circumference.&lt;/li&gt;
&lt;li&gt;For items that were present in both lists, but their positions in the list changed, we move the views along the circumference of the circle to arrive at the new positions. This animation &amp;quot;makes room&amp;quot; for items being inserted, and &amp;quot;fills the gap&amp;quot; created by disappearing items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we run all these animations in a pre-determined order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All removals first&lt;/li&gt;
&lt;li&gt;Then, change animations together with move along circumference animations&lt;/li&gt;
&lt;li&gt;Finally the insertion animations are run&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you might have guessed, this example was carefully chosen to demonstrate the use of custom diffs. This example is not suitable for &lt;code&gt;RecyclerView&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For one, there&amp;#39;s no straightforward way of arranging RV items along a circle&lt;/li&gt;
&lt;li&gt;Even if you do find a circular &lt;code&gt;LayoutManager&lt;/code&gt; for RV, you are unlikely to get it to work well with RV&amp;#39;s &lt;code&gt;ItemAnimator&lt;/code&gt; framework (this framework, although very powerful and flexible, requires you to understand way too much of the RV internal workings)&lt;/li&gt;
&lt;li&gt;In this specific example, there&amp;#39;s no recycling happening, so you don&amp;#39;t really need RV. There&amp;#39;s a fixed limit to the number of items (7) and they all fit on screen at once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s another example with more operations happening: There&amp;#39;s 2 removals, 2 changes and one insertion (I recommend to run the app on an emulator to see the real animations, the fidelity of GIF is not good enough)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_custom_2.gif&quot; alt=&quot;Custom diff animation 2&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are some situations that this sample does not handle. For example if you submit a list while animations for the previous diff are already in progress, it could crash. However, this is not related to the DiffUtil wrapper that we are discussing in this post, so I&amp;#39;ll leave it as is.&lt;/p&gt;

&lt;h2&gt;A wrapper for DiffUtil&lt;/h2&gt;

&lt;p&gt;In the previous posts, we discussed about wrapping Android&amp;#39;s DiffUtil in a collection-style API. It is necessary to do this for our sample. This is because of the order in which we want to run our animations: We want to run all removals together. The standard &lt;code&gt;ListUpdateCallback&lt;/code&gt; has no way of telling us &amp;quot;here are all the items that were removed&amp;quot;.&lt;/p&gt;

&lt;p&gt;So, we can start off by doing the obvious: maintain our own list of diff operations (change, remove etc) and keep adding to this list when our &lt;code&gt;ListUpdateCallback&lt;/code&gt; is called. This is implemented &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffCalculator.kt#L49-L67&quot;&gt;here&lt;/a&gt; and a snippet is like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffOps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And &lt;code&gt;RawDiffOperation&lt;/code&gt; is &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffResult.kt#L105-L109&quot;&gt;defined as&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RawDiffOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we can do better. In our sample, we don&amp;#39;t actually care about the exact order in which the diff operations need to be applied. All we care about is the final set of changes, removals and additions. In other words, instead of &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Item at index 3 was deleted, then item at index 1 was deleted, then an item was inserted at index 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we want to say&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Items at index 1 and 3 were deleted; and an item was inserted at index 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;AtomicDiffResult&lt;/h2&gt;

&lt;p&gt;So, we use a combination of the RawDiffOperations and DiffUtil&amp;#39;s position conversion methods (&lt;code&gt;convertNewPositionToOld()&lt;/code&gt; and &lt;code&gt;convertOldPositionToNew()&lt;/code&gt;) to expose an API like this: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Removed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PositionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicDiffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;insertionRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;removalRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Removed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;changeRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;positionChangeRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PositionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this API gives us everything we need to perform our animations. It gives us the item itself in addition to positions. In case of item changes, it gives us both the old and new items. You can see the implementation of &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffResult.kt#L8&quot;&gt;AtomicDiffResult here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation note:&lt;/strong&gt; This implementation of AtomicDiffResult is leaves some room for optimization since it performs 2 extra iterations over the lists (once over the new list and once over the old one). In this example it is negligible.&lt;/p&gt;

&lt;h2&gt;Entry point into the API&lt;/h2&gt;

&lt;p&gt;Now that we know what we want the result to look like, let&amp;#39;s consider how we want to calculate the diff. We want to provide the following pieces of information&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Old list&lt;/li&gt;
&lt;li&gt;New list&lt;/li&gt;
&lt;li&gt;How to compare items in the list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This leads us to the following signature&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculateAtomicDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;itemCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicDiffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation of this function is &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffCalculator.kt#L7-L18&quot;&gt;here&lt;/a&gt;. You can find the tests for this implementation &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/test/java/in/kiranrao/atomicdiffutil/AtomicDiffUtilTest.kt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;In this post, I explored one way to wrap DiffUtil&amp;#39;s &lt;code&gt;ListUpdateCallback&lt;/code&gt; into a more ergonomic API. This is by no means the most generic way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It does not handle moves&lt;/li&gt;
&lt;li&gt;It ignores the change payloads&lt;/li&gt;
&lt;li&gt;In some cases you do really want access to the raw diff operations in the order they were performed (note that &lt;code&gt;AtomicDiffresult&lt;/code&gt; does expose the underlying &lt;code&gt;List&amp;lt;RawDiffOperation&amp;gt;&lt;/code&gt; for this purpose)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it does handle a lot of use cases where you might want to use &lt;code&gt;ListUpdateCallback&lt;/code&gt;. The API style I proposed here is closest to Angular&amp;#39;s style.&lt;/p&gt;

&lt;p&gt;The most practical applications of wrapping DiffUtil are in situations where you have lists of data but you don&amp;#39;t want to use RecyclerView to display them. Examples include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Situations where you have limited number of items and no recycling happening&lt;/li&gt;
&lt;li&gt;Lists shown in bottom sheets&lt;/li&gt;
&lt;li&gt;Custom UI like the one shown in the sample, or visualizing a ring buffer data structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might also apply this technique when you want to display custom animations and RV&amp;#39;s ItemAnimator does not suffice for your use case.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jan 2020 10:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2020/01/12/diff-util-part3/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/12/diff-util-part3/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>Android DiffUtil Part 2: List Diffs on other platforms</title>
        <description>&lt;p&gt;This is the second post in a series that looks into calculating diffs between two lists on Android. You can read &lt;a href=&quot;/blog/2020/01/06/diff-util-part1/&quot;&gt;Part 1 here&lt;/a&gt;. In this post, we will look at how other platforms handle list diffing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Edited to add code snippets for each platform.&lt;/p&gt;

&lt;h2&gt;Swift Standard Library&lt;/h2&gt;

&lt;p&gt;The Swift standard library has a &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200721-difference&quot;&gt;&lt;code&gt;difference(from:)&lt;/code&gt;&lt;/a&gt; method on &lt;code&gt;BidirectionalCollection&lt;/code&gt; protocol that returns a &lt;code&gt;CollectionDifference&lt;/code&gt; result. &lt;a href=&quot;https://www.fivestars.blog/code/swift-5-1-collection-diffing.html&quot;&gt;This blog post&lt;/a&gt; does a deep dive into this API in Swift.&lt;/p&gt;

&lt;p&gt;It looks like this facility is intended as a general purpose list diff API, not specific to UI programming. Remember, it is in the &lt;em&gt;standard library&lt;/em&gt; so it can be used in backend server programming, for example.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//CollectionDifference&amp;lt;String&amp;gt;(&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    insertions: [.insert(offset: 3, element: &quot;E&quot;, associatedWith: nil)], &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    removals: [.remove(offset: 2, element: &quot;C&quot;, associatedWith: nil)]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some notable features of this API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most interesting feature is the return type: &lt;code&gt;CollectionDifference&lt;/code&gt;. This API provides you a way to iterate through all the diff operations, or even to only pick the insertions (or removals). This is different from how Android does it. More on this in a minute.&lt;/li&gt;
&lt;li&gt;By default, it does not detect moves, but there&amp;#39;s an &lt;code&gt;inferringMoves()&lt;/code&gt; method on &lt;code&gt;CollectionDifference&lt;/code&gt; that you can use if you want to do this&lt;/li&gt;
&lt;li&gt;It uses equality by default for the comparison, but you can customize how the comparison occurs using &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200722-difference&quot;&gt;&lt;code&gt;difference(from: by:)&lt;/code&gt;&lt;/a&gt; variant. Here you pass in a closure that returns a &lt;code&gt;Bool&lt;/code&gt; so you can use whatever logic you wish to compare the elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;CollectionDifference&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;CollectionDifference&lt;/code&gt; provides in itself a Collection of &lt;code&gt;CollectionDifference.Change&lt;/code&gt; - which is an enum with 2 values: &lt;code&gt;.insert&lt;/code&gt; and &lt;code&gt;.remove&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.insert&lt;/code&gt; provides you with an &lt;code&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;final list&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.remove&lt;/code&gt; provides you with an &lt;code&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;original list&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;associatedWith&lt;/code&gt; parameter of the enums inform you about moves&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#39;s no concept of &amp;quot;changes&amp;quot; in this API - i.e., it does not tell you if an item retained its identity but did not retain equality.&lt;/p&gt;

&lt;p&gt;I could not find a way to convert positions between old and new lists, but I&amp;#39;m not sure if it is ever required when using this API in practice.&lt;/p&gt;

&lt;h2&gt;Swift Apple platforms&lt;/h2&gt;

&lt;p&gt;We started this series with an example of how Android&amp;#39;s RecyclerView animates between 2 lists using DiffUtil. It should come as no surprise that Apple&amp;#39;s UI frameworks have similar capabilities too.&lt;/p&gt;

&lt;p&gt;It has always been possible to achieve this on Apple platforms but it has been verbose and error-prone (frequently giving rise to the Swift equivalent of &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;). Recent API improvements have greatly enhanced the developer ergonomics here.&lt;/p&gt;

&lt;p&gt;The headline API is &lt;code&gt;UITableViewDiffableDataSource&lt;/code&gt; and friends (quite a mouthful!). This is completely out of my comfort zone so I&amp;#39;ll point you to &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/215&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/220&quot;&gt;talks&lt;/a&gt; from WWDC (there are also PDF slides available) if you want to learn more. I will point out though, that the items participating in this API need to be &lt;code&gt;Hashable&lt;/code&gt;. This is how the framework decides that items have &amp;quot;changed&amp;quot;. It fulfils the role of &lt;code&gt;areContentsTheSame()&lt;/code&gt; from Android&amp;#39;s DiffUtil.&lt;/p&gt;

&lt;h2&gt;Flutter&lt;/h2&gt;

&lt;p&gt;I could not find any official API for List Diffs in Flutter. However, there&amp;#39;s a third party library that is inspired by Android&amp;#39;s DiffUtils. It is called &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list&quot;&gt;AnimatedStreamList&lt;/a&gt;. The relevant files in this repo are &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart&quot;&gt;&lt;code&gt;myers_diff.dart&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/diff_payload.dart&quot;&gt;&lt;code&gt;diff_payload.dart&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffs[0] = DeleteDiff(2, 1)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffs[1] = InsertDiff(3, 1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of note in this library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It returns a &lt;code&gt;List&amp;lt;Diff&amp;gt;&lt;/code&gt;. In this sense it is similar to the Swift implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Diff&lt;/code&gt; can be one of &lt;code&gt;InsertDiff&lt;/code&gt;, &lt;code&gt;DeleteDiff&lt;/code&gt; or &lt;code&gt;ChangeDiff&lt;/code&gt;. This library does not implement moves.&lt;/li&gt;
&lt;li&gt;Each instance of &lt;code&gt;Diff&lt;/code&gt; includes an &lt;code&gt;index&lt;/code&gt; and a &lt;code&gt;size&lt;/code&gt;. In this respect, it is similar to the Android DiffUtil implementation.&lt;/li&gt;
&lt;li&gt;It uses an &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart#L5&quot;&gt;&lt;code&gt;Equalizer&lt;/code&gt;&lt;/a&gt; to customize the comparison.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Angular&lt;/h2&gt;

&lt;p&gt;Angular has an &lt;code&gt;IterableDiffer&lt;/code&gt; API that can be used to compute the diff between 2 Iterables. From what I can tell, it is not intended to be used directly by applications, instead it is used internally by the framework (for example, by the &lt;code&gt;NgForOf&lt;/code&gt; directive). &lt;a href=&quot;https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/&quot;&gt;This article&lt;/a&gt; goes into the nuts and bolts of this API.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;differ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngForOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffResult consists of following IterableChangeRecords&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;C&quot;, currentIndex = null, previousIndex = 2)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;E&quot;, currentIndex = 3, previousIndex = null)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;D&quot;, currentIndex = 2, previousIndex = 3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The interesting classes are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableDiffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt;: The entry point of the API. Offers the &lt;code&gt;diff&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChanges&quot;&gt;&lt;code&gt;IterableChanges&lt;/code&gt;&lt;/a&gt;: The diff result, which in itself is an Iterable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChangeRecord&quot;&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt;&lt;/a&gt;: Each individual update operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;IterableChanges&lt;/code&gt; interface is pretty interesting: it exposes functions to iterate over the changes in a variety of ways (all updates, only additions, only removals etc). The &lt;code&gt;DefaultIterableDiffer&lt;/code&gt; accepts a &lt;code&gt;TrackByFn&lt;/code&gt; argument, which fulfils the role of Android&amp;#39;s &lt;code&gt;DiffUtil.Callback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt; is also interesting: It does not directly state the diff operation. Instead, it contains &lt;code&gt;currentIndex&lt;/code&gt; and &lt;code&gt;previousIndex&lt;/code&gt;. Together, these can be used to decide if an item was added, removed etc. It also fulfils the role of position conversion APIs in Android. &lt;/p&gt;

&lt;p&gt;In practice, you&amp;#39;d probably use the &lt;code&gt;IterableChanges&lt;/code&gt; API to figure out the additions and removals.&lt;/p&gt;

&lt;h2&gt;At a glance&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a table summarizing all the diff APIs across these platforms.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Android&lt;/th&gt;
&lt;th&gt;Swift&lt;/th&gt;
&lt;th&gt;Flutter (3rd party)&lt;/th&gt;
&lt;th&gt;Angular&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Detect Moves&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change payloads&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom comparison&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DiffUtil.Callback&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;difference(from:by:)&lt;/code&gt;, &lt;code&gt;Hashable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Equalizer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TrackByFn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Position conversion&lt;/td&gt;
&lt;td&gt;Methods on &lt;code&gt;DiffResult&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;A note about declarative UI frameworks&lt;/h3&gt;

&lt;p&gt;This series of blog posts actually started when I was trying to implement custom animations for a list view on Android. When I started this research, the question I wanted to answer was&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How do declarative UI frameworks deal with allowing custom animations for changes in lists?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that declarative UI frameworks in general receive a UI state and render that state. They don&amp;#39;t have a concept of &amp;quot;previous state&amp;quot; so &amp;quot;this item was removed&amp;quot; animation does not fit into this paradigm.&lt;/p&gt;

&lt;p&gt;So far, I haven&amp;#39;t found an answer to this question!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SwiftUI provides some default animations, but I did not find a way to customize them.&lt;/li&gt;
&lt;li&gt;Flutter has no official APIs for this use case.&lt;/li&gt;
&lt;li&gt;Angular has some APIs that look like they are used internally. I&amp;#39;m way out of my depth about Angular to form any practical opinion about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will be really interesting to see how Jetpack Compose is going to solve this problem!&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After my research for this post, I came to the conclusion that Android&amp;#39;s DiffUtil API is the most flexible of all. It is the lowest level API for exposing the diff operations (the &lt;code&gt;ListUpdateCallback&lt;/code&gt;). All other platforms expose collection-style APIs for this purpose.&lt;/p&gt;

&lt;p&gt;I reckon Android has this low-level API because it plays well together with RecyclerView Adapter API. One can write a wrapper to expose it as a collection-style API.&lt;/p&gt;

&lt;p&gt;That is exactly what we will do in the next post in this series: Look at an example situation where RecyclerView might not be best fit, and instead wrap the &lt;code&gt;ListUpdateCallback&lt;/code&gt; to implement some custom UI.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jan 2020 10:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2020/01/07/diff-util-part2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/07/diff-util-part2/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>What's the big difference? A deep dive into Android DiffUtil</title>
        <description>&lt;p&gt;This is a series of posts that looks into calculating the diffs between two lists on Android. This first post in the series looks at the basics of what the DiffUtil is.&lt;/p&gt;

&lt;h2&gt;What&amp;#39;s DiffUtil?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil&quot;&gt;docs for DiffUtil&lt;/a&gt; describe it as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DiffUtil is a utility class that calculates the difference between two lists and outputs a list of update operations that converts the first list into the second one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The selling point of this utility is it is nicely integrated with RecyclerView such that the following simple series of steps is sufficient to display nice animations for newly added items and disappearing items in the list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;diffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatchUpdatesTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Given the following data&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While switching back and forth between these 2 lists, this code produces this animation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_basic.gif&quot; alt=&quot;Basic diff animation&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You could also achieve this effect using the &lt;code&gt;notifyItemXYZ&lt;/code&gt; family of methods on &lt;code&gt;RecyclerView.Adapter&lt;/code&gt;, if you maintain the list of items yourself and mutate it. However, in unidirectional data flow architectures, it is likely that you have an immutable list in your state. In those situations, &lt;code&gt;DiffUtil&lt;/code&gt; is more suitable.&lt;/p&gt;

&lt;h2&gt;DiffUtil API usage in detail&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s dig into how to use the API. Using DiffUtil consists of the following high-level steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You tell the API how to compare items in the list (what constitutes a &amp;quot;removal&amp;quot;? What does a &amp;quot;change&amp;quot; mean?)&lt;/li&gt;
&lt;li&gt;You ask the API to calculate the diff and give you a result&lt;/li&gt;
&lt;li&gt;You use the DiffResult object to get called back for each update operation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;#39;s go through each step in more detail. We&amp;#39;ll use a &lt;code&gt;Player&lt;/code&gt; class like this for this example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 1: Comparing list items&lt;/h3&gt;

&lt;p&gt;DiffUtil tells you what items were removed, added and changed between 2 lists, but how does it know? Android chose to not use &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; for this purpose - instead having you extend a &lt;code&gt;DiffUtil.Callback&lt;/code&gt; class. The relevant methods that you need to override are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;areItemsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;identity comparison&lt;/strong&gt;. In the case of the Player class above, 2 items have the same identity if they have the same name. We don&amp;#39;t care about the score for this comparison&lt;/li&gt;
&lt;li&gt;&lt;code&gt;areContentsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;equality comparison&lt;/strong&gt;. In the case of the Player class, 2 items have the same contents if they have the same name and score.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is used to tell you if an item retained the same identity but its contents changed. This can be useful for item change animations (for example, if a user liked a tweet you can animate the heart icon using this feature)&lt;/p&gt;

&lt;p&gt;The entire code for the callback would be&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areItemsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOldListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNewListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areContentsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 2: Calculating the diff&lt;/h3&gt;

&lt;p&gt;This step is a one-liner&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there&amp;#39;s a lot going on behind the scenes. &lt;code&gt;calculateDiff&lt;/code&gt; implements the standard algorithm used for diffing: Eugene Myers diff algorithm. This is also the algorithm used by diff tools like &lt;code&gt;git diff&lt;/code&gt; and text editors. It is not necessary to know the implementation details of this algorithm, but if you are interested, you can go through &lt;a href=&quot;https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DiffUtil can also detect moves. If the position of an item in the list changes, then instead of reporting it as a removal followed by an insertion, DiffUtil can report it as a move from position A to position B. You do this by passing &lt;code&gt;true&lt;/code&gt; to the second argument (&lt;code&gt;detectMoves&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;We will ignore moves for the rest of this series.&lt;/p&gt;

&lt;h3&gt;Step 3: Using the DiffResult&lt;/h3&gt;

&lt;p&gt;This is the step where I found the API to be a bit ... unexpected. I would expect the DiffResult to give me a collection of update operations in the order that they need to be performed (something like a &lt;code&gt;List&amp;lt;DiffOperation&amp;gt;&lt;/code&gt;). Instead, you need to call one of the &lt;code&gt;dispatchUpdatesTo&lt;/code&gt; overloads:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dispatchUpdatesTo(adapter: Adapter)&lt;/code&gt;: This is the one that you&amp;#39;ll probably use 99% of the time. You pass on the results to your existing RecyclerView adapter and you get all those animations automagically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchUpdatesTo(updateCallback: ListUpdateCallback)&lt;/code&gt;: You use this if you want custom animations. In a later post in this series, we&amp;#39;ll look at an example where you might need this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;code&gt;ListUpdateCallback&lt;/code&gt; in detail&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/ListUpdateCallback.html&quot;&gt;This interface&lt;/a&gt; has the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onChanged(position: Int, count: Int, payload: Any?)&lt;/code&gt;: This is called when DiffUtil detects that &lt;code&gt;count&lt;/code&gt; items have changed starting at &lt;code&gt;position&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onInserted(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code&gt;count&lt;/code&gt; elements have been inserted into the old list starting at &lt;code&gt;position&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRemoved(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code&gt;count&lt;/code&gt; elements have been removed from the old list starting at &lt;code&gt;position&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some important points to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These methods &lt;strong&gt;atomic&lt;/strong&gt;: the &lt;code&gt;position&lt;/code&gt; argument reported in every method is with reference to the &lt;em&gt;list as it was after the previous step&lt;/em&gt;, not as it was at the beginning of the diff operation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;count&lt;/code&gt; parameter in these methods makes it so that only consecutive similar changes are grouped together, not disjoint ones. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 2 above merits more discussion. To put it another way, if items at position 0 and 2 are deleted, DiffUtil reports it as &amp;quot;Hey item 2 was removed&amp;quot; and &amp;quot;Hey item 0 was removed&amp;quot; as separate callbacks instead of telling you &amp;quot;Hey items 0 and 2 were removed&amp;quot; in a single callback. This follows as a consequence of point 1 because each disjoint operation might have altered the structure of the list.&lt;/p&gt;

&lt;p&gt;The API designed this way allows you to basically endlessly &amp;quot;stream&amp;quot; diff operations from DiffResult to your UI component. This is powerful, but can also have downsides (as we will see in a future post).&lt;/p&gt;

&lt;h4&gt;Position conversions&lt;/h4&gt;

&lt;p&gt;In addition to &lt;code&gt;ListUpdateCallback&lt;/code&gt;, there are 2 additional API&amp;#39;s offered by &lt;code&gt;DiffResult&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;convertOldPositionToNew(oldListPosition: Int)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;convertNewPositionToOld(newListPosition: Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They do what their names suggest. When would you use these? Remember that when one of the ListUpdate callbacks has been dispatched, the number of items in the list might have changed. An item at index &lt;code&gt;i&lt;/code&gt; in the new list might not represent the same item at index &lt;code&gt;i&lt;/code&gt; in the old list (it might not even exist in the old list). This pair of conversion methods is useful in such situations. One example is for animations, where you need to access the same view in both the old and new layouts.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we got an introduction to DiffUtil and how to use it. We also peeked under the hood into &lt;code&gt;ListUpdateCallback&lt;/code&gt;, but we haven&amp;#39;t used it in an example yet.&lt;/p&gt;

&lt;p&gt;In the next post in this series, we will conduct a brief survey of how other platforms handle list diffs.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 16:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2020/01/06/diff-util-part1/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/06/diff-util-part1/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>The Limits of One-size-fits-all</title>
        <description>&lt;p&gt;At Google I/O 2017, Google announced Android Go, a  configuration of Android that is optimized for entry-level devices. The focus of this initiative is around affordability, limited connectivity and multi-lingual capability. Starting Android O, all devices that have a memory of 1GB or less will ship with this configuration.&lt;/p&gt;

&lt;p&gt;I see this step as sort of an acknowledgement that we are reaching the limits of &amp;quot;one-size-fits-all&amp;quot; mentality we&amp;#39;ve had all these years. It is a refreshing change from the &amp;quot;We have a potential target of a billion users, hence we &lt;strong&gt;must&lt;/strong&gt; make a single app that caters to all&amp;quot;. Android has reached the tipping point (2 billion active users) where that approach no longer scales. In the best case it results in a solution that satisfies one subset of users at the expense of the other. In the worst case it produces something that does not solve the needs of either!&lt;/p&gt;

&lt;p&gt;The requirements and constraints of the developing world are vastly different from that of the developed world. App usage patterns for the same app might differ between the target groups. Localization is about more than translating strings, currency and temperature units. Not all the guidelines about &lt;a href=&quot;https://material.io/guidelines/style/writing.html#&quot;&gt;writing style&lt;/a&gt; are applicable globally. Metaphors do not scale well across languages and cultures.&lt;/p&gt;

&lt;p&gt;Facebook set the ball rolling with the Facebook Lite app. This is a tiny app (&lt;2MB installed size excluding data on my Android 6.0 phone). Compare this with the regular Facebook app that is &gt;70MB at the time of this writing. The Facebook Lite app is also frugal in its mobile data usage.&lt;/p&gt;

&lt;p&gt;YouTube Go seems to be following in the footsteps. They have studied and understood how people use YouTube in developing markets. They have realized that always requiring an internet connection is absurd to the point of being stupid. The peer to peer sharing feature is the killer. Most people were using some shady youtube downloader apps to download YT videos offline, and then sharing it with peers using ShareIt or the like anyway.&lt;/p&gt;

&lt;p&gt;I believe Android Go will act as a turning point in the industry&amp;#39;s approach to global apps. It is no longer taboo to offer multiple flavors of the same app, catering to different target groups. In fact, with Android Go&amp;#39;s Google Play catalog that highlights apps optimized for the entry-level devices, I believe this will become a norm going forward.&lt;/p&gt;

&lt;p&gt;Remember, it is not about how many users you have, but about how useful your app is to those users.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 11:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2017/05/25/one-size-doesnt-fit-all/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/05/25/one-size-doesnt-fit-all/</guid>
        
        <category>next-billion</category>
        
        <category>android-go</category>
        
        
      </item>
    
      <item>
        <title>Java: Value classes and the equals() method</title>
        <description>&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; When overriding &lt;code&gt;equals()&lt;/code&gt; method for a &lt;em&gt;value class&lt;/em&gt; in java, it is preferable to reject instances of sub-classes of this class. In other words, use &lt;code&gt;getClass()&lt;/code&gt; instead of &lt;code&gt;instanceof&lt;/code&gt; for ensuring that the other object is of the correct type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; Exception to Rule 1: If it is likely that the object that will be passed around is an instance of &lt;strong&gt;&lt;em&gt;a proxy of your class&lt;/em&gt;&lt;/strong&gt;, then use &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Deep-dive&lt;/h2&gt;

&lt;p&gt;A lot has been written about &lt;code&gt;equals()&lt;/code&gt; in Java. For me the definitive source has been from &amp;quot;Effective Java 2nd Edition&amp;quot;. Item 8 says &amp;quot;Obey the general contract when overriding equals&amp;quot;.&lt;/p&gt;

&lt;p&gt;However, as a programmer I do not need to remember the recipe provided by Joshua Bloch (well, most of the time). This is because IDEs offer options to auto-generate the &lt;code&gt;equals()&lt;/code&gt; (and a corresponding &lt;code&gt;hashCode()&lt;/code&gt;) methods for me. Mechanisms for creating value classes (like &lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot;&gt;AutoValue&lt;/a&gt; or Kotlin&amp;#39;s &lt;a href=&quot;https://kotlinlang.org/docs/reference/data-classes.html&quot;&gt;data classes&lt;/a&gt;) go one step further by not even requiring you to maintain the equals() method in source code format. &lt;/p&gt;

&lt;p&gt;That said, there are some gotchas to be aware of that crop up from time to time. The point relevant to this post is (I might be para-phrasing it)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not possible to extend an instantiable class and add a field without violating the contract of the equals method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I encourage you to read Joshua Bloch&amp;#39;s explanation of this along with the excellent examples to understand what the contract is and why extending a class might break this contract. Once you understand this concept, Rule 1 is a logical conclusion. If you are comparing an instance of this class with an instance of a sub-class, you want to return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, this is not always feasible. There are cases where the value class is just a crutch for a framework to do its work. The value class that you define serves as the interface between you and the framework, while the framework generates sub-classes of your class to use as a proxy.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;p&gt;That&amp;#39;s a lot of hand-waving! Let&amp;#39;s get to a concrete example, in this case the example which led me to write this blog post in the first place - &lt;a href=&quot;https://realm.io/docs/java/latest/&quot;&gt;Realm&lt;/a&gt;. Realm is an object database for Android. You declare your models as POJOs and you can then use Realm to persist/query them.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how you would define a User model in Realm:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Rest of the class left out for brevity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let&amp;#39;s see what happens when we use the strict interpretation of the &lt;code&gt;equals()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Strict type comparison&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, assume you are writing a test to check whether a &lt;code&gt;User&lt;/code&gt; instance retrieved from Realm is what you expect it to be.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;givenADatabase_whenRetrieveByName_thenReturnsCorrectUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will find that this test fails, even though the instance returned from Realm has the correct &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. Why is this so?&lt;/p&gt;

&lt;h4&gt;Proxy classes&lt;/h4&gt;

&lt;p&gt;This is because the object that Realm returns is an instance of &lt;code&gt;UserRealmProxy&lt;/code&gt; that extends your &lt;code&gt;User&lt;/code&gt; class. Even though the fields that matter for this comparison are the same, the &lt;code&gt;if (!getClass().equals(o.getClass()) return false;&lt;/code&gt; line leads our equals implementation to report that the instances are not equal.&lt;/p&gt;

&lt;p&gt;The fix is of course to be more lenient in checking the types in equals(), with the trade-off that you potentially break the contract of &lt;code&gt;equals()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//lenient type comparison&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Realm is just one example of where a proxy class is used. There is a host of libraries/frameworks that proxy your value classes under the covers. Although the intent is for you as a user of the framework to be largely unaware of the use of these proxies, the peculiar case of &lt;code&gt;equals()&lt;/code&gt; and sub-classes means that at times you need to be aware of these implementation details.&lt;/p&gt;

&lt;h4&gt;Aside: Order of Expected and Actual in tests&lt;/h4&gt;

&lt;p&gt;When I got started with unit testing, I often did not care about the order in which I passed the &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; in tests. I did not differentiate between &lt;code&gt;assertEquals(expected, actual)&lt;/code&gt; and &lt;code&gt;assertEquals(actual, expected)&lt;/code&gt;. The worst that could happen was that I would be slightly confused by the JUnit error message sometimes, but my tests that should pass would still pass, and those that should fail would still fail.&lt;/p&gt;

&lt;p&gt;However, in the example above, you will notice that if you switch the positions of &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt;, the result of the test will be different. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test fails. This is because the &lt;code&gt;UserRealmProxy&lt;/code&gt; class has extended &lt;code&gt;User&lt;/code&gt; and overridden &lt;code&gt;equals()&lt;/code&gt; in a way that breaks symmetry.&lt;/p&gt;

&lt;p&gt;This is one of the reasons why the contract of &lt;code&gt;equals&lt;/code&gt; says that it should be symmetric, i.e., &lt;code&gt;x.equals(y)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; &lt;strong&gt;if and only if&lt;/strong&gt; &lt;code&gt;y.equals(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;A survey of equals-generators&lt;/h2&gt;

&lt;p&gt;We will now survey existing tools that generate &lt;code&gt;equals()&lt;/code&gt; for you and see how they handle type-checks.&lt;/p&gt;

&lt;h4&gt;Eclipse&lt;/h4&gt;

&lt;p&gt;At the time of this writing, Eclipse Neon, in the wizard to &amp;quot;Generate hashCode() and equals()&amp;quot; has a checkbox &amp;quot;Use &amp;#39;instanceof&amp;#39; to compare types&amp;quot;. If you check this checkbox that Eclipse generates a strict type comparison, else it generates the more lenient one.&lt;/p&gt;

&lt;h4&gt;IntelliJ IDEs&lt;/h4&gt;

&lt;p&gt;IntelliJ IDEA, Android Studio and other similar IDEs have a checkbox &amp;quot;Accept subclasses as parameters to equals() method&amp;quot;. Checking this checkbox will generate the &lt;em&gt;lenient&lt;/em&gt; type comparison, while the default (un-checking it) will generate the strict type comparison&lt;/p&gt;

&lt;h4&gt;Kotlin data classes&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates bytecode equivalent to the following Java code&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intrinsics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;areEqual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it generates an &lt;code&gt;instanceof&lt;/code&gt; check but this &lt;strong&gt;does not violate the contract of equals()&lt;/strong&gt;. This is because in Kotlin (as of v1.1.0), data classes cannot be sub-classed.&lt;/p&gt;

&lt;h4&gt;Auto-Value&lt;/h4&gt;

&lt;p&gt;With this declaration using AutoValue&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@AutoValue&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AutoValue_UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated code (snipped to show only relevant portions) is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoValue_UserAV&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...snip...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two points to observe:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The generated &lt;code&gt;equals()&lt;/code&gt; uses the lenient &lt;code&gt;instanceof&lt;/code&gt; for type comparison&lt;/li&gt;
&lt;li&gt;The generated class is declared &lt;code&gt;final&lt;/code&gt;, hence it is guaranteed that there are no sub-classes which means the contract of &lt;code&gt;equals()&lt;/code&gt; is not violated.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In a majority of the cases, tools that generate &lt;code&gt;equals()&lt;/code&gt; method are good enough. There is no reason to customize the code that they generate for you. However, there are cases where it is advantageous to be aware of what is going on under the hood.&lt;/p&gt;

&lt;p&gt;For value classes, prefer to do a strict type comparison in the &lt;code&gt;equals()&lt;/code&gt; method, unless it is likely that the value class might be proxied.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Apr 2017 22:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2017/04/03/java-value-classes-equals/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/04/03/java-value-classes-equals/</guid>
        
        <category>effectivejava</category>
        
        
      </item>
    
      <item>
        <title>Delegates - Composition over Inheritance in Kotlin</title>
        <description>&lt;p&gt;Joshua Bloch&amp;#39;s Effective Java Item 16 says &amp;quot;Favor composition over Inheritance&amp;quot;. The reasons for doing so are well-described in the book, so we will concentrate on the implementation aspects and how Kotlin helps. &lt;/p&gt;

&lt;p&gt;The idea behind composition is that if &lt;code&gt;class A&lt;/code&gt; needs behavior defined in &lt;code&gt;class B&lt;/code&gt;, then instead of inheriting from &lt;code&gt;class B&lt;/code&gt;, it could have a member variable of &lt;code&gt;class B&lt;/code&gt;. Then any behavior that &lt;code&gt;class A&lt;/code&gt; would have achieved by calling a method on &lt;code&gt;super&lt;/code&gt;, it achieves the same by calling that method on the member variable of type &lt;code&gt;class B&lt;/code&gt; instead. &lt;/p&gt;

&lt;p&gt;An example of this is seen in the book: The &lt;code&gt;InstrumentedSet&lt;/code&gt; - first a broken implementation that uses &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/InstrumentedHashSet.java&quot;&gt;Inheritance&lt;/a&gt;, and then corrects it &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/ForwardingSet.java&quot;&gt;using&lt;/a&gt; &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/InstrumentedSet.java&quot;&gt;Composition&lt;/a&gt;. When you use the composition pattern, the &lt;strong&gt;wrapper&lt;/strong&gt; class simply forwards all method calls to an instance of the &lt;strong&gt;wrapped&lt;/strong&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/*
     * ForwardingSet is the wrapper class and it wraps the Set.
     *
     * In this example ForwardingSet also implements Set interface but that is just 
     * in order to adhere to the interface and not for inheritance. Set, being an interface, there is
     * no implementations in {@code super}!
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, the downside of using the composition pattern is the verbosity. This is boilerplace, tedious, robotic code that should be automated.&lt;/p&gt;

&lt;p&gt;And, well, it can be automated. IDE&amp;#39;s do this automation for you. IntelliJ, for example, has &amp;quot;Replace Inheritance with Delegation&amp;quot; as an option in the &amp;quot;Refactor&amp;quot; menu. However, the generated code is still code that needs to be maintained. When you change methods/add new methods, you now have two (or more) places where you need to make the change. Also over time you are no longer sure what parts of this class were generated and what parts were hand-writtern.&lt;/p&gt;

&lt;h2&gt;Delegation in Kotlin&lt;/h2&gt;

&lt;p&gt;Enter Kotlin&amp;#39;s delegates. Here is the same example using Kotlin delegates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardingMutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It really is as simple as that. The &lt;code&gt;by s&lt;/code&gt; clause basically tells Kotlin to maintain an object of &lt;code&gt;MutableSet&lt;/code&gt; and forward any applicable calls to that instance instead. And remember all this is done at compile time.&lt;/p&gt;

&lt;p&gt;The complete example, including a simple unit test is hosted &lt;a href=&quot;http://try.kotlinlang.org/#/UserProjects/r6h47rducuggpve5g1l4d2d8nd/on2i6nnt4armofoep69ch5qknk&quot;&gt;here&lt;/a&gt;. You can play around with it thanks to the awesome try.kotlinlang.org.&lt;/p&gt;

&lt;h2&gt;Limitations&lt;/h2&gt;

&lt;p&gt;This is a limitation with the pattern, rather than with Kotlin&amp;#39;s implementation of the pattern - you can only use delegation if you control the instantiation of the object of the wrapped class. You cannot, for example compose Android&amp;#39;s Activity classes because the framework instantiates an Activity for you. Of course, you should probably be composing Presenters/ViewModels/Whatever rather than Activities/Fragments but that is a topic for another blog post!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 16:21:22 +0100</pubDate>
        <link>http://localhost:4000/blog/2017/03/05/kotlin-coi/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/03/05/kotlin-coi/</guid>
        
        <category>kotlin</category>
        
        
      </item>
    
      <item>
        <title>AO(sp)y Episode 2 - Lambdas</title>
        <description>&lt;p&gt;This post is the second episode in a series where I peek into random commits on AOSP and try to predict what&amp;#39;s coming to the world of Android development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: These tidbits have been gleaned primarily from the commit messages on AOSP. I very rarely even read (let alone understand) the code. As such expect inaccuracies or downright mistakes here. Do not make decisions based on what you read in this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That out of the way, let’s dig in. This episode was supposed to be about toolchain improvements, but the headline feature is what the title says - lambdas! Lest I am accused of clickbait, let me clarify that all of this is still experimental. Several commits are not even merged. There is no saying when (and if) any of these features will actually find their way into production.&lt;/p&gt;

&lt;p&gt;Ever since Java8 was released, the clamor for using lambdas in Android development has been growing, with good reason too. Android is full of anonymous inner classes for all kinds of things and several of these use cases would benefit from the use of lambdas.&lt;/p&gt;

&lt;p&gt;Java 8 brought about two types of enhancements to the Java programming language:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Features and syntax in the language itself&lt;/li&gt;
&lt;li&gt;Additions to the standard libraries to take advantage of the new features&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article concentrates purely on the first type of enhancements, i.e.,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&quot;&gt;Method references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;Default methods in interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static methods in interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not look like there is any move to bring the enhancements to the runtime libraries in the form of new collections and &lt;code&gt;java.util.function&lt;/code&gt; package to Android.&lt;/p&gt;

&lt;p&gt;So, what’s cooking?&lt;/p&gt;

&lt;h3&gt;Runtime support&lt;/h3&gt;

&lt;p&gt;Opcodes for creating and invoking lambdas are &lt;a href=&quot;https://android-review.googlesource.com/#/c/147957/&quot;&gt;being added&lt;/a&gt; to the Dalvik bytecode (dex) format. The ART interpreter is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155661/&quot;&gt;being updated&lt;/a&gt; to be able to use these opcodes.&lt;/p&gt;

&lt;p&gt;The first of these commits also points to the &lt;code&gt;dex2oat&lt;/code&gt; compiler being taught how to compile lambdas from your dex bytecode into the corresponding opcodes for OAT.&lt;/p&gt;

&lt;p&gt;What does all this mean? It means that &lt;em&gt;lambdas might be supported natively&lt;/em&gt; in a future version of Android.&lt;/p&gt;

&lt;h3&gt;Toolchain enhancements&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/c/158285/&quot;&gt;This commit&lt;/a&gt; and related ones point to the possibility of Jack compiler doing basically what is achieved with &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;gradle-retrolambda&lt;/a&gt; today. In other words, Jack compiler will be able to compile lambdas into bytecode that works even on runtimes that don’t support lambda opcodes. Similarly, Jill will likely do to lambdas in .class/.jar libraries what Jack does to them in source code.&lt;/p&gt;

&lt;h3&gt;Other Java8 features&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s more to Java8 than just the lambda syntax. AOSP also has commits that hint at support for &lt;a href=&quot;https://android-review.googlesource.com/#/c/169003/&quot;&gt;default methods&lt;/a&gt; and &lt;a href=&quot;https://android-review.googlesource.com/#/c/158165/&quot;&gt;Single Abstract Methods&lt;/a&gt;. I did not find any obvious mention of method references, but that might be because I&amp;#39;m not looking hard enough. In any case, method references are just syntax sugar for lambdas so if lambda expressions are supported, so should method references.&lt;/p&gt;

&lt;h3&gt;Compatibility&lt;/h3&gt;

&lt;p&gt;At first glance, one might conclude that lambdas will be used only if &lt;code&gt;minSdkVersion &amp;gt;=&lt;/code&gt; the version of Android in which they are introduced, and that Jack&amp;#39;s feature of down-compiling lambdas into Java7-compatible bytecode will be used in all other cases. This means that the runtime lambdas will not be used &lt;em&gt;even on the runtimes that support them unless &lt;code&gt;minSdkVersion&lt;/code&gt; is set to the latest&lt;/em&gt;. However, this is (more than) likely to negatively impact the adoption of lambdas.&lt;/p&gt;

&lt;p&gt;So, what might be strategies to work around this? What follows is a &lt;strong&gt;wild guess&lt;/strong&gt; as to how this might pan out. I haven&amp;#39;t dug in the source code into much (or ... &lt;em&gt;any&lt;/em&gt;) detail (not that I&amp;#39;d understand much of it even if I had, but that&amp;#39;s beside the point).&lt;/p&gt;

&lt;p&gt;Remember that &lt;code&gt;dex2oat&lt;/code&gt; runs on the Android device. The APK file only has dex bytecode, and it is converted into OAT at installation time. Could this be used to enhance the compatibility story?&lt;/p&gt;

&lt;p&gt;Jack might use &lt;code&gt;targetSdkVersion&lt;/code&gt; to decide whether to include lambdas in the compiled dex bytecode. If &lt;code&gt;targetSdkVersion &amp;gt;=&lt;/code&gt; the version in which lambda support is introduced, then the generated dex might &lt;em&gt;include&lt;/em&gt; the Java8 bytecode. But wait, aren&amp;#39;t we back at square one? &lt;code&gt;dex2oat&lt;/code&gt; is part of the Android OS and cannot (yet) be updated independently of the OS. This means that &lt;code&gt;dex2oat&lt;/code&gt; that is running on an older version of the OS will not understand the new dex bytecode.&lt;/p&gt;

&lt;p&gt;This is why I say &lt;em&gt;include&lt;/em&gt; Java8 opcodes instead of &lt;em&gt;generate&lt;/em&gt; - that is to say, Jack might generate both the Java7-compatible byte code as well as new Java8 opcodes. Hopefully, &lt;code&gt;dex2oat&lt;/code&gt; running on older versions of Android simply ignore the Java8 opcodes. But, what about the size implications of this arrangement? In lambda-heavy apps, will this result in bloated &lt;code&gt;.dex&lt;/code&gt; files?&lt;/p&gt;

&lt;p&gt;The other option is that Jack might always generate Java7 compatible bytecode (compiles lambda expressions into anonymous inner classes), but it might include some sort of flag to indicate to &lt;code&gt;dex2oat&lt;/code&gt; that these constructs be compiled into the corresponding Java8 OAT format. But this begs the question - what, then, is the point of the new opcodes in &lt;code&gt;.dex&lt;/code&gt; format at all?&lt;/p&gt;

&lt;p&gt;I do not have the answers to these questions yet (nor does AOSP). But I&amp;#39;m sure the answers will reveal themselves in the days to come. If you are interested in this topic, you can follow the progress yourself at the following locations on AOSP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:platform/art&quot;&gt;platform/art&lt;/a&gt; project ...&lt;/li&gt;
&lt;li&gt;... particularly, the &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:merged+project:platform/art+branch:master+topic:lambda_experimental&quot;&gt;lambda_experimental&lt;/a&gt; topic&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:toolchain/jack&quot;&gt;toolchain/jack&lt;/a&gt; project &lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:open+project:toolchain/jack+branch:ub-jack-lang-dev&quot;&gt;ub-jack-lang-dev&lt;/a&gt; branch&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2015/09/06/ao-spy-2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/09/06/ao-spy-2/</guid>
        
        <category>aosp</category>
        
        <category>android</category>
        
        <category>java8</category>
        
        <category>lambda</category>
        
        
      </item>
    
      <item>
        <title>AO(sp)y Part 1</title>
        <description>&lt;p&gt;This post is the first in a series (hopefully) in which I spy on AOSP (hence the title - yes, I know I&amp;#39;m not winning any prizes for creative blog post titles!) and try to gather glimpses of what&amp;#39;s coming to the world of Android.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Most of this is guess work. In many cases I&amp;#39;m not even looking at any code - the commit messages and review comments are as far I go. Do not make any decisions based on this post!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this first episode, we will look at improvements coming to Android Studio (most probably in 1.4)&lt;/p&gt;

&lt;h3&gt;Material Icon Picker&lt;/h3&gt;

&lt;p&gt;There &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7647?pr=androidstudio&quot;&gt;already exist&lt;/a&gt; plugins for Android Studio that make it easy for you to include Material Design icons in your project. Google is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155698/&quot;&gt;working on&lt;/a&gt; bringing something similar into the Android Studio.&lt;/p&gt;

&lt;p&gt;Now, I haven&amp;#39;t actually checked out this code and built it so I don&amp;#39;t know what the picker actually looks like, but it would be a safe bet to assume that it&amp;#39;ll be integrated into the existing &amp;quot;Asset Studio&amp;quot; (which itself started as a web app, then found its way into Eclipse and in its current avatar, it is part of AS).&lt;/p&gt;

&lt;h3&gt;Material Color Suggestor&lt;/h3&gt;

&lt;p&gt;If I want to change the color palette of my app today, I need to go to &lt;a href=&quot;http://www.materialpalette.com/&quot;&gt;http://www.materialpalette.com/&lt;/a&gt; and choose my colors there and finally download the styles.xml file. &lt;a href=&quot;https://android-review.googlesource.com/#/c/156624/&quot;&gt;This feature&lt;/a&gt; will make it easy for you to set your material color palette from within Android Studio. Moreover, the tool is a color suggestor - you choose a primary color and AS will suggest a primaryDark and an accent color that goes with it according to the material design specs.&lt;/p&gt;

&lt;h3&gt;Import SVG as Vector Drawable&lt;/h3&gt;

&lt;p&gt;Again, there &lt;a href=&quot;http://inloop.github.io/svg2android/&quot;&gt;already exist&lt;/a&gt; tools to convert an SVG file into an Android-compatibe Vector Drawable, but it would be nice to have &lt;a href=&quot;https://android-review.googlesource.com/#/c/163309/&quot;&gt;this functionality&lt;/a&gt; right in Studio.&lt;/p&gt;

&lt;h3&gt;VectorDrawable to PNG&lt;/h3&gt;

&lt;p&gt;This is not an Android Studio feature - rather it is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/162815/&quot;&gt;Gradle feature&lt;/a&gt;. It will convert vector drawables into PNGs for use with pre-Lollipop. This will be done at build time. I&amp;#39;m not sure if this means that we can do away with creating those &lt;code&gt;drawable-*hdpi&lt;/code&gt; PNGs altogether though.&lt;/p&gt;

&lt;h3&gt;New Layout Editor&lt;/h3&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/159435/&quot;&gt;large list of commits&lt;/a&gt; mentioning the &amp;quot;Nele&amp;quot; which seems to be an internal acronym for New Layout Editor. A cursory glance at it did not reveal much about what exactly is new in this layout editor. However, it is possible that this info is there buried somewhere in one of the 49 related commits and that I have missed it. One thing is for sure - this is a pretty big change and Google wouldn&amp;#39;t have embarked on it if it wouldn&amp;#39;t bring significant advantages to developers.&lt;/p&gt;

&lt;h3&gt;AppBar creation in AS&lt;/h3&gt;

&lt;p&gt;Android Studio is &lt;a href=&quot;https://android-review.googlesource.com/#/c/162681/&quot;&gt;gaining the capability&lt;/a&gt; to include an AppBar when you use the templates to create a new Activity. According to the commit message, this will be optional. Also, a dependency on the design support library will be included by default for new projects. This is a very welcome change.&lt;/p&gt;

&lt;p&gt;Stay tuned for Part 2 where we go beyond the IDE and dig a little deeper into the toolchain.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2015/08/12/ao-spy-1/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/08/12/ao-spy-1/</guid>
        
        <category>aosp</category>
        
        <category>studio</category>
        
        <category>android</category>
        
        
      </item>
    
  </channel>
</rss>
