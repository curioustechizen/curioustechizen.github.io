<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curious Techizen</title>
    <description>A place for discussing anything tech. Old and new. Experiences and Opinions. Questions and rants. Primarily programming-related, but not exclusively.</description>
    <link>https://kiranrao.in/blog/</link>
    <atom:link href="https://kiranrao.in/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 23 Dec 2020 19:03:24 +0100</pubDate>
    <lastBuildDate>Wed, 23 Dec 2020 19:03:24 +0100</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>UI ≠ UX</title>
        <description>&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/R8DfByhDJL&quot;&gt;pic.twitter.com/R8DfByhDJL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rachel Appel (@RachelAppel) &lt;a href=&quot;https://twitter.com/RachelAppel/status/1168905856773230594?ref_src=twsrc%5Etfw&quot;&gt;September 3, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that have been discussed at length, I’m just making my own observations about them. You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m not a designer, so please take the opinions in this post with a pinch of salt.&lt;/p&gt;

&lt;h2 id=&quot;ui-and-ux&quot;&gt;UI and UX&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good user interface is a user acquisition tool, while a good user experience is a user retention tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To put it differently, a good user interface attracts users to your system, while a good user experience gets users to keep using your system. A couple of important observations about this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Neither is a subset of the other; a good UI does not necessarily translate to good UX and it is possible to have a good UX while the UI is poor.&lt;/li&gt;
  &lt;li&gt;Both of these are important; their relative importance depends on the nature of the system (more on this when we discuss some examples in a minute).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;good-ui-not-so-good-ux&quot;&gt;Good UI, not so good UX&lt;/h3&gt;

&lt;p&gt;Let’s look at some examples where UI is good, but UX not so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Automatic soap dispensers:&lt;/strong&gt; I got one for myself because it worked great when I tried it (It had a great UI). However during everyday use, I realized that it dispenses too much soap and that causes a mess near the sink. It has a poor UX.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Xcode:&lt;/strong&gt; All those “poof” animations looks so sleek (amazing UI) but they completely and utterly destroy the overall IDE experience (unacceptably poor UX). So many actions rely on gimmicky gestures and are completely undiscoverable (how do you remove a breakpoint that you set in XCode? Clue: It is not “right click and remove” like every other sane IDE on the planet)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-car controls:&lt;/strong&gt; Multi-function controls on the steering wheels give them such a futuristic look. Those buttons on the infotainment console looks straight out of a spaceship. Amazing UI. But, how many times do you need to click on the steering wheel button to achieve a certain task? How reliably can you turn on or off the defogger using the center console? Can you do all of this without taking your eyes off the road?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a reason I chose that last example. Imagine an ill-thought out UX that causes a driver to take their eyes off the road for even a couple of seconds at three-digit speeds. The consequences can be disastrous, even death. This is compounded by the fact that the &lt;em&gt;problems with the UX are often not discoverable&lt;/em&gt; until it is too late.&lt;/p&gt;

&lt;p&gt;This goes back to the relative importance part. The In-car controls example above is an instance where UX ought to be given a lot more importance than just UI.&lt;/p&gt;

&lt;h3 id=&quot;good-ux-with-mediocre-ui&quot;&gt;Good UX with mediocre UI&lt;/h3&gt;

&lt;p&gt;Now, some examples of systems where the UX is good but UI not so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Elevators:&lt;/strong&gt; The elevator in my apartment is old-fashioned and … how do I say this … &lt;em&gt;boring&lt;/em&gt;. It is not really welcoming in appearance. However, it just works. All the buttons are intuitive, it is disabled-friendly with braille buttons and you just cannot go wrong using it. The UX is near-perfect even though the UI does leave a lot to be desired.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Older cars:&lt;/strong&gt; My first car was very low on features, but now that I look back I have to admit the UX for the driver was fantastic. It had barely any features but whatever little it did, was a breeze to operate. The only control on the steering wheel was the horn, the stalks on the steering wheel column only had the light, indicators and wiper controls. The Air conditioner and defogger were trivial to operate without taking my eyes off the road, even in the dark. Fantastic UX, not an inviting UI at all.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Git:&lt;/strong&gt; (Uh oh .. I failed in my resolve to not include any programming related examples). Git is an indispensable tool for programmers and makes our lives so much easier. The whole experience of cheap branching, not requiring a network to work and more make it orders of magnitude better than its predecessors like CVS. However, the commands are named rather weirdly. Worse, some commands do very different things compared to what they did in previous source control systems like SVN. Incredibly good UX, a UI that leaves a lot to be desired.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This category probably has a lot more examples than the first. Think of all the things around you that just work even though they are not particularly attractive.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;UI ≠ UX. In my limited experience, UI is given more importance than UX. In my opinion this is counter-productive in the long run, both for businesses and users.&lt;/p&gt;

</description>
        <pubDate>Sun, 20 Dec 2020 17:30:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/20/ui-not-ux/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/20/ui-not-ux/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Tech as an Enhancer</title>
        <description>&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that have been beaten to pulp already. I’m simply adding to the cacophony. You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-trigger-for-this-post&quot;&gt;The trigger for this post&lt;/h2&gt;

&lt;p&gt;In November 2020, some Amazon Web Services servers suffered an outage that caused a domino effect across countless products and services which depend on AWS. Social media was quick to poke fun at the incident with an explosion of jokes and memes. This tweet is a summary of the mood of social media on that day:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I... can&amp;#39;t vacuum... because us-east-1 is down.&lt;/p&gt;&amp;mdash; Geoff Belknap (@geoffbelknap) &lt;a href=&quot;https://twitter.com/geoffbelknap/status/1331690657170157568?ref_src=twsrc%5Etfw&quot;&gt;November 25, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt&lt;/h2&gt;

&lt;p&gt;My take-away from this incident (and others before it) is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most products and services ought to dwell on the role of technology in the system. Does tech bring the most value as an &lt;em&gt;enhancer&lt;/em&gt; or as a &lt;em&gt;prerequisite&lt;/em&gt;? In other words, &lt;strong&gt;does the system degrade gracefully&lt;/strong&gt; in the absence of the very tech that differentiates it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(In this post, I use the term “tech” in a very loose sense)&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let’s look at some (mostly hypothetical) examples. Since I spent a large portion of my career in two domains (IoT and automobile), some bias is bound to creep into the examples.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is awesome that my air-conditioner is connected to the internet. I can set the temperature on my way home so that the house is already comfortable when I reach there. But should it really &lt;em&gt;require&lt;/em&gt; the internet to function? Do I absolutely have to configure the WiFi settings &lt;em&gt;before&lt;/em&gt; using the air-conditioner?&lt;/li&gt;
  &lt;li&gt;An internet-connected blood pressure monitor is a really good idea since it eliminates the manual data entry process and lets medical personnel have direct access to the necessary data. However, a blood pressure monitor that &lt;em&gt;refuses to function when a server is down&lt;/em&gt; is not very useful, is it?&lt;/li&gt;
  &lt;li&gt;I can unlock my car with my phone? Amazing. Does it also have a good old key for backup? It would be awkward if my &lt;em&gt;phone is out of battery and I cannot even unlock the car&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That last point seems far-fetched but it really isn’t. It is just one step away from this:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Got in our &lt;a href=&quot;https://twitter.com/Zipcar?ref_src=twsrc%5Etfw&quot;&gt;@Zipcar&lt;/a&gt; we&amp;#39;ve been driving for 3 days. It doesn&amp;#39;t start. Call Zipcar and get told that the car can&amp;#39;t access the internet so it won&amp;#39;t start. The only option is to have a tow truck come and tow it to somewhere where it has internet.&lt;/p&gt;&amp;mdash; Keith Smiley (@SmileyKeith) &lt;a href=&quot;https://twitter.com/SmileyKeith/status/1078417333540990976?ref_src=twsrc%5Etfw&quot;&gt;December 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I could go on with dozens of examples but I think I’ve illustrated my point.&lt;/p&gt;

&lt;h3 id=&quot;offline-first&quot;&gt;Offline first&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://offlinefirst.org/&quot;&gt;“Offline-first”&lt;/a&gt; is often used to describe apps that function when the network is unavailable, but it is more than that. Offline-first apps also behave well in the face of a &lt;em&gt;poor network connection&lt;/em&gt;. As an end user, the experience when you have that feeble network is way worse than when you have no network at all.&lt;/p&gt;

&lt;p&gt;This concept of offline-first can be extended to all things tech. In majority of the cases, solutions need to be designed&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First&lt;/strong&gt; for the situation where the tech crutch on which the solution depends is unavailable for whatever reason&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then&lt;/strong&gt; for the case where the tech is available but in a significantly reduced form&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then and only then&lt;/strong&gt; for the case where the differentiating technology is healthy and functioning at its peak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do qualify all my opinions with “majority of” or “most of” because I’m pretty sure there are situations where this is not feasible. I know there must be some solutions out there that rely completely on the tech, where the solution ceases to exist without the tech.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tech is making its mark in unimaginable ways in unprecedented fields. It works really well when it enhances an existing system. It would be a shame to go overboard and make a system overly reliant on tech where there is no real need to.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Dec 2020 21:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/18/tech-enhancer/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/18/tech-enhancer/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Scalable tech ≠ scalable business</title>
        <description>&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that are nothing new, a lot has been said and written about these topics already. I’m simply putting it in my own words.&lt;/p&gt;

&lt;p&gt;You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;. Be sure to check back because more posts will be added in this series over the coming period.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-scalable&quot;&gt;What exactly is “scalable”?&lt;/h2&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalability&quot;&gt;wikipedia definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt; is the property of a system to handle a growing amount of work by adding resources to the system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the initial stages of my career, a tech lead once described a scalable system in layman terms to me as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A scalable system is one where by adding just a small amount effort or resources you can increase the output or gain by a large amount.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A real-life (albeit silly) example I like to cite is cooking rice versus making rotis. Cooking rice is scalable because you don’t need to double the effort in order to cook double the amount of rice. On the other hand, if you want to double the number of rotis, you need to (more or less) double the effort. Making rotis, is thus not scalable.&lt;/p&gt;

&lt;h2 id=&quot;scalable-tech&quot;&gt;Scalable tech&lt;/h2&gt;

&lt;p&gt;In technology terms, scalability refers to the ability to handle more users, requests, traffic etc without the system hitting its limits. Let’s say you create a system that can handle 1 million users with a team of 100 engineers. If you want to increase your target 10 fold to 10 million, you should not need to employ 10 times as many engineers.&lt;/p&gt;

&lt;p&gt;The software industry has brought about a revolution in massively scalable technology. We routinely see CXOs of tech giants at their respective annual conferences reeling off staggering statistics about their products.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X million concurrent users per second&lt;/li&gt;
  &lt;li&gt;Y billion total active users&lt;/li&gt;
  &lt;li&gt;Z terabytes of data served per day&lt;/li&gt;
  &lt;li&gt;… and so on …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is no mean feat, mind you. Achieving this scale is a humongous engineering effort that requires coordintation between countless moving parts (from the software stack to the OS to the hardware to the network, even ventilation, cooling and geopolitical factors come into play). It is a marvel, no less.&lt;/p&gt;

&lt;p&gt;But does this translate to a scalable business? For example&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How does the cost for manual fallbacks increase with the problem size for a business based on &lt;strong&gt;algorithmic decisions&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What’s the cost of mistakes when the business relies on &lt;strong&gt;content moderation&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;How well does the tech mesh with the need for global &lt;strong&gt;regulatory compliance&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scalable-business&quot;&gt;Scalable business&lt;/h2&gt;

&lt;p&gt;A scalable business refers to one that can expand (for example to multiple geographies) with just an increment in investment (in terms of cost or effort).&lt;/p&gt;

&lt;p&gt;The manufacturing industry has shown the world how to conduct a globally scalable business for decades. Here are some examples&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every country has differing standards when it comes to &lt;strong&gt;automobile industry&lt;/strong&gt;. This includes factors like pollution limits, safety features like seat belts, airbags, ISOFix and more.&lt;/li&gt;
  &lt;li&gt;Norway is very strict about speed limits. So much so that cars sold in Norway are &lt;strong&gt;required to calibrate the speedometer&lt;/strong&gt; to show the speed as 10% more than the actual speed.&lt;/li&gt;
  &lt;li&gt;Every country has differing standards regarding &lt;strong&gt;consumer electrical and electronic equipment&lt;/strong&gt;. Refrigerators, air conditioners, microwave ovens etc have to adhere to different standards of energy consumption, fluctuations, even noise requirements.&lt;/li&gt;
  &lt;li&gt;Some countries like South Korea require that cellphone cameras should always have the &lt;strong&gt;shutter sound permanently enabled&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In spite of these differences, we see the automotive, consumer electronics and other industries comply with these local requirements. These industries have built scalable businesses that work with differing local policies around the globe.&lt;/p&gt;

&lt;h2 id=&quot;scalable-tech--scalable-business&quot;&gt;Scalable tech ≠ scalable business&lt;/h2&gt;

&lt;p&gt;Sadly, the tech industry does not seem to have learnt from the manufacturing industry. Here are a few examples that illustrate the problem:&lt;/p&gt;

&lt;h3 id=&quot;mobile-app-stores&quot;&gt;Mobile app stores&lt;/h3&gt;

&lt;p&gt;Mobile app stores are grappling with the problem of app approvals. Approvals take weeks or even months and this is a major pain point for businesses that wish to publish apps on the stores.&lt;/p&gt;

&lt;p&gt;The story doesn’t end there. At least one of the big mobile app stores has serious problems with automated app removals. If you are a mobile app developer, chances are you have come across multiple instances of apps being removed for no apparent reason, and developers not being given a fair chance at redressal.&lt;/p&gt;

&lt;p&gt;This here is a classic example of confusing the scalability of the tech for scalability of the business.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The app review algorithms are great piece of scalable technology. Unfortunately, the same algorithms come in the way of a scalable business because the business has been designed around not requiring much manual review.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;content-moderation&quot;&gt;Content moderation&lt;/h3&gt;

&lt;p&gt;Social networks, video platforms and similar platforms have a problem very similar to mobile app stores, except the stumbling block is content moderation. Some examples of situations where the scale failed the business:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Social media used for interference in the electoral process&lt;/li&gt;
  &lt;li&gt;Misinformation campaigns on social media, ranging from incorrect information about Covid-19 vaccines to using social media to whip up mob frenzy (remember all the lynching incidents across the world in 2018-2020?)&lt;/li&gt;
  &lt;li&gt;Gory incidents telecast live over various video streaming platforms (remember Christchurch shootings in 2019?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some platforms have scrambled to “fix” some of these problems (some social networks added “labels” to disputed posts etc).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But these seem to be band-aid. The real problem is that the products themselves are not built for real scale (beyond the technology itself).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;regulatory-compliance&quot;&gt;Regulatory compliance&lt;/h3&gt;

&lt;p&gt;We all know what happened with user data (in the scandal-that-shall-not-be-named involving the social-network-that-also-shall-not-be-named). But that is just part of the picture.&lt;/p&gt;

&lt;p&gt;Several countries are now coming up with regulations around privacy of the data of their citizens. Some are taking it a step further and proposing rules that dictate where the data of their citizens should physically reside.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real problem here is tech companies building their business models around regulations that existed &lt;em&gt;when the product was conceptualized&lt;/em&gt;, and failing to foresee that regulations will catch up eventually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, the products scale really well from a purely technical standpoint, but leave a lot to be desired when the rubber meets the road.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’m pretty sure I just scratched the surface - of both sides of the coin. There are dozens more examples of business scaling done right; and dozens more where they fall short despite a stellar tech stack.&lt;/p&gt;

&lt;p&gt;In conclusion, at the risk of re-stating the obvious, &lt;strong&gt;A scalable tech stack is necessary but not sufficient for running a scalable business&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2020 19:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/15/scalable-tech-business/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/15/scalable-tech-business/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Falsehoods programmers believe about addresses</title>
        <description>&lt;p&gt;I’ve spent the better part of the last three years developing a navigation app at work. It includes features like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Searching for a location&lt;/li&gt;
  &lt;li&gt;Adding a location to favorites&lt;/li&gt;
  &lt;li&gt;Turn by turn navigation to a destination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had the seemingly simple task of splitting an address into two parts for displaying in the user interface (line 1 and line 2). The exact mechanism of the split didn’t matter as long as it could be reasonably split.&lt;/p&gt;

&lt;p&gt;Here as some examples of how I presumed it could be split depending on the length of the address&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 1 = Place Name; Line 2 = address&lt;/li&gt;
  &lt;li&gt;Line 1 = Place name, number, street; Line 2 = city, state&lt;/li&gt;
  &lt;li&gt;Line 1 = Place name, number; Line 2 = street, city&lt;/li&gt;
  &lt;li&gt;… and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple, right? Wrong.&lt;/p&gt;

&lt;p&gt;Over the course, I’ve made several assumptions about addresses that turned out to be incorrect. This post attempts to list the things I learned about addresses.&lt;/p&gt;

&lt;p&gt;This post is inspired by other “Falsehood programmers believe” posts (and hence uses a similar format). In fact, there’s a &lt;a href=&quot;https://github.com/kdeldycke/awesome-falsehood&quot;&gt;GitHub repo&lt;/a&gt; that lists all such posts. Other people before me have already made “Falsehoods about addresses” lists, but I’m making one based on my own experience.&lt;/p&gt;

&lt;p&gt;So, let’s get right to the falsehoods. Every one of the statements below is false.&lt;/p&gt;

&lt;p&gt;About &lt;strong&gt;locations&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every location has a unique address. This is false: every location has a unique &lt;em&gt;geocoordinate&lt;/em&gt; (lat-long), or other such &lt;em&gt;identifier&lt;/em&gt; like &lt;a href=&quot;https://maps.google.com/pluscodes/&quot;&gt;Google Plus Codes&lt;/a&gt; or &lt;a href=&quot;https://what3words.com/about-us/&quot;&gt;what3words&lt;/a&gt;, but it does not have a unique &lt;em&gt;address&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;A location has an address&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;addresses&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The concept of an address is universal&lt;/li&gt;
  &lt;li&gt;What constitutes an address is universal&lt;/li&gt;
  &lt;li&gt;An address has a number&lt;/li&gt;
  &lt;li&gt;An address identifies a single house/shop/office&lt;/li&gt;
  &lt;li&gt;An address has a street name&lt;/li&gt;
  &lt;li&gt;An address has a post code/zip code/pin code&lt;/li&gt;
  &lt;li&gt;An address has a neighborhood/locality name&lt;/li&gt;
  &lt;li&gt;An address has a place name&lt;/li&gt;
  &lt;li&gt;An address is hierarchical (number, street, city, state, country)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;User interface&lt;/strong&gt; related:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An address has sufficient info to make sense in a user interface&lt;/li&gt;
  &lt;li&gt;An address, when shortened (ellipsized etc) to fit on a user interface, still gives enough context to the user&lt;/li&gt;
  &lt;li&gt;An address fits on one screen on a mobile phone with a readable font size&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;streets&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A street has a name&lt;/li&gt;
  &lt;li&gt;A street name is unique in a city&lt;/li&gt;
  &lt;li&gt;A street name is unique in a locality&lt;/li&gt;
  &lt;li&gt;A road number (like highway number) is unique in a locality&lt;/li&gt;
  &lt;li&gt;A road number uniquely identifies a road&lt;/li&gt;
  &lt;li&gt;A neighborhood/locality name is unique in a city&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;directions&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What constitutes a navigation instruction is universal&lt;/li&gt;
  &lt;li&gt;A navigation instruction at a point is unambiguous&lt;/li&gt;
  &lt;li&gt;Restrictions applied to navigation (like avoid highways, avoid tolls etc) are unambiguous&lt;/li&gt;
  &lt;li&gt;Navigation directions are user-friendly (this one is an opinion, and not a fact)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 24 Oct 2020 11:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/10/24/falsehoods-about-addresses/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/10/24/falsehoods-about-addresses/</guid>
        
        <category>falsehoods</category>
        
        
      </item>
    
      <item>
        <title>Stateless widget animations in Flutter</title>
        <description>&lt;p&gt;I’m a Flutter newbie (my day job is Android developer), and it took me some time to understand how animations work in Flutter. In particular, most posts and videos on this topic show how to achieve one of these:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How to animate properties of a State&lt;em&gt;less&lt;/em&gt; widget between a fixed pair of start and end values&lt;/li&gt;
  &lt;li&gt;How to animate properties of a State&lt;em&gt;ful&lt;/em&gt; widget from whatever the current value is, to an end value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I wanted to achieve was a mix of the two. My objective was:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Animate a State&lt;strong&gt;less&lt;/strong&gt; widget to an end value, beginning with whatever the &lt;em&gt;current&lt;/em&gt; value is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, we’re going to look at exactly that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Within your Stateless widget, use an implicit animation (a widget that extend from &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt;) to animate the properties you wish to.&lt;/p&gt;

&lt;p&gt;This is the animation that we are going to build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/flutter_stateless_animation.gif&quot; alt=&quot;Flutter stateless animation&quot; style=&quot;max-height: 200px; max-width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is a very simple animation. Every time you tap the container, it animates:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The background color (this animates between a shade of blue and completely transparent)&lt;/li&gt;
  &lt;li&gt;A drop shadow for the background&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These properties are applied wrapping our content in a &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBox&lt;/code&gt; widget, and applying these properties as a &lt;code class=&quot;highlighter-rouge&quot;&gt;BoxDecoration(color:, borderRadius:, boxShadow:[])&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;starting-point-one-time-animation&quot;&gt;Starting point: One-time animation&lt;/h2&gt;

&lt;p&gt;To start off, we’ll see how to achieve this as a one-time animation, without the tap handling. This requires us to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt;, provide an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationController&lt;/code&gt; and provide a tween. All this is pretty standard for making an animation in Flutter.&lt;/p&gt;

&lt;p&gt;Here’s the tween definition&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;end:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAlpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedBorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;boxShadow:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoxShadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BoxShadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withOpacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;blurRadius:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;offset:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedShadowOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;begin:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUnselectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedBorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// No shadow.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s how we use it inside of a &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DecoratedBoxTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;decoration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*Rest of the content*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the full runnable example on &lt;a href=&quot;https://dartpad.dev/9e9d8a42de5ec14ee6e61f75b71953c8&quot;&gt;this DartPad snippet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;toggling-between-states-on-tap&quot;&gt;Toggling between states on tap&lt;/h2&gt;

&lt;p&gt;As the next step, we’ll introduce an &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; state that we toggle when the user taps on our widget. This allows us to make the animation go forward/reverse depending on the state.&lt;/p&gt;

&lt;p&gt;First, we introduce a bool field in our state class&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in our &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; method we wrap our &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;GestureDetector&lt;/code&gt; to handle taps&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GestureDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_handleTap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoratedBoxTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*Rest of the code as before*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, instead of starting the animation in &lt;code class=&quot;highlighter-rouge&quot;&gt;initState()&lt;/code&gt;, we start the animation in either forward or reverse direction in &lt;code class=&quot;highlighter-rouge&quot;&gt;_handleTap&lt;/code&gt;, depending on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_isSelected&lt;/code&gt; state. And of course, we need to update the state by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see this in action on &lt;a href=&quot;https://dartpad.dev/b424985022624c3d8c94a0ea184d5699&quot;&gt;this Dartpad&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;going-stateless&quot;&gt;Going Stateless&lt;/h2&gt;

&lt;p&gt;The previous solutions both work, but what I really wanted was to make my widget stateless. The reason is that in my app, state is managed outside the widgets. When a user taps on a widget, it simply calls a &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; that was passed to it. I have a different component in my architecture that updates the state and passes back the new &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; to me.&lt;/p&gt;

&lt;p&gt;So, can we just cheat and give the &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; only the end value so that it begins with whatever the current value is?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Does NOT work - throws an exception&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;end:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_boxDecorationSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_boxDecorationUnselected&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Don't provide a begin&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, this does not work. &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; expects both &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; to be not null. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; is not an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt;. Understanding this was a light bulb moment for me.&lt;/p&gt;

&lt;p&gt;To achieve what I want, what we really need is an implicit animation. Is there one that suits my needs? Indeed, there is.&lt;/p&gt;

&lt;h3 id=&quot;enter-animatedcontainer&quot;&gt;Enter, &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; and it allows setting several properties of a child, including &lt;code class=&quot;highlighter-rouge&quot;&gt;constraints&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;paddding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt; and, the one relevant for us: &lt;code class=&quot;highlighter-rouge&quot;&gt;decoration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, all I had to do was replace &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt; and voila! My widget works exactly as I expect it to.&lt;/p&gt;

&lt;p&gt;Some relevant pieces of code: First, make the widget completely stateless by passing in the &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; and a function to handle taps as constructor parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in the build method, return an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt;, passing in a &lt;code class=&quot;highlighter-rouge&quot;&gt;decoration&lt;/code&gt; object that conditionally returns either an empty decoration or the one we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GestureDetector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnimatedContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;decoration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAlpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUnselectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;circular&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;boxShadow:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;_selectedBoxShadow:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;duration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;milliseconds:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;curve:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the full working sample on &lt;a href=&quot;https://dartpad.dev/1dc8122b218795f118dbfd4339538397&quot;&gt;this Dartpad&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;I was able to get away with using a Stateless widget in my case because there already existed an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; that fulfils my needs. This might not always be the case, so you might end up needing to make your widget stateful anyway. If you are faced with this situation, you might also consider creating your own subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; to perform the animation - so that you can keep your actual widget stateless.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we saw how to use implicit animations in Flutter to keep your widget stateless, and what the limitations are.&lt;/p&gt;

&lt;p&gt;To see a real world use of the techniques described in this post, see the &lt;a href=&quot;https://github.com/curioustechizen/covid19india-flutter&quot;&gt;Covid19-India flutter app&lt;/a&gt; (where you switch between the categories like “active”, “recovered” etc.)&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2020 21:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/05/21/flutter-stateless-animations/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/05/21/flutter-stateless-animations/</guid>
        
        <category>flutter</category>
        
        <category>animations</category>
        
        
      </item>
    
      <item>
        <title>Diff animations with SwiftUI</title>
        <description>&lt;p&gt;A few months back, I wrote &lt;a href=&quot;https://kiranrao.in/blog/2020/01/12/diff-util-part3/&quot;&gt;a post&lt;/a&gt; about implementing custom animations in Android using DiffUtil. In this post, we’ll explore how similar animations can be achieved with Apple’s &lt;a href=&quot;https://developer.apple.com/documentation/swiftui&quot;&gt;SwiftUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler Alert:&lt;/strong&gt; It was a breeze to implement this with SwiftUI. It was an enjoyable experience with the Preview canvas in XCode, and the framework itself is very well suited for stuff like implementing animations.&lt;/p&gt;

&lt;p&gt;This post uses GIFs to show off videos of the animations I achieved, but GIFs don’t convey really how smooth the animations are. I encourage you to check out the code and run it on a simulator or iOS device. The code for everything in this post is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks&quot;&gt;here&lt;/a&gt;. You’ll need XCode 11 and Mac OSX Catalina to run it.&lt;/p&gt;

&lt;h2 id=&quot;the-sample-app&quot;&gt;The sample app&lt;/h2&gt;

&lt;p&gt;Here’s an example of what we will achieve&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-custom.gif&quot; alt=&quot;Custom animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not exactly the same as the one we ended up in the Android example, but it is close enough.&lt;/p&gt;

&lt;p&gt;To recap, this is how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are up to 7 colored circle views, arranged in a circle&lt;/li&gt;
  &lt;li&gt;Some circles are “expanded”&lt;/li&gt;
  &lt;li&gt;When you click on “Toggle”, some colored circles get removed, while others are added, and some get resized (their expansion state changes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The model consists of 2 pre-defined lists of circle data. Clicking the toggle button simple toggles the state between these 2 lists.&lt;/p&gt;

&lt;h2 id=&quot;baseline-toggling-state-without-animations&quot;&gt;Baseline: Toggling state without animations&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/tree/swift_ui_no_animations/CircleDiffAnimationsSwiftUI&quot;&gt;starting point&lt;/a&gt; of this experiment is toggling between 2 states, &lt;em&gt;without&lt;/em&gt; any animation. For this, I took inspiration from &lt;a href=&quot;https://github.com/christophedellac/CDCircularMenu&quot;&gt;this library&lt;/a&gt; to arrange the views in a circle. Then, all I had to do was set the color and size property of each view from the model.&lt;/p&gt;

&lt;p&gt;On clicking the Toggle button, I update a &lt;code class=&quot;highlighter-rouge&quot;&gt;@State var&lt;/code&gt; property. All this is pretty standard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CircleInfo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toggle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The relevant code is in &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swift_ui_no_animations/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;this file&lt;/a&gt; and here’s how this looks&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-no-anims.gif&quot; alt=&quot;No animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-animations&quot;&gt;Adding animations&lt;/h2&gt;

&lt;p&gt;This is where SwiftUI impresses. All I had to do was add one line to get nice default animations. Yes, you read that right. It was &lt;strong&gt;a one-line change&lt;/strong&gt; to get animations out of the box.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Replace this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//With this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;withAnimation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This change is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_withAnimation_default/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;tagged here&lt;/a&gt; and this is what it looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-withAnimation.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cannot get over how easy this was. Did you notice that we wrote zero code to find out what the diff was, zero code to tell what to insert, what to delete? Nothing. Compare this with what I had to do in the previous article on Android!&lt;/p&gt;

&lt;p&gt;But wait, it gets better.&lt;/p&gt;

&lt;h2 id=&quot;custom-animations&quot;&gt;Custom animations&lt;/h2&gt;

&lt;p&gt;This default animation is okay, but it is not what we want. You can see that item appearance animation doesn’t look all that good. The item just fades in behind whatever was there previously.&lt;/p&gt;

&lt;p&gt;How can we improve this? Well, again, just a handful of lines of code. First, create a transition to describe what the animation should look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asymmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, just apply an animation to each circle view specifying the transition and the curve.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it. With these changes, you get the nice animations that you saw at the top of this post. The code is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_custom_animation/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There seems to be a problem with the Preview Canvas in XCode. It did not show the custom animation when I tried this code. Instead, it kept showing the default animation. Don’t rely too much on the LivePreview feature, especially for animations.&lt;/p&gt;

&lt;h3 id=&quot;icing-on-the-cake&quot;&gt;Icing on the cake&lt;/h3&gt;

&lt;p&gt;If you see the post on the Android implementation, you see this disclaimer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you submit a list while animations for the previous diff are already in progress, it could crash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do we need to make our SwiftUI version handle this case? What happens if an animation is in progress and you click the Toggle button again?&lt;/p&gt;

&lt;p&gt;Well, the answer is - you guessed it - &lt;strong&gt;We need to do nothing&lt;/strong&gt;. The animations are interruptible by default. If we click on the toggle button while an animation is in progress, then the next animation starts. Like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-interruptible.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-catch&quot;&gt;What’s the catch?&lt;/h2&gt;

&lt;p&gt;This automagical animation feature is fine for a lot of situations, but there are still a lot of them that it might not be able to handle. For example&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choreographing the animations: If you look at the Android example, we wanted to perform the animations in a certain order (removals first, followed by moves and finally inserts). The SwiftUI version just animates everything simultaneously. You could probably play with &lt;code class=&quot;highlighter-rouge&quot;&gt;asymmetric(insertion:removal:)&lt;/code&gt; to impose some ordering but it would be rather limited.&lt;/li&gt;
  &lt;li&gt;Animations occur on individual items: What if you wanted the animation to occur in relation to the containing view? For example, what if you wanted to animate scrolling to a different row in a list when the currently “selected” one gets deleted? These are possible but would probably require a lot of code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are probably others that I’m missing.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;SwiftUI is great for implementing animations. I had to barely write any code to achieve this pretty cool animation (it took me days to achieve the same on Android, and I’ve several years of Android experience!). However, all of this magic does come with its own limitations and it is good to be aware of them before going all-in.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 21:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/04/21/diff-animations-swiftui/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/04/21/diff-animations-swiftui/</guid>
        
        <category>swiftui</category>
        
        <category>animations</category>
        
        
      </item>
    
      <item>
        <title>Android Gradle: Lessons learnt using missingDimensionStrategy</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;If a &lt;em&gt;library module&lt;/em&gt; includes a flavor dimension that the &lt;em&gt;app flavor&lt;/em&gt; does not, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; to specify default flavors from the missing dimension&lt;/li&gt;
  &lt;li&gt;More generally, you can use this any time a &lt;em&gt;consumed module&lt;/em&gt; includes a flavor that the &lt;em&gt;consumer module&lt;/em&gt; does not. Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; DSL should be used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; of the &lt;em&gt;consumer module&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;However, point 2 might not always do what you think it is doing. In particular, when the &lt;em&gt;consumer module&lt;/em&gt; which is missing the flavor dimension is in &lt;strong&gt;itself a dependency for another module&lt;/strong&gt;, you are probably better off introducing this flavor dimension in this module, mirroring that of the consumed module.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Android Gradle Plugin introduces the concept of product flavors. When you have a project that contains multiple modules, it is possible that your modules do not agree on the number of flavors or flavor dimensions. The DSL offers ways to handle such situations.&lt;/p&gt;

&lt;p&gt;The important portions of the DSL are &lt;code class=&quot;highlighter-rouge&quot;&gt;matchingFallbacks&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt;. Which one you choose depends on &lt;strong&gt;which module declares more flavors&lt;/strong&gt;: the &lt;em&gt;consuming module&lt;/em&gt;, or the &lt;em&gt;consumed module&lt;/em&gt;. &lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;This table&lt;/a&gt; in the Android Gradle documentation explains this in more detail.&lt;/p&gt;

&lt;p&gt;I had a slightly more complex project structure where I thought &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; would be my tool of choice, but it turns out I was wrong. This post describes my situation and why I was wrong.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project structure&lt;/h2&gt;

&lt;p&gt;The project that I use for this blog post is &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo&quot;&gt;here&lt;/a&gt;. The app itself is a shell. It has no activities, no functionality and almost no Android code. It has the following modules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module.
    &lt;ul&gt;
      &lt;li&gt;Includes a flavor dimension &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;target&quot;&lt;/code&gt;, with values &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;emulator&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;realdevice&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate-2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate-1&lt;/code&gt; module.
    &lt;ul&gt;
      &lt;li&gt;Does not know about flavors&lt;/li&gt;
      &lt;li&gt;Depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate-2&lt;/code&gt; module.
    &lt;ul&gt;
      &lt;li&gt;Does not know about flavors&lt;/li&gt;
      &lt;li&gt;Depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt; module.
    &lt;ul&gt;
      &lt;li&gt;Includes the same flavor dimension and flavors as &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module&lt;/li&gt;
      &lt;li&gt;Has no dependencies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;string-resources&quot;&gt;String resources&lt;/h3&gt;

&lt;p&gt;To demonstrate how flavors work, I’ve created some string resources (using gradle’s &lt;code class=&quot;highlighter-rouge&quot;&gt;resValue&lt;/code&gt; feature) in every flavor, in every module that does care about the flavor. When I build an APK for a particular flavor, I can inspect the string resources in APK analyzer to figure out which variant was used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// app/build.gradle

flavorDimensions &quot;target&quot;
productFlavors {
    emulator {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_app_module&quot;, &quot;App Emulator&quot;)
    }
    realdevice {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_app_module&quot;, &quot;App Real Device&quot;)
    }
}

// leaf/build.gradle

flavorDimensions &quot;target&quot;
productFlavors {
    emulator {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_leaf_module&quot;, &quot;Leaf module Emulator&quot;)
    }
    realdevice {
        dimension &quot;target&quot;
        resValue(&quot;string&quot;, &quot;name_leaf_module&quot;, &quot;Leaf module Real Device&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-build-error&quot;&gt;The build error&lt;/h2&gt;

&lt;p&gt;This is the starting point of my experiment, and it fails to build. You can &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout checkpoint-2&lt;/code&gt; if you want to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-2&quot;&gt;see it in action&lt;/a&gt;. The build error you see looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/build_error.png&quot; alt=&quot;Build Error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason for this build error is that both the &lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate&lt;/code&gt; modules know nothing flavors but they depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt; which does.&lt;/p&gt;

&lt;h2 id=&quot;configuring-missingdimensionstrategy&quot;&gt;Configuring &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;My first attempt at fixing this was to configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate&lt;/code&gt; modules to specify &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//intermediate-1/build.gradle and intermediate-2/build.gradle
//this goes inside android { defaultConfig block

missingDimensionStrategy 'target', 'emulator'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we’re saying that when trying to build the intermediate modules, choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; variant of the &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt; module. This works, &lt;em&gt;kind of&lt;/em&gt;. We can build the APKs for both flavors and we can see the correct strings get included in the built APKs.&lt;/p&gt;

&lt;p&gt;This is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;emulatorDebug&lt;/code&gt; flavor looks like. Note that it has included the strings &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;App Emulator&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Leaf module Emulator&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/app-emulator-debug-apk-missing-dimension-strategy.png&quot; alt=&quot;app-emulator-debug-apk-missingDimensionStrategy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;realdeviceDebug&lt;/code&gt; APK. Note that it has included the strings &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;App Real Device&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Leaf module Real Device&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/app-realdevice-debug-apk-missing-dimension-strategy.png&quot; alt=&quot;app-realdevice-debug-apk-missingDimensionStrategy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout checkpoint-3&lt;/code&gt; if you want to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-3&quot;&gt;see it in action&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-problem&quot;&gt;The problem&lt;/h4&gt;

&lt;p&gt;The problem with this solution becomes obvious when you see the build output window. It contains this warning&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Module ‘leaf’ has variant ‘realdeviceDebug’ selected, but the modules [‘intermediate-1’, ‘intermediate-2’] depend on variant ‘emulatorDebug’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is this: When you chose &lt;code class=&quot;highlighter-rouge&quot;&gt;realdeviceDebug&lt;/code&gt; variant for &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; module, the same variant is selected for &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf &lt;/code&gt;module. However, for the &lt;code class=&quot;highlighter-rouge&quot;&gt;intermediate&lt;/code&gt; modules, we specified we want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; flavor.&lt;/p&gt;

&lt;p&gt;This is not a problem for us because we explicitly stated that the intermediate flavors don’t know or care about flavors. But, how do you fix those warnings?&lt;/p&gt;

&lt;h2 id=&quot;making-intermediate-module-flavor-aware&quot;&gt;Making intermediate module flavor-aware&lt;/h2&gt;

&lt;p&gt;Unfortunately, the only &lt;strong&gt;correct&lt;/strong&gt; way to achieve this was to make the intermediate module flavor-aware. This might seem tedious and against the original intent, but I would argue that for this situation, it is a future-proof approach compared to &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt;. Because with &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; if for some reason an intermediate module had to become flavor-aware, it could end up silently choosing the wrong flavor of the leaf module.&lt;/p&gt;

&lt;p&gt;So, the fix is to actually introduce the same flavor dimensions and flavors in the intermediate modules as in the leaf modules. You can &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout checkpoint-4&lt;/code&gt; to &lt;a href=&quot;https://github.com/curioustechizen/android-gradle-missing-flavors-demo/tree/checkpoint-4&quot;&gt;see it in action&lt;/a&gt;. If you are worried about the repetitive flavor configuration code in the intermdiate modules, you can extract it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;flavors.gradle&lt;/code&gt; and then use it in the build.gradle files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// root flavors.gradle

android {
    flavorDimensions &quot;target&quot;
    productFlavors {
        emulator {
            dimension &quot;target&quot;
        }
        realdevice {
            dimension &quot;target&quot;
        }
    }
}

// build.gradle of intermediate modules
apply from: '../flavors.gradle'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; mainly if your &lt;strong&gt;app&lt;/strong&gt; module is missing flavor dimensions compared to library modules. Think twice before using it in a module that is itself a dependency for another module. It might look like it works, but it might be doing the wrong thing.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/droidxav&quot;&gt;Xavier Ducrohet (@droidxav)&lt;/a&gt; for pointing out the potential pitfalls of using &lt;code class=&quot;highlighter-rouge&quot;&gt;missingDimensionStrategy&lt;/code&gt; for my use case.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 21:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/03/31/gradle-missing-flavors/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/03/31/gradle-missing-flavors/</guid>
        
        <category>android</category>
        
        <category>gradle</category>
        
        
      </item>
    
      <item>
        <title>Android DiffUtil Part 3: Custom animations</title>
        <description>&lt;p&gt;This is part 3 in a series of posts that looks into DiffUtil on Android. The previous posts in this series are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2020/01/06/diff-util-part1/&quot;&gt;Part 1&lt;/a&gt; where we take a deep dive into the DiffUtil API&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2020/01/07/diff-util-part2/&quot;&gt;Part 2&lt;/a&gt; where we compare this API with similar APIs on other platforms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, we’ll look at an example of when to use custom animations.&lt;/p&gt;

&lt;h2 id=&quot;the-sample-app&quot;&gt;The sample app&lt;/h2&gt;

&lt;p&gt;Here’s an example of the animations that we will achieve. The code for this sampe is available &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_custom.gif&quot; alt=&quot;Custom diff animation&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is admittedly a goofy example, but it serves a purpose. I originally wanted to demonstrate this using visualization of RingBuffer data structure as an example, but I settled for this Color Circles example because it prevents us from getting distracted learning ring buffer!&lt;/p&gt;

&lt;p&gt;Here is how the sample works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are 7 slots, arranged in a circle&lt;/li&gt;
  &lt;li&gt;Each slot can be empty, or occupied by a colored view (I chose the colors of the rainbow, hence the number 7)&lt;/li&gt;
  &lt;li&gt;Each view can be “expanded” or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data for the view is a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;CircleInfo&amp;gt;&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleInfo&lt;/code&gt; is defined as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CircleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The “Toggle” button switches between two hard-coded lists. It submits the entire list to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ColorCirclesView&lt;/code&gt;, which in turn &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/app/src/main/java/in/kiranrao/diffutilsamples/ColorCirclesView.kt#L107&quot;&gt;applies a diff&lt;/a&gt; and runs some animations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If an item’s &lt;code class=&quot;highlighter-rouge&quot;&gt;expanded&lt;/code&gt; property changed, then we animate the change in width and height of that view&lt;/li&gt;
  &lt;li&gt;If an item was removed, then we shrink the view until it disappears, while simultaneously moving it to the center of the circle&lt;/li&gt;
  &lt;li&gt;If an item was added, then we expand it from size 0 to its final size, while simultaneously moving it from the center of the circle to its final position along the circumference.&lt;/li&gt;
  &lt;li&gt;For items that were present in both lists, but their positions in the list changed, we move the views along the circumference of the circle to arrive at the new positions. This animation “makes room” for items being inserted, and “fills the gap” created by disappearing items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we run all these animations in a pre-determined order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All removals first&lt;/li&gt;
  &lt;li&gt;Then, change animations together with move along circumference animations&lt;/li&gt;
  &lt;li&gt;Finally the insertion animations are run&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you might have guessed, this example was carefully chosen to demonstrate the use of custom diffs. This example is not suitable for &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For one, there’s no straightforward way of arranging RV items along a circle&lt;/li&gt;
  &lt;li&gt;Even if you do find a circular &lt;code class=&quot;highlighter-rouge&quot;&gt;LayoutManager&lt;/code&gt; for RV, you are unlikely to get it to work well with RV’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemAnimator&lt;/code&gt; framework (this framework, although very powerful and flexible, requires you to understand way too much of the RV internal workings)&lt;/li&gt;
  &lt;li&gt;In this specific example, there’s no recycling happening, so you don’t really need RV. There’s a fixed limit to the number of items (7) and they all fit on screen at once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s another example with more operations happening: There’s 2 removals, 2 changes and one insertion (I recommend to run the app on an emulator to see the real animations, the fidelity of GIF is not good enough)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_custom_2.gif&quot; alt=&quot;Custom diff animation 2&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are some situations that this sample does not handle. For example if you submit a list while animations for the previous diff are already in progress, it could crash. However, this is not related to the DiffUtil wrapper that we are discussing in this post, so I’ll leave it as is.&lt;/p&gt;

&lt;h2 id=&quot;a-wrapper-for-diffutil&quot;&gt;A wrapper for DiffUtil&lt;/h2&gt;

&lt;p&gt;In the previous posts, we discussed about wrapping Android’s DiffUtil in a collection-style API. It is necessary to do this for our sample. This is because of the order in which we want to run our animations: We want to run all removals together. The standard &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt; has no way of telling us “here are all the items that were removed”.&lt;/p&gt;

&lt;p&gt;So, we can start off by doing the obvious: maintain our own list of diff operations (change, remove etc) and keep adding to this list when our &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt; is called. This is implemented &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffCalculator.kt#L49-L67&quot;&gt;here&lt;/a&gt; and a snippet is like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffOps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;RawDiffOperation&lt;/code&gt; is &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffResult.kt#L105-L109&quot;&gt;defined as&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RawDiffOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RawDiffOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we can do better. In our sample, we don’t actually care about the exact order in which the diff operations need to be applied. All we care about is the final set of changes, removals and additions. In other words, instead of&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Item at index 3 was deleted, then item at index 1 was deleted, then an item was inserted at index 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we want to say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Items at index 1 and 3 were deleted; and an item was inserted at index 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;atomicdiffresult&quot;&gt;AtomicDiffResult&lt;/h2&gt;

&lt;p&gt;So, we use a combination of the RawDiffOperations and DiffUtil’s position conversion methods (&lt;code class=&quot;highlighter-rouge&quot;&gt;convertNewPositionToOld()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;convertOldPositionToNew()&lt;/code&gt;) to expose an API like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Removed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PositionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ItemDiffRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicDiffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;insertionRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;removalRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Removed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;changeRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;positionChangeRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PositionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this API gives us everything we need to perform our animations. It gives us the item itself in addition to positions. In case of item changes, it gives us both the old and new items. You can see the implementation of &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffResult.kt#L8&quot;&gt;AtomicDiffResult here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation note:&lt;/strong&gt; This implementation of AtomicDiffResult is leaves some room for optimization since it performs 2 extra iterations over the lists (once over the new list and once over the old one). In this example it is negligible.&lt;/p&gt;

&lt;h2 id=&quot;entry-point-into-the-api&quot;&gt;Entry point into the API&lt;/h2&gt;

&lt;p&gt;Now that we know what we want the result to look like, let’s consider how we want to calculate the diff. We want to provide the following pieces of information&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Old list&lt;/li&gt;
  &lt;li&gt;New list&lt;/li&gt;
  &lt;li&gt;How to compare items in the list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This leads us to the following signature&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculateAtomicDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;itemCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicDiffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation of this function is &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/main/java/in/kiranrao/atomicdiffutil/AtomicDiffCalculator.kt#L7-L18&quot;&gt;here&lt;/a&gt;. You can find the tests for this implementation &lt;a href=&quot;https://github.com/curioustechizen/diffutil-custom-animations/blob/42be2a706721fcf40c6e426895d9ba8894025c5c/atomic-diff-util/src/test/java/in/kiranrao/atomicdiffutil/AtomicDiffUtilTest.kt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;In this post, I explored one way to wrap DiffUtil’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt; into a more ergonomic API. This is by no means the most generic way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does not handle moves&lt;/li&gt;
  &lt;li&gt;It ignores the change payloads&lt;/li&gt;
  &lt;li&gt;In some cases you do really want access to the raw diff operations in the order they were performed (note that &lt;code class=&quot;highlighter-rouge&quot;&gt;AtomicDiffresult&lt;/code&gt; does expose the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;RawDiffOperation&amp;gt;&lt;/code&gt; for this purpose)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it does handle a lot of use cases where you might want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt;. The API style I proposed here is closest to Angular’s style.&lt;/p&gt;

&lt;p&gt;The most practical applications of wrapping DiffUtil are in situations where you have lists of data but you don’t want to use RecyclerView to display them. Examples include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Situations where you have limited number of items and no recycling happening&lt;/li&gt;
  &lt;li&gt;Lists shown in bottom sheets&lt;/li&gt;
  &lt;li&gt;Custom UI like the one shown in the sample, or visualizing a ring buffer data structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might also apply this technique when you want to display custom animations and RV’s ItemAnimator does not suffice for your use case.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jan 2020 10:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/01/12/diff-util-part3/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/01/12/diff-util-part3/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>Android DiffUtil Part 2: List Diffs on other platforms</title>
        <description>&lt;p&gt;This is the second post in a series that looks into calculating diffs between two lists on Android. You can read &lt;a href=&quot;/blog/2020/01/06/diff-util-part1/&quot;&gt;Part 1 here&lt;/a&gt;. In this post, we will look at how other platforms handle list diffing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Edited to add code snippets for each platform.&lt;/p&gt;

&lt;h2 id=&quot;swift-standard-library&quot;&gt;Swift Standard Library&lt;/h2&gt;

&lt;p&gt;The Swift standard library has a &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200721-difference&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;difference(from:)&lt;/code&gt;&lt;/a&gt; method on &lt;code class=&quot;highlighter-rouge&quot;&gt;BidirectionalCollection&lt;/code&gt; protocol that returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; result. &lt;a href=&quot;https://www.fivestars.blog/code/swift-5-1-collection-diffing.html&quot;&gt;This blog post&lt;/a&gt; does a deep dive into this API in Swift.&lt;/p&gt;

&lt;p&gt;It looks like this facility is intended as a general purpose list diff API, not specific to UI programming. Remember, it is in the &lt;em&gt;standard library&lt;/em&gt; so it can be used in backend server programming, for example.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//CollectionDifference&amp;lt;String&amp;gt;(&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    insertions: [.insert(offset: 3, element: &quot;E&quot;, associatedWith: nil)], &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    removals: [.remove(offset: 2, element: &quot;C&quot;, associatedWith: nil)]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some notable features of this API&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The most interesting feature is the return type: &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt;. This API provides you a way to iterate through all the diff operations, or even to only pick the insertions (or removals). This is different from how Android does it. More on this in a minute.&lt;/li&gt;
  &lt;li&gt;By default, it does not detect moves, but there’s an &lt;code class=&quot;highlighter-rouge&quot;&gt;inferringMoves()&lt;/code&gt; method on &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; that you can use if you want to do this&lt;/li&gt;
  &lt;li&gt;It uses equality by default for the comparison, but you can customize how the comparison occurs using &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200722-difference&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;difference(from: by:)&lt;/code&gt;&lt;/a&gt; variant. Here you pass in a closure that returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt; so you can use whatever logic you wish to compare the elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;collectiondifference&quot;&gt;CollectionDifference&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; provides in itself a Collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference.Change&lt;/code&gt; - which is an enum with 2 values: &lt;code class=&quot;highlighter-rouge&quot;&gt;.insert&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.remove&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.insert&lt;/code&gt; provides you with an &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;final list&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.remove&lt;/code&gt; provides you with an &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;original list&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedWith&lt;/code&gt; parameter of the enums inform you about moves&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no concept of “changes” in this API - i.e., it does not tell you if an item retained its identity but did not retain equality.&lt;/p&gt;

&lt;p&gt;I could not find a way to convert positions between old and new lists, but I’m not sure if it is ever required when using this API in practice.&lt;/p&gt;

&lt;h2 id=&quot;swift-apple-platforms&quot;&gt;Swift Apple platforms&lt;/h2&gt;

&lt;p&gt;We started this series with an example of how Android’s RecyclerView animates between 2 lists using DiffUtil. It should come as no surprise that Apple’s UI frameworks have similar capabilities too.&lt;/p&gt;

&lt;p&gt;It has always been possible to achieve this on Apple platforms but it has been verbose and error-prone (frequently giving rise to the Swift equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;). Recent API improvements have greatly enhanced the developer ergonomics here.&lt;/p&gt;

&lt;p&gt;The headline API is &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDiffableDataSource&lt;/code&gt; and friends (quite a mouthful!). This is completely out of my comfort zone so I’ll point you to &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/215&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/220&quot;&gt;talks&lt;/a&gt; from WWDC (there are also PDF slides available) if you want to learn more. I will point out though, that the items participating in this API need to be &lt;code class=&quot;highlighter-rouge&quot;&gt;Hashable&lt;/code&gt;. This is how the framework decides that items have “changed”. It fulfils the role of &lt;code class=&quot;highlighter-rouge&quot;&gt;areContentsTheSame()&lt;/code&gt; from Android’s DiffUtil.&lt;/p&gt;

&lt;h2 id=&quot;flutter&quot;&gt;Flutter&lt;/h2&gt;

&lt;p&gt;I could not find any official API for List Diffs in Flutter. However, there’s a third party library that is inspired by Android’s DiffUtils. It is called &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list&quot;&gt;AnimatedStreamList&lt;/a&gt;. The relevant files in this repo are &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myers_diff.dart&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/diff_payload.dart&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff_payload.dart&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffs[0] = DeleteDiff(2, 1)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffs[1] = InsertDiff(3, 1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of note in this library:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Diff&amp;gt;&lt;/code&gt;. In this sense it is similar to the Swift implementation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Diff&lt;/code&gt; can be one of &lt;code class=&quot;highlighter-rouge&quot;&gt;InsertDiff&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DeleteDiff&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ChangeDiff&lt;/code&gt;. This library does not implement moves.&lt;/li&gt;
  &lt;li&gt;Each instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Diff&lt;/code&gt; includes an &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;. In this respect, it is similar to the Android DiffUtil implementation.&lt;/li&gt;
  &lt;li&gt;It uses an &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart#L5&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Equalizer&lt;/code&gt;&lt;/a&gt; to customize the comparison.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;angular&quot;&gt;Angular&lt;/h2&gt;

&lt;p&gt;Angular has an &lt;code class=&quot;highlighter-rouge&quot;&gt;IterableDiffer&lt;/code&gt; API that can be used to compute the diff between 2 Iterables. From what I can tell, it is not intended to be used directly by applications, instead it is used internally by the framework (for example, by the &lt;code class=&quot;highlighter-rouge&quot;&gt;NgForOf&lt;/code&gt; directive). &lt;a href=&quot;https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/&quot;&gt;This article&lt;/a&gt; goes into the nuts and bolts of this API.&lt;/p&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;differ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngForOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//diffResult consists of following IterableChangeRecords&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;C&quot;, currentIndex = null, previousIndex = 2)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;E&quot;, currentIndex = 3, previousIndex = null)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//(item = &quot;D&quot;, currentIndex = 2, previousIndex = 3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The interesting classes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableDiffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt;: The entry point of the API. Offers the &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChanges&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChanges&lt;/code&gt;&lt;/a&gt;: The diff result, which in itself is an Iterable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChangeRecord&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChangeRecord&lt;/code&gt;&lt;/a&gt;: Each individual update operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChanges&lt;/code&gt; interface is pretty interesting: it exposes functions to iterate over the changes in a variety of ways (all updates, only additions, only removals etc). The &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultIterableDiffer&lt;/code&gt; accepts a &lt;code class=&quot;highlighter-rouge&quot;&gt;TrackByFn&lt;/code&gt; argument, which fulfils the role of Android’s &lt;code class=&quot;highlighter-rouge&quot;&gt;DiffUtil.Callback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChangeRecord&lt;/code&gt; is also interesting: It does not directly state the diff operation. Instead, it contains &lt;code class=&quot;highlighter-rouge&quot;&gt;currentIndex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;previousIndex&lt;/code&gt;. Together, these can be used to decide if an item was added, removed etc. It also fulfils the role of position conversion APIs in Android.&lt;/p&gt;

&lt;p&gt;In practice, you’d probably use the &lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChanges&lt;/code&gt; API to figure out the additions and removals.&lt;/p&gt;

&lt;h2 id=&quot;at-a-glance&quot;&gt;At a glance&lt;/h2&gt;

&lt;p&gt;Here’s a table summarizing all the diff APIs across these platforms.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Android&lt;/th&gt;
      &lt;th&gt;Swift&lt;/th&gt;
      &lt;th&gt;Flutter (3rd party)&lt;/th&gt;
      &lt;th&gt;Angular&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Detect Moves&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Change payloads&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Custom comparison&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DiffUtil.Callback&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;difference(from:by:)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hashable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Equalizer&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackByFn&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Position conversion&lt;/td&gt;
      &lt;td&gt;Methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;DiffResult&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;NA&lt;/td&gt;
      &lt;td&gt;NA&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IterableChangeRecord&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;a-note-about-declarative-ui-frameworks&quot;&gt;A note about declarative UI frameworks&lt;/h3&gt;

&lt;p&gt;This series of blog posts actually started when I was trying to implement custom animations for a list view on Android. When I started this research, the question I wanted to answer was&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How do declarative UI frameworks deal with allowing custom animations for changes in lists?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that declarative UI frameworks in general receive a UI state and render that state. They don’t have a concept of “previous state” so “this item was removed” animation does not fit into this paradigm.&lt;/p&gt;

&lt;p&gt;So far, I haven’t found an answer to this question!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SwiftUI provides some default animations, but I did not find a way to customize them.&lt;/li&gt;
  &lt;li&gt;Flutter has no official APIs for this use case.&lt;/li&gt;
  &lt;li&gt;Angular has some APIs that look like they are used internally. I’m way out of my depth about Angular to form any practical opinion about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will be really interesting to see how Jetpack Compose is going to solve this problem!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After my research for this post, I came to the conclusion that Android’s DiffUtil API is the most flexible of all. It is the lowest level API for exposing the diff operations (the &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt;). All other platforms expose collection-style APIs for this purpose.&lt;/p&gt;

&lt;p&gt;I reckon Android has this low-level API because it plays well together with RecyclerView Adapter API. One can write a wrapper to expose it as a collection-style API.&lt;/p&gt;

&lt;p&gt;That is exactly what we will do in the next post in this series: Look at an example situation where RecyclerView might not be best fit, and instead wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt; to implement some custom UI.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jan 2020 10:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/01/07/diff-util-part2/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/01/07/diff-util-part2/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>What's the big difference? A deep dive into Android DiffUtil</title>
        <description>&lt;p&gt;This is a series of posts that looks into calculating the diffs between two lists on Android. This first post in the series looks at the basics of what the DiffUtil is.&lt;/p&gt;

&lt;h2 id=&quot;whats-diffutil&quot;&gt;What’s DiffUtil?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil&quot;&gt;docs for DiffUtil&lt;/a&gt; describe it as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DiffUtil is a utility class that calculates the difference between two lists and outputs a list of update operations that converts the first list into the second one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The selling point of this utility is it is nicely integrated with RecyclerView such that the following simple series of steps is sufficient to display nice animations for newly added items and disappearing items in the list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;diffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatchUpdatesTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Given the following data&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While switching back and forth between these 2 lists, this code produces this animation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_basic.gif&quot; alt=&quot;Basic diff animation&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You could also achieve this effect using the &lt;code class=&quot;highlighter-rouge&quot;&gt;notifyItemXYZ&lt;/code&gt; family of methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView.Adapter&lt;/code&gt;, if you maintain the list of items yourself and mutate it. However, in unidirectional data flow architectures, it is likely that you have an immutable list in your state. In those situations, &lt;code class=&quot;highlighter-rouge&quot;&gt;DiffUtil&lt;/code&gt; is more suitable.&lt;/p&gt;

&lt;h2 id=&quot;diffutil-api-usage-in-detail&quot;&gt;DiffUtil API usage in detail&lt;/h2&gt;

&lt;p&gt;Let’s dig into how to use the API. Using DiffUtil consists of the following high-level steps&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You tell the API how to compare items in the list (what constitutes a “removal”? What does a “change” mean?)&lt;/li&gt;
  &lt;li&gt;You ask the API to calculate the diff and give you a result&lt;/li&gt;
  &lt;li&gt;You use the DiffResult object to get called back for each update operation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s go through each step in more detail. We’ll use a &lt;code class=&quot;highlighter-rouge&quot;&gt;Player&lt;/code&gt; class like this for this example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-1-comparing-list-items&quot;&gt;Step 1: Comparing list items&lt;/h3&gt;

&lt;p&gt;DiffUtil tells you what items were removed, added and changed between 2 lists, but how does it know? Android chose to not use &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt; for this purpose - instead having you extend a &lt;code class=&quot;highlighter-rouge&quot;&gt;DiffUtil.Callback&lt;/code&gt; class. The relevant methods that you need to override are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;areItemsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;identity comparison&lt;/strong&gt;. In the case of the Player class above, 2 items have the same identity if they have the same name. We don’t care about the score for this comparison&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;areContentsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;equality comparison&lt;/strong&gt;. In the case of the Player class, 2 items have the same contents if they have the same name and score.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is used to tell you if an item retained the same identity but its contents changed. This can be useful for item change animations (for example, if a user liked a tweet you can animate the heart icon using this feature)&lt;/p&gt;

&lt;p&gt;The entire code for the callback would be&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areItemsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOldListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNewListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areContentsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2-calculating-the-diff&quot;&gt;Step 2: Calculating the diff&lt;/h3&gt;

&lt;p&gt;This step is a one-liner&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there’s a lot going on behind the scenes. &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateDiff&lt;/code&gt; implements the standard algorithm used for diffing: Eugene Myers diff algorithm. This is also the algorithm used by diff tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; and text editors. It is not necessary to know the implementation details of this algorithm, but if you are interested, you can go through &lt;a href=&quot;https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DiffUtil can also detect moves. If the position of an item in the list changes, then instead of reporting it as a removal followed by an insertion, DiffUtil can report it as a move from position A to position B. You do this by passing &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; to the second argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;detectMoves&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;We will ignore moves for the rest of this series.&lt;/p&gt;

&lt;h3 id=&quot;step-3-using-the-diffresult&quot;&gt;Step 3: Using the DiffResult&lt;/h3&gt;

&lt;p&gt;This is the step where I found the API to be a bit … unexpected. I would expect the DiffResult to give me a collection of update operations in the order that they need to be performed (something like a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;DiffOperation&amp;gt;&lt;/code&gt;). Instead, you need to call one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchUpdatesTo&lt;/code&gt; overloads:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchUpdatesTo(adapter: Adapter)&lt;/code&gt;: This is the one that you’ll probably use 99% of the time. You pass on the results to your existing RecyclerView adapter and you get all those animations automagically.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchUpdatesTo(updateCallback: ListUpdateCallback)&lt;/code&gt;: You use this if you want custom animations. In a later post in this series, we’ll look at an example where you might need this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;listupdatecallback-in-detail&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt; in detail&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/ListUpdateCallback.html&quot;&gt;This interface&lt;/a&gt; has the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onChanged(position: Int, count: Int, payload: Any?)&lt;/code&gt;: This is called when DiffUtil detects that &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; items have changed starting at &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onInserted(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; elements have been inserted into the old list starting at &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onRemoved(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; elements have been removed from the old list starting at &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some important points to note here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;These methods &lt;strong&gt;atomic&lt;/strong&gt;: the &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt; argument reported in every method is with reference to the &lt;em&gt;list as it was after the previous step&lt;/em&gt;, not as it was at the beginning of the diff operation.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; parameter in these methods makes it so that only consecutive similar changes are grouped together, not disjoint ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 2 above merits more discussion. To put it another way, if items at position 0 and 2 are deleted, DiffUtil reports it as “Hey item 2 was removed” and “Hey item 0 was removed” as separate callbacks instead of telling you “Hey items 0 and 2 were removed” in a single callback. This follows as a consequence of point 1 because each disjoint operation might have altered the structure of the list.&lt;/p&gt;

&lt;p&gt;The API designed this way allows you to basically endlessly “stream” diff operations from DiffResult to your UI component. This is powerful, but can also have downsides (as we will see in a future post).&lt;/p&gt;

&lt;h4 id=&quot;position-conversions&quot;&gt;Position conversions&lt;/h4&gt;

&lt;p&gt;In addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt;, there are 2 additional API’s offered by &lt;code class=&quot;highlighter-rouge&quot;&gt;DiffResult&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertOldPositionToNew(oldListPosition: Int)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertNewPositionToOld(newListPosition: Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They do what their names suggest. When would you use these? Remember that when one of the ListUpdate callbacks has been dispatched, the number of items in the list might have changed. An item at index &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; in the new list might not represent the same item at index &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; in the old list (it might not even exist in the old list). This pair of conversion methods is useful in such situations. One example is for animations, where you need to access the same view in both the old and new layouts.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we got an introduction to DiffUtil and how to use it. We also peeked under the hood into &lt;code class=&quot;highlighter-rouge&quot;&gt;ListUpdateCallback&lt;/code&gt;, but we haven’t used it in an example yet.&lt;/p&gt;

&lt;p&gt;In the next post in this series, we will conduct a brief survey of how other platforms handle list diffs.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 16:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/01/06/diff-util-part1/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/01/06/diff-util-part1/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
  </channel>
</rss>
