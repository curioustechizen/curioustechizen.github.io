<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curious Techizen</title>
    <description>A place for discussing anything tech. Old and new. Experiences and Opinions. Questions and rants. Primarily programming-related, but not exclusively.</description>
    <link>/blog/</link>
    <atom:link href="/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 06 Sep 2015 22:45:59 +0530</pubDate>
    <lastBuildDate>Sun, 06 Sep 2015 22:45:59 +0530</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>AO(sp)y Episode 2 - Lambdas</title>
        <description>&lt;p&gt;This post is the second episode in a series where I peek into random commits on AOSP and try to predict what&amp;#39;s coming to the world of Android development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: These tidbits have been gleaned primarily from the commit messages on AOSP. I very rarely even read (let alone understand) the code. As such expect inaccuracies or downright mistakes here. Do not make decisions based on what you read in this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That out of the way, let’s dig in. This episode was supposed to be about toolchain improvements, but the headline feature is what the title says - lambdas! Lest I am accused of clickbait, let me clarify that all of this is still experimental. Several commits are not even merged. There is no saying when (and if) any of these features will actually find their way into production.&lt;/p&gt;

&lt;p&gt;Ever since Java8 was released, the clamor for using lambdas in Android development has been growing, with good reason too. Android is full of anonymous inner classes for all kinds of things and several of these use cases would benefit from the use of lambdas.&lt;/p&gt;

&lt;p&gt;Java 8 brought about two types of enhancements to the Java programming language:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Features and syntax in the language itself&lt;/li&gt;
&lt;li&gt;Additions to the standard libraries to take advantage of the new features&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article concentrates purely on the first type of enhancements, i.e.,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&quot;&gt;Method references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;Default methods in interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static methods in interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not look like there is any move to bring the enhancements to the runtime libraries in the form of new collections and &lt;code&gt;java.util.function&lt;/code&gt; package to Android.&lt;/p&gt;

&lt;p&gt;So, what’s cooking?&lt;/p&gt;

&lt;h3&gt;Runtime support&lt;/h3&gt;

&lt;p&gt;Opcodes for creating and invoking lambdas are &lt;a href=&quot;https://android-review.googlesource.com/#/c/147957/&quot;&gt;being added&lt;/a&gt; to the Dalvik bytecode (dex) format. The ART interpreter is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155661/&quot;&gt;being updated&lt;/a&gt; to be able to use these opcodes.&lt;/p&gt;

&lt;p&gt;The first of these commits also points to the &lt;code&gt;dex2oat&lt;/code&gt; compiler being taught how to compile lambdas from your dex bytecode into the corresponding opcodes for OAT.&lt;/p&gt;

&lt;p&gt;What does all this mean? It means that &lt;em&gt;lambdas might be supported natively&lt;/em&gt; in a future version of Android.&lt;/p&gt;

&lt;h3&gt;Toolchain enhancements&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/c/158285/&quot;&gt;This commit&lt;/a&gt; and related ones point to the possibility of Jack compiler doing basically what is achieved with &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;gradle-retrolambda&lt;/a&gt; today. In other words, Jack compiler will be able to compile lambdas into bytecode that works even on runtimes that don’t support lambda opcodes. Similarly, Jill will likely do to lambdas in .class/.jar libraries what Jack does to them in source code.&lt;/p&gt;

&lt;h3&gt;Other Java8 features&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s more to Java8 than just the lambda syntax. AOSP also has commits that hint at support for &lt;a href=&quot;https://android-review.googlesource.com/#/c/169003/&quot;&gt;default methods&lt;/a&gt; and &lt;a href=&quot;https://android-review.googlesource.com/#/c/158165/&quot;&gt;Single Abstract Methods&lt;/a&gt;. I did not find any obvious mention of method references, but that might be because I&amp;#39;m not looking hard enough. In any case, method references are just syntax sugar for lambdas so if lambda expressions are supported, so should method references.&lt;/p&gt;

&lt;h3&gt;Compatibility&lt;/h3&gt;

&lt;p&gt;At first glance, one might conclude that lambdas will be used only if &lt;code&gt;minSdkVersion &amp;gt;=&lt;/code&gt; the version of Android in which they are introduced, and that Jack&amp;#39;s feature of down-compiling lambdas into Java7-compatible bytecode will be used in all other cases. This means that the runtime lambdas will not be used &lt;em&gt;even on the runtimes that support them unless &lt;code&gt;minSdkVersion&lt;/code&gt; is set to the latest&lt;/em&gt;. However, this is (more than) likely to negatively impact the adoption of lambdas.&lt;/p&gt;

&lt;p&gt;So, what might be strategies to work around this? What follows is a &lt;strong&gt;wild guess&lt;/strong&gt; as to how this might pan out. I haven&amp;#39;t dug in the source code into much (or ... &lt;em&gt;any&lt;/em&gt;) detail (not that I&amp;#39;d understand much of it even if I had, but that&amp;#39;s beside the point).&lt;/p&gt;

&lt;p&gt;Remember that &lt;code&gt;dex2oat&lt;/code&gt; runs on the Android device. The APK file only has dex bytecode, and it is converted into OAT at installation time. Could this be used to enhance the compatibility story?&lt;/p&gt;

&lt;p&gt;Jack might use &lt;code&gt;targetSdkVersion&lt;/code&gt; to decide whether to include lambdas in the compiled dex bytecode. If &lt;code&gt;targetSdkVersion &amp;gt;=&lt;/code&gt; the version in which lambda support is introduced, then the generated dex might &lt;em&gt;include&lt;/em&gt; the Java8 bytecode. But wait, aren&amp;#39;t we back at square one? &lt;code&gt;dex2oat&lt;/code&gt; is part of the Android OS and cannot (yet) be updated independently of the OS. This means that &lt;code&gt;dex2oat&lt;/code&gt; that is running on an older version of the OS will not understand the new dex bytecode.&lt;/p&gt;

&lt;p&gt;This is why I say &lt;em&gt;include&lt;/em&gt; Java8 opcodes instead of &lt;em&gt;generate&lt;/em&gt; - that is to say, Jack might generate both the Java7-compatible byte code as well as new Java8 opcodes. Hopefully, &lt;code&gt;dex2oat&lt;/code&gt; running on older versions of Android simply ignore the Java8 opcodes. But, what about the size implications of this arrangement? In lambda-heavy apps, will this result in bloated &lt;code&gt;.dex&lt;/code&gt; files?&lt;/p&gt;

&lt;p&gt;The other option is that Jack might always generate Java7 compatible bytecode (compiles lambda expressions into anonymous inner classes), but it might include some sort of flag to indicate to &lt;code&gt;dex2oat&lt;/code&gt; that these constructs be compiled into the corresponding Java8 OAT format. But this begs the question - what, then, is the point of the new opcodes in &lt;code&gt;.dex&lt;/code&gt; format at all?&lt;/p&gt;

&lt;p&gt;I do not have the answers to these questions yet (nor does AOSP). But I&amp;#39;m sure the answers will reveal themselves in the days to come. If you are interested in this topic, you can follow the progress yourself at the following locations on AOSP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:platform/art&quot;&gt;platform/art&lt;/a&gt; project ...&lt;/li&gt;
&lt;li&gt;... particularly, the &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:merged+project:platform/art+branch:master+topic:lambda_experimental&quot;&gt;lambda_experimental&lt;/a&gt; topic&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:toolchain/jack&quot;&gt;toolchain/jack&lt;/a&gt; project &lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:open+project:toolchain/jack+branch:ub-jack-lang-dev&quot;&gt;ub-jack-lang-dev&lt;/a&gt; branch&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 +0530</pubDate>
        <link>/blog/2015/09/06/ao-spy-2/</link>
        <guid isPermaLink="true">/blog/2015/09/06/ao-spy-2/</guid>
        
        <category>aosp</category>
        
        <category>android</category>
        
        <category>java8</category>
        
        <category>lambda</category>
        
        
      </item>
    
      <item>
        <title>AO(sp)y Part 1</title>
        <description>&lt;p&gt;This post is the first in a series (hopefully) in which I spy on AOSP (hence the title - yes, I know I&amp;#39;m not winning any prizes for creative blog post titles!) and try to gather glimpses of what&amp;#39;s coming to the world of Android.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Most of this is guess work. In many cases I&amp;#39;m not even looking at any code - the commit messages and review comments are as far I go. Do not make any decisions based on this post!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this first episode, we will look at improvements coming to Android Studio (most probably in 1.4)&lt;/p&gt;

&lt;h3&gt;Material Icon Picker&lt;/h3&gt;

&lt;p&gt;There &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7647?pr=androidstudio&quot;&gt;already exist&lt;/a&gt; plugins for Android Studio that make it easy for you to include Material Design icons in your project. Google is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155698/&quot;&gt;working on&lt;/a&gt; bringing something similar into the Android Studio.&lt;/p&gt;

&lt;p&gt;Now, I haven&amp;#39;t actually checked out this code and built it so I don&amp;#39;t know what the picker actually looks like, but it would be a safe bet to assume that it&amp;#39;ll be integrated into the existing &amp;quot;Asset Studio&amp;quot; (which itself started as a web app, then found its way into Eclipse and in its current avatar, it is part of AS).&lt;/p&gt;

&lt;h3&gt;Material Color Suggestor&lt;/h3&gt;

&lt;p&gt;If I want to change the color palette of my app today, I need to go to &lt;a href=&quot;http://www.materialpalette.com/&quot;&gt;http://www.materialpalette.com/&lt;/a&gt; and choose my colors there and finally download the styles.xml file. &lt;a href=&quot;https://android-review.googlesource.com/#/c/156624/&quot;&gt;This feature&lt;/a&gt; will make it easy for you to set your material color palette from within Android Studio. Moreover, the tool is a color suggestor - you choose a primary color and AS will suggest a primaryDark and an accent color that goes with it according to the material design specs.&lt;/p&gt;

&lt;h3&gt;Import SVG as Vector Drawable&lt;/h3&gt;

&lt;p&gt;Again, there &lt;a href=&quot;http://inloop.github.io/svg2android/&quot;&gt;already exist&lt;/a&gt; tools to convert an SVG file into an Android-compatibe Vector Drawable, but it would be nice to have &lt;a href=&quot;https://android-review.googlesource.com/#/c/163309/&quot;&gt;this functionality&lt;/a&gt; right in Studio.&lt;/p&gt;

&lt;h3&gt;VectorDrawable to PNG&lt;/h3&gt;

&lt;p&gt;This is not an Android Studio feature - rather it is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/162815/&quot;&gt;Gradle feature&lt;/a&gt;. It will convert vector drawables into PNGs for use with pre-Lollipop. This will be done at build time. I&amp;#39;m not sure if this means that we can do away with creating those &lt;code&gt;drawable-*hdpi&lt;/code&gt; PNGs altogether though.&lt;/p&gt;

&lt;h3&gt;New Layout Editor&lt;/h3&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/159435/&quot;&gt;large list of commits&lt;/a&gt; mentioning the &amp;quot;Nele&amp;quot; which seems to be an internal acronym for New Layout Editor. A cursory glance at it did not reveal much about what exactly is new in this layout editor. However, it is possible that this info is there buried somewhere in one of the 49 related commits and that I have missed it. One thing is for sure - this is a pretty big change and Google wouldn&amp;#39;t have embarked on it if it wouldn&amp;#39;t bring significant advantages to developers.&lt;/p&gt;

&lt;h3&gt;AppBar creation in AS&lt;/h3&gt;

&lt;p&gt;Android Studio is &lt;a href=&quot;https://android-review.googlesource.com/#/c/162681/&quot;&gt;gaining the capability&lt;/a&gt; to include an AppBar when you use the templates to create a new Activity. According to the commit message, this will be optional. Also, a dependency on the design support library will be included by default for new projects. This is a very welcome change.&lt;/p&gt;

&lt;p&gt;Stay tuned for Part 2 where we go beyond the IDE and dig a little deeper into the toolchain.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0530</pubDate>
        <link>/blog/2015/08/12/ao-spy-1/</link>
        <guid isPermaLink="true">/blog/2015/08/12/ao-spy-1/</guid>
        
        <category>aosp</category>
        
        <category>studio</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragments and the Backstack - Part 3</title>
        <description>&lt;p&gt;This is the third post in the series about Nested Fragments and the Back Stack in Android. Read the previous posts here:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/01/nested-fragments-and-back-stack.html&quot;&gt;Part 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragment-and-backstack-part-2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;The first two posts have looked at the topic taking &lt;code&gt;ViewPager&lt;/code&gt; as an example. I have also mentioned repeatedly that this is not the only use case for having to maintain the back-stack of nested fragments. One use case that I threw up often in comments was about &lt;strong&gt;Navigation Drawers&lt;/strong&gt;. That is exactly what this post will look into.&lt;/p&gt; &lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT: Some Google engineers, including the creators of the Android framework have expressed their reservations regarding this article. Read &lt;a href=&quot;https://plus.google.com/100961288997176421259/posts/BLLi6srFtwT&quot;&gt;this G+ thread&lt;/a&gt; for more details. They point out that using an &lt;code&gt;Application&lt;/code&gt; sub-class to save state is not a good idea, but also that saving &lt;code&gt;Fragment&lt;/code&gt; instance state explicitly might in itself needs to be considered carefully. I hope to gather their thoughts and write a follow-up post in the coming weeks. Stay Tuned.&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt; &lt;h3 id=&quot;re-cap&quot;&gt;Re-cap&lt;/h3&gt; &lt;p&gt;Just to re-cap the conclusion from the previous article:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Consider pro-actively saving your &lt;code&gt;Fragment&lt;/code&gt; states in &lt;code&gt;onPause&lt;/code&gt;, particularly is the &lt;code&gt;Fragment&lt;/code&gt; happens to nest other fragments inside of it. &lt;/li&gt;&lt;li&gt;Do not rely solely on the system saving state for you in &lt;code&gt;onSaveInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;FragmentManager#saveFragmentInstanceState&lt;/code&gt; to save the Fragment state including the back-stack of nested fragment transactions for you.&lt;/li&gt;&lt;li&gt;Do not hold on to the saved state any longer than necessary.&lt;/li&gt;&lt;/ul&gt; &lt;h3 id=&quot;adapting-to-navigation-drawer&quot;&gt;Adapting to Navigation Drawer&lt;/h3&gt; &lt;p&gt;If you take the &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack/tree/master/nested-fragments-backstack-part2&quot;&gt;source code for Part 2&lt;/a&gt; of the series, and adapt it as-is to a Navigation Drawer example, you’ll find that things don’t quite work as you’d expect. In particular, you’ll find that &lt;em&gt;even though you have saved the state of the &lt;code&gt;ContainerFragment&lt;/code&gt; in &lt;code&gt;onPause&lt;/code&gt;&lt;/em&gt;, the next time you return to this fragment, its state is cleared. &lt;/p&gt; &lt;p&gt;Why is this? The alert reader might have spotted the reason.&lt;/p&gt; &lt;p&gt;In the case of the &lt;code&gt;ViewPager&lt;/code&gt; example, we clear the saved fragment state in &lt;code&gt;onDestroy()&lt;/code&gt;. This is because of the way ViewPager works (or rather, &lt;code&gt;FragmentPagerAdapter&lt;/code&gt; or &lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt; works): When you navigate away from a tab, the Fragment’s &lt;code&gt;`onPause&lt;/code&gt; is called but none of the other life-cycle methods are called. This means &lt;code&gt;onDestroy&lt;/code&gt; is skipped and the Fragment is simply torn down. &lt;code&gt;onDestroy&lt;/code&gt; is only called when the hosting &lt;code&gt;Activity&lt;/code&gt; is destroyed.&lt;/p&gt; &lt;pre style=&quot;&quot; class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getFragmentManager&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onDestroy&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, when you use a Navigation Drawer, the case is different. In this situation, there is no &lt;code&gt;PagerAdapter&lt;/code&gt; to deal with. When you navigate from one item in the navigation drawer to another, the “old” Fragment undergoes the complete life-cycle - &lt;code&gt;onPause&lt;/code&gt; all the way to &lt;code&gt;onDestroy&lt;/code&gt; and &lt;code&gt;onDetach&lt;/code&gt;. As a consequence, since you’re clearing the saved Fragment state in &lt;code&gt;onDestroy&lt;/code&gt; of the &lt;code&gt;ContainerFragment&lt;/code&gt;, &lt;strong&gt;you end up clearing the state that you had just saved in &lt;code&gt;onPause&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;h3 id=&quot;solution&quot;&gt;Solution?&lt;/h3&gt; &lt;p&gt;Well, the solution is rather simple - just don’t clear the state in &lt;code&gt;onDestroy&lt;/code&gt; of the parent Fragment! In addition, there are a few other minor changes - like the way you set the initial state of the ContainerFragment (instead of retrieving the saved state in one of the life cycle methods of the Fragment, you use &lt;code&gt;setInitialSavedState&lt;/code&gt; in the static creator method). The source code for this is available at the &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;github repo&lt;/a&gt; for this series.&lt;/p&gt; &lt;pre style=&quot;&quot; class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; newInstance&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;SavedState&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; savedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; frag &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        frag&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setInitialSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;savedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; frag&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getFragmentManager&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here’s a video showing this in action (Unfortunately the Android screenrecord tool doesn’t like it if you rotate the device during the recording, but I think the video demnostrates the point sufficiently):&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/JEzerV4Ee_g&quot; allowfullscreen=&quot;&quot; height=&quot;315&quot; width=&quot;420&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;forgetting-the-saved-state&quot;&gt;Forgetting the saved state?&lt;/h3&gt; &lt;p&gt;The bullet points that we established in the previous post (re-capped at the beginning of this post) say that you should not hold on to the saved state any longer than necessary. However, we had to violate that rule in this solution because - well - it is pointless to save the state only to immediately clear it!&lt;/p&gt; &lt;p&gt;However, depending on your use case you might approach this in a different manner. For example, you might only clear the fragment saved state when the hosting &lt;code&gt;Activity&lt;/code&gt; is destroyed. This is &lt;em&gt;not&lt;/em&gt; demonstrated in the sample code on github but should be straightforward to implement.&lt;/p&gt;</description>
        <pubDate>Sun, 09 Feb 2014 12:26:00 +0530</pubDate>
        <link>/blog/2014/02/09/nested-fragments-and-backstack-part-3/</link>
        <guid isPermaLink="true">/blog/2014/02/09/nested-fragments-and-backstack-part-3/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragment and the BackStack - Part 2</title>
        <description>&lt;p&gt;This article is the second in this series about Nested Fragments and the Back Stack in Android. You can read Part 1 &lt;a href=&quot;http://curioustechizen.blogspot.com/2014/01/nested-fragments-and-back-stack.html&quot;&gt;here&lt;/a&gt;. To get this post into context, take a look at the video embedded in the previous post, if nothing else.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edit: Later posts in this series at&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragments-and-backstack-part-3.html&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT: Some Google engineers, including the creators of the Android framework have expressed their reservations regarding this article. Read &lt;a href=&quot;https://plus.google.com/100961288997176421259/posts/BLLi6srFtwT&quot;&gt;this G+ thread&lt;/a&gt; for more details. They point out that using an &lt;code&gt;Application&lt;/code&gt; sub-class to save state is not a good idea, but also that saving &lt;code&gt;Fragment&lt;/code&gt; instance state explicitly might in itself needs to be considered carefully. I hope to gather their thoughts and write a follow-up post in the coming weeks. Stay Tuned.&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt; &lt;p&gt;At the risk of sounding repetitive, I’ll start off this post by once again stating the gist of the previous post:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;A Fragment’s &lt;code&gt;onSaveInstanceState&lt;/code&gt; method is not guaranteed to be called when it is “removed”. The &lt;code&gt;Fragment&lt;/code&gt; might simply be torn down. The only time its state might be saved is when the hosting &lt;code&gt;Activity&lt;/code&gt; saves its state.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;We also saw how this could be a problem when you use nested fragments and a &lt;code&gt;FragmentManager&lt;/code&gt; doesn’t save its backstack of fragment transactions. In this part, we’ll look at one possible solution to this problem.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;save-state-in-onpause&quot;&gt;Save state in onPause&lt;/h3&gt; &lt;p&gt;This is the obvious solution to the problem. The Android docs also state this time and again: it is a best practice to proactively save state. Also, since &lt;code&gt;onPause&lt;/code&gt; is the only callback that is guaranteed to be called, it makes sense to save your instance state here.&lt;/p&gt; &lt;p&gt;Having said that, it is easy to save view states, scroll positions and even entire arbitrary objects in &lt;code&gt;onPause.&lt;/code&gt; But, how does one save a back stack of fragment transactions?&lt;/p&gt; &lt;p&gt;Enter &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/Fragment.SavedState.html&quot;&gt;&lt;code&gt;Fragment.SavedState&lt;/code&gt;&lt;/a&gt;.  You can ask the &lt;code&gt;FragmentManager&lt;/code&gt; to save the state of a &lt;code&gt;Fragment&lt;/code&gt; using &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/FragmentManager.html#saveFragmentInstanceState%28android.support.v4.app.Fragment%29&quot;&gt;&lt;code&gt;saveFragmentInstanceState&lt;/code&gt;&lt;/a&gt;. The back stack being managed by a Fragment’s nested &lt;code&gt;FragmentManager&lt;/code&gt; is included in the state saved by this method.&lt;/p&gt; &lt;h4 id=&quot;the-application-sub-class&quot;&gt;The &lt;code&gt;Application&lt;/code&gt; sub-class&lt;/h4&gt; &lt;p&gt;This post shows how you could use a sub-class of the &lt;code&gt;Application&lt;/code&gt; class to save the state, but you might choose another mechanism to do so. The important thing is that the state has to be saved. We use a &lt;code&gt;Map&lt;/code&gt; of strings as keys and the saved state as values in this example.&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class NestedFragApp extends Application {&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;String, Fragment.SavedState&amp;gt; savedStateMap;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate() {&lt;br /&gt;        savedStateMap = new HashMap&amp;lt;String, Fragment.SavedState&amp;gt;();&lt;br /&gt;        super.onCreate();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void setFragmentSavedState(String key, Fragment.SavedState state){&lt;br /&gt;        savedStateMap.put(key, state);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Fragment.SavedState getFragmentSavedState(String key){&lt;br /&gt;        return savedStateMap.get(key);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;explicitly-saving-fragment-state&quot;&gt;Explicitly saving Fragment state&lt;/h4&gt; &lt;p&gt;Then, you save the state of the container fragment when it pauses as follows:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override&lt;br /&gt;public void onPause() {&lt;br /&gt;    super.onPause();&lt;br /&gt;    ((NestedFragApp) getActivity().getApplication()).setFragmentSavedState(&lt;br /&gt;            SAVED_STATE_KEY, getFragmentManager().saveFragmentInstanceState(this));&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;initializing-the-fragment-transaction&quot;&gt;Initializing the fragment transaction&lt;/h4&gt; &lt;p&gt;Finally, remember to check whether there is a saved state for this fragment before “initializing” the fragment transaction:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SavedState fragmentSavedState = ((NestedFragApp)getActivity().getApplication())&lt;br /&gt;        .getFragmentSavedState(SAVED_STATE_KEY);&lt;br /&gt;if(fragmentSavedState == null){&lt;br /&gt;    if (savedInstanceState == null) {&lt;br /&gt;        getChildFragmentManager().beginTransaction().replace(R.id.nested_fragment_container, &lt;br /&gt;                NestedFragmentOne.newInstance()).commit();&lt;br /&gt;    } else {&lt;br /&gt;        // use savedInstanceState here to restore state saved in onSaveInstance&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that there are two “saved states” here:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;The instance state saved in &lt;code&gt;onSaveInstanceState&lt;/code&gt;, which is provided to you by the system via &lt;code&gt;savedInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The state you explicitly saved in &lt;code&gt;onPause&lt;/code&gt;, which you retrieve from the &lt;code&gt;Application&lt;/code&gt; object as &lt;code&gt;fragmentSavedState&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;The flow you follow for initializing the fragment is as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;You first check to see if you had previously explicitly saved state. If true, then you don’t need to do anything.&lt;/li&gt;&lt;li&gt;If not, then you proceed to check if the system had saved state for you. If true, then you use the &lt;code&gt;savedInstanceState&lt;/code&gt; to restore system-saved state.&lt;/li&gt;&lt;li&gt;Only if neither is true, then you initiate the fragment transaction.&lt;/li&gt;&lt;/ul&gt; &lt;h4 id=&quot;letting-go-of-the-saved-state&quot;&gt;Letting go of the saved state&lt;/h4&gt; &lt;p&gt;One thing you need to be careful of is to not hold on to the saved fragment state any longer than necessary. For example, when the &lt;strong&gt;container &lt;code&gt;Fragment&lt;/code&gt;&lt;/strong&gt; is destroyed, you want to invalidate the back-stack associated with it as well. This sounds obvious but I overlooked it and ended up with strange behaviors.&lt;/p&gt; &lt;p&gt;The best way I found was to “forget” the saved state of a container fragment in its &lt;code&gt;onDestroy&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override&lt;br /&gt;public void onDestroy() {&lt;br /&gt;    super.onDestroy();&lt;br /&gt;    ((NestedFragApp) getActivity().getApplication()).setFragmentSavedState(&lt;br /&gt;            SAVED_STATE_KEY, null);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With all these steps in place, the app now behaves as one would expect it to. Your position within a back-stack, even within a nested fragment, is remembered even when you navigate away and return to the top level fragment.&lt;/p&gt; &lt;p&gt;Here’s a video showing how the app now behaves:&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/7RpzkXGJqNo&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt; &lt;p&gt;The source code for the entire series is at &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;Consider pro-actively saving your &lt;code&gt;Fragment&lt;/code&gt; states in &lt;code&gt;onPause&lt;/code&gt;, particularly is the &lt;code&gt;Fragment&lt;/code&gt; happens to nest other fragments inside of it. &lt;/li&gt;&lt;li&gt;Do not rely solely on the system saving state for you in &lt;code&gt;onSaveInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;FragmentManager#saveFragmentInstanceState&lt;/code&gt; to save the Fragment state including the back-stack of nested fragment transactions for you.&lt;/li&gt;&lt;li&gt;Do not hold on to the saved state any longer than necessary.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;This article looked at ActionBar tabs with a ViewPager, but this concept applies to other situations where one would use nested Fragments (Navigation Drawers for example).&lt;/p&gt;</description>
        <pubDate>Sun, 02 Feb 2014 15:05:00 +0530</pubDate>
        <link>/blog/2014/02/02/nested-fragment-and-backstack-part-2/</link>
        <guid isPermaLink="true">/blog/2014/02/02/nested-fragment-and-backstack-part-2/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragments and the Back Stack</title>
        <description>&lt;p&gt;This article is not about the back stack of &lt;em&gt;activities&lt;/em&gt; that Android maintains for every task. That stuff has been written about adequately elsewhere. This post is about the back stack of &lt;em&gt;fragment transactions&lt;/em&gt; maintained by the &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/FragmentManager.html&quot;&gt;&lt;code&gt;FragmentManager&lt;/code&gt;&lt;/a&gt; and how they relate to nested fragments.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edit: Other posts in this series at&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragment-and-backstack-part-2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragments-and-backstack-part-3.html&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Heads-up:&lt;/strong&gt; If you are using nested fragments, you need to use the support library, even if your app only targets API level 14 and above. This is because nested fragment support was &lt;a href=&quot;http://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot;&gt;added in API 17&lt;/a&gt;, and the feature was back-ported to the support library (revision 11 and later).&lt;/p&gt; &lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt; &lt;p&gt;The gist of this post can be stated as follows:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its &lt;strong&gt;state will not be saved until its owning activity actually needs to save its state&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This is from the &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/Fragment.html#onSaveInstanceState%28android.os.Bundle%29&quot;&gt;docs&lt;/a&gt; (emphasis mine). Overlooking this can lead to bugs especially when you use nested fragments since the back stack of a child fragment manager could be reset when you least expect it. Remember - if the state of a &lt;code&gt;Fragment&lt;/code&gt; is not saved, then by definition, the back stack of fragment transactions managed by that fragment’s child &lt;code&gt;FragmentManager&lt;/code&gt; is not saved either.&lt;/p&gt; &lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt; &lt;p&gt;With the advent of fragments, more so nested fragments, the general advice one gets from the developer community is this:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;Fragmentize all the everythings!&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;And with good reason too. Consider the following:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;If you use ActionBar tabs, the content of each tab is implemented as a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Each “page” in a &lt;code&gt;ViewPager&lt;/code&gt; is often implemented as a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;In navigation drawers, the “content” of each navigation item is expected to be a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;What this translates to is that what would once be implemented as an &lt;code&gt;Activity&lt;/code&gt; now needs to be implemented as a &lt;code&gt;Fragment&lt;/code&gt;. This also means that a &lt;em&gt;flow within that &lt;code&gt;Activity&lt;/code&gt;&lt;/em&gt;, that might have been implemented using &lt;code&gt;Fragment&lt;/code&gt;s, now needs to be implemented using &lt;strong&gt;nested &lt;code&gt;Fragment&lt;/code&gt;s&lt;/strong&gt;. Note that by “flow” I simply mean a sequence of screens to establish a particular task.&lt;/p&gt; &lt;p&gt;Now here’s the thing with flows: If a user “goes away” from a flow and later returns to it, it is expected that the user continues from the screen where they left off. Translated into &lt;code&gt;Fragment&lt;/code&gt; terminology, this means that if a user navigates away and returns to a flow that is implemented using &lt;code&gt;Fragment&lt;/code&gt;s, its is expected that the user’s position in the backstack of fragment transactions is retained. However, this isn’t always the case.&lt;/p&gt; &lt;p&gt;Here is a video demonstrating the problem:&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/3gRq3hG9tS4&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt; &lt;p&gt;The video shows an &lt;code&gt;Activity&lt;/code&gt; with three tabs. It is a modified version of an &lt;code&gt;Activity&lt;/code&gt; created using the “New Activity” wizard in ADT or Android Studio and specifying “Fixed Tabs + Swipe” navigation. The modification is as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The content of the first tab has been modified to make it a “Container” &lt;code&gt;Fragment&lt;/code&gt; that in turn contains two nested fragments.&lt;/li&gt;&lt;li&gt;When the container fragment is first created, it shows a nested fragment asking you to enter your name.&lt;/li&gt;&lt;li&gt;On entering the name and Clicking “Next”, you are presented with another nested fragment asking you to enter your GitHub username.&lt;/li&gt;&lt;li&gt;The other two tabs are just simple &lt;code&gt;Fragment&lt;/code&gt;s - no nesting business there.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Now, notice what happens when I follow this sequence:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Enter name, press Next. Then, enter a github username.&lt;/li&gt;&lt;li&gt;Navigate to the tab titled “Section 2” and then back to “Section 1”.&lt;/li&gt;&lt;li&gt;Navigate to the tab titled “Section 3” and then back to “Section 1”.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Uh! In step 3 above, the back stack was nuked. But hey, it didn’t happen in Step 2. Why so?&lt;/p&gt; &lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt; &lt;p&gt;This example uses a &lt;code&gt;ViewPager&lt;/code&gt;. By default, a &lt;code&gt;ViewPager&lt;/code&gt; has an “off screen limit” of 1. This means that in addition to the page being displayed, one adjacent page in each direction is kept in memory. So, when you navigate to “Section 2”, everything in “Section 1” is still intact in memory.&lt;/p&gt; &lt;p&gt;When you navigate to “Section 3”, the page corresponding to “Section 1” is torn down. More importantly, since at this point the &lt;code&gt;Activity&lt;/code&gt; instance state is not being saved, the &lt;code&gt;Fragment&lt;/code&gt; state isn’t saved either. This ties in with what we saw in the “TL;DR” section above. As a result, when you navigate back to “Section 1”, the nested fragment back stack is reset.&lt;/p&gt; &lt;h3 id=&quot;rotation-task-switching&quot;&gt;Rotation? Task Switching?&lt;/h3&gt; &lt;p&gt;Try following this sequence of steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Enter name, press Next. Then, enter a github username.&lt;/li&gt;&lt;li&gt;Rotate the device; or switch to another app and return back to this app&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Now you’ll see that the back stack is retained. This is because when you rotate the device or switch to another task, the Activity saves its instance state. As a consequence the container fragment does too.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Re-iterating what we started off this post with, &lt;strong&gt;keep in mind when you are using nested fragments that a &lt;code&gt;Fragment&lt;/code&gt; is guaranteed to save state only when the containing &lt;code&gt;Activity&lt;/code&gt; saves its instance state. At other times, the &lt;code&gt;Fragment&lt;/code&gt; might simply be torn down&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The code for a sample app illustrating the problem is available &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;at github&lt;/a&gt;. The next part of this series will explore ways to overcome this problem.&lt;/p&gt;</description>
        <pubDate>Sat, 25 Jan 2014 23:09:00 +0530</pubDate>
        <link>/blog/2014/01/25/nested-fragments-and-back-stack/</link>
        <guid isPermaLink="true">/blog/2014/01/25/nested-fragments-and-back-stack/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Android ListViews: &quot;Hybrid&quot; Choice Behavior</title>
        <description>&lt;p&gt;The goal of this post is to use a &lt;code&gt;ListView&lt;/code&gt; in a master/detail configuration where &lt;em&gt;both&lt;/em&gt; of the following are possible:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Touch a single item to &lt;strong&gt;open&lt;/strong&gt; it.&lt;/li&gt;&lt;li&gt;Long-tap multiple items to &lt;strong&gt;choose&lt;/strong&gt; them and perform a common action on them.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Note that we wish both these to be possible simultaneously, i.e., even as one item is opened, we wish to allow multiple items (possibly including the item that is opened) to be chosen.&lt;/p&gt; &lt;p&gt;This behavior (with some minor variations) is seen in apps like GMail, Google Play Store and the Google I/O 2013 app.&lt;/p&gt; &lt;p&gt;The following screenshot shows what we want to achieve. It shows one opened item (Item 5) and two chosen items (Item 3 and Item 8)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-HVUbT2xSCHE/UbNPf0kqtFI/AAAAAAAAAHk/cAFBmm4HglY/s512/target_ui.png&quot; alt=&quot;This is what we want to achieve&quot; title=&quot;target_ui.png&quot;&gt;&lt;/p&gt; &lt;h3 id=&quot;a-note-on-the-terminology&quot;&gt;A note on the terminology&lt;/h3&gt; &lt;p&gt;Just to avoid confusion, let&#39;s sort of formalize the terminology related to the states an item in the list can be in.&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;An item is &lt;strong&gt;opened&lt;/strong&gt; when the user is viewing the details about that item. In other words, the details of that item are being displayed in the &lt;code&gt;DetailFragment&lt;/code&gt;. In dual-pane mode, there needs to be some visual indication in the &lt;code&gt;ListView&lt;/code&gt; to let the user know which one of the items is currently opened.&lt;/p&gt;     &lt;p&gt;When an item is &lt;strong&gt;chosen&lt;/strong&gt;, the Contextual Action Bar appears and the user can perform some action on the item. When multiple items are chosen, only the contextual actions that apply to all of them are to be presented. There needs to be some visual indication in the &lt;code&gt;ListView&lt;/code&gt; to let the user know which of the items are currently chosen. Needless to say, this indication needs to differ from the that used to indicate the opened item.&lt;/p&gt;&lt;/blockquote&gt; &lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt; &lt;p&gt;You might notice that one can achieve the opened behavior using &lt;code&gt;ListView&lt;/code&gt;&#39;s &lt;code&gt;CHOICE_MODE_SINGLE&lt;/code&gt; and the chosen behavior using &lt;code&gt;CHOICE_MODE_MULTIPLE_MODAL&lt;/code&gt;. However, it is while trying to combine them that things begin to get challenging, particularly in dual-pane mode. You get either one or the other, but never both. For example, if you use &lt;code&gt;CHOICE_MODE_MULTIPLE_MODAL&lt;/code&gt;, then you lose the ability to visually indicate the currently opened item.&lt;/p&gt; &lt;p&gt;The solution I ended up with was to not rely on the &lt;code&gt;CHOICE_MODE_MULTIPLE_MODAL&lt;/code&gt;, but rather simulate it myself. The high level steps are as follows:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Create a custom &lt;code&gt;ListAdapter&lt;/code&gt; that keeps track of the currently opened item and the currently chosen items&lt;/li&gt;&lt;li&gt;In the &lt;code&gt;getView()&lt;/code&gt; (or equivalent) method of your custom &lt;code&gt;ListAdapter&lt;/code&gt;, examine the item at the supplied &lt;code&gt;position&lt;/code&gt;. If it is the currently opened item, set its visual properties to indicate this. Ditto if it is one of the chosen items.&lt;/li&gt;&lt;li&gt;Listen for clicks and long clicks on your &lt;code&gt;ListView&lt;/code&gt; and update the adapter defined in step 1 accordingly- i.e., in your &lt;code&gt;OnItemClickListener&lt;/code&gt; implementation, set the opened item and in &lt;code&gt;OnItemLongClickListener&lt;/code&gt;, update the list of chosen items.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OnItemLongClickListener&lt;/code&gt; is also where you need to start the action mode (&lt;code&gt;getListView().startActionMode()&lt;/code&gt;) if it isn&#39;t started already.&lt;/li&gt;&lt;/ol&gt; &lt;h3 id=&quot;hybridchoiceadapter&quot;&gt;HybridChoiceAdapter&lt;/h3&gt; &lt;p&gt;Here are relevant portions of the code showing how the Adapter should be customized. This code is sparsely commented since I hope that it is self explanatory. Please look at the end of this post for the link to the complete github project.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot; style=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;/* Keep track of currently opened item and chosen items */&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; chosenItems &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; openedItem &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//...snip...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; setItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; chosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;chosen &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; isItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;chosen &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;isItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; isItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getChosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; setOpenedItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;openedItem &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getOpenedItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;openedItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; isItemOpened&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;openedItem &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; clearChoices&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; toggleItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;isItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getChosenItemsCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;chosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;the-getview-method&quot;&gt;The &lt;code&gt;getView()&lt;/code&gt; method&lt;/h3&gt; &lt;p&gt;At this point, we have set up the &lt;code&gt;Adapter&lt;/code&gt; to keep track of the currently opened item and the chosen items too. We have also exposed methods to manipulate these values. Now, lets look at the code that updates the UI. It is rather simple - all we need to do is, set the background of the row view depending on the opened and chosen states of the current item. Note that an item can be both opened and chosen.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot; style=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; convertView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ViewGroup&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; parent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; convertView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;/*Normal procedure to inflate the row layout and set its properties goes here*/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setBackgroundResource&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;isItemOpened&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            setViewAsOpened&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//This method sets the appropriate background resource or drawable&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;isItemChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            setViewAsChosen&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//This method sets the appropriate background resource or drawable&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;listening-for-clicks-on-the-listview&quot;&gt;Listening for clicks on the &lt;code&gt;ListView&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;In your &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Fragment&lt;/code&gt;, we listen for both clicks and long clicks and update the adapter accordingly. Again, only the relevant portions of the code are presented here - the full project is shared on github (linked at the end of this post). Here we use a &lt;code&gt;ListAdapter&lt;/code&gt; that also implements &lt;code&gt;OnItemLongClickListener&lt;/code&gt;.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot; style=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onListItemClick&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; listView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; view&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; id&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onListItemClick&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;listView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; view&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; id&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//When an item is clicked, set it as the opened item&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setOpenedItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//At this point, clear all choices&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;clearChoices&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;mActionMode &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            mActionMode&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;notifyDataSetChanged&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;         &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// code to show the details fragment goes here&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onItemLongClick&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;AdapterView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; parent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; view&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; id&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//When an item is long clicked, toggle its chosen state&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//Also update the CAB title to reflect the change in number of chosen items&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;toggleItem&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        updateActionMode&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; updateActionMode&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;mActionMode &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;            mActionMode &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getListView&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;startActionMode&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;actionModeCallback&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;        mActionMode&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;%d chosen&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getChosenItems&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()));&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        mAdapter&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;notifyDataSetChanged&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The previous code snippet also includes step 4 from our high level overview. If the CAB is not already shown, we show it when an item is long clicked.&lt;/p&gt; &lt;p&gt;That mostly covers what we need to do to achieve our goal. There are a few other things that need to be taken care of (for example, clearing the choices whenever the CAB is dismissed - as a result of a contextual action being performed, or otherwise). You can examine the entire code in detail at the github repository.&lt;/p&gt; &lt;h3 id=&quot;variations&quot;&gt;Variations&lt;/h3&gt; &lt;p&gt;There are subtle variations of what action the user has to take to choose an item. For example,&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The old GMail app (v4.3) displayed check boxes for each row. So you could choose an item either by long-pressing it, or by tapping the check box.&lt;/li&gt;&lt;li&gt;In the new GMail app and the Google I/O 2013 app, when no item is chosen, you long-press an item to choose it. After that, &lt;strong&gt;even single clicking on other items chooses them&lt;/strong&gt;. This is different from our implementation where a single-tap always opens an item.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;You will need to modify the code for the click listeners if you want to go with one of these variations. The &lt;code&gt;ListAdapter&lt;/code&gt; code itself should remain the same.&lt;/p&gt; &lt;h3 id=&quot;turning-this-into-a-library&quot;&gt;Turning this into a library?&lt;/h3&gt; &lt;p&gt;Well, I gave this a thought too. Exposing the custom &lt;code&gt;Adapter&lt;/code&gt; as a library is the easy part. What I couldn&#39;t decide upon is how to include the &lt;code&gt;ListView&lt;/code&gt; listeners  in a library. Developers might wish to extend &lt;code&gt;ListActivity&lt;/code&gt; or &lt;code&gt;ListFragment&lt;/code&gt; or simply include a &lt;code&gt;ListView&lt;/code&gt; in their layouts. Catering to so many requirements is a tough ask (unless I want to provide custom base versions of all these classes ... plus their &lt;code&gt;Sherlock&lt;/code&gt; counterparts!)&lt;/p&gt; &lt;p&gt;If anyone has any ideas on how this could be library-ized, please do drop a comment.&lt;/p&gt; &lt;h3 id=&quot;github-repositroy&quot;&gt;GitHub repositroy&lt;/h3&gt; &lt;p&gt;The complete source code for this article is available as a sample project on GitHub &lt;a href=&quot;https://github.com/curioustechizen/android-hybridchoice&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
        <pubDate>Sat, 08 Jun 2013 23:33:00 +0530</pubDate>
        <link>/blog/2013/06/08/android-listviews-hybrid-choice-behavior/</link>
        <guid isPermaLink="true">/blog/2013/06/08/android-listviews-hybrid-choice-behavior/</guid>
        
        <category>choicemode</category>
        
        <category>listview</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Shift to Octopress Postponed</title>
        <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;p&gt;For some time now, I have been toying with the idea of migrating this blog to &lt;a href=&quot;http://octopress.org/&quot;&gt;octopress&lt;/a&gt;. I&#39;m already using Markdown to compose my posts, so this is a logical step for me. Also, the idea of a static site that I can take with me wherever I choose to host it appeals to me. Finally, there&#39;s the geek factor what with git-based publish workflows and SCSS/liquid customizations and what not. I had even chosen a theme - &lt;a href=&quot;http://panks.me/blog/2013/01/new-octopress-theme-fabric/&quot;&gt;Fabric&lt;/a&gt; - to use as my base theme.&lt;/p&gt;&lt;p&gt;However, it looks like I&#39;m going to have to postpone migration to Octopress. Here are some of the reasons:&lt;/p&gt;&lt;h3&gt;Redirection&lt;/h3&gt;&lt;p&gt;I&#39;m not sure how to deal with links to my existing posts. I have seen examples of how to do this if you are self-hosting your current blog, or if you are using your own domain name. Neither of these apply to me - my current blog is hosted on blogger, with a &lt;code&gt;.blogspot&lt;/code&gt; domain. &lt;/p&gt;&lt;h3&gt;Comments&lt;/h3&gt;&lt;p&gt;I&#39;m already using Disqus for comments on my blog. I gather that it should be possible to migrate Disqus comments even if your domain changes. I just haven&#39;t figured out how.&lt;/p&gt;&lt;h3&gt;Importing&lt;/h3&gt;&lt;p&gt;I tried using some custom Ruby scripts to import my existing posts into Octopress. While it works, there are two problems I need to deal with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syntax Highlighting:&lt;/strong&gt; In blogger, syntax highlighting is done dynamically by Javascript (I use google&#39;s prettify.js). While this can be used with static site generators, it is best to stick to introducing syntax highlighting at the &lt;em&gt;post generation time&lt;/em&gt;. This is all fine for new posts, but for posts that I import from blogger, this needs additional tweaking. Basically the imported sources are just HTML with some YAML front-matter. I will need to convert it to markdown, add the syntax highlighting annotations and then generate the posts from it.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Permalinks:&lt;/strong&gt; This goes back to the redirection I already mentioned. I also need to customize the permalinks of imported posts to make sure they play nice with redirection. Again, this is not a problem for newer posts. Only the imported posts need to be tweaked.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Looking Forward&lt;/h3&gt;&lt;p&gt;I&#39;m not saying that any of the above impossible (or even very difficult) to achieve. It is just that some amount of experimentation is involved. I feel that it would take up more time than I am willing to invest at this point to get things up and running.&lt;/p&gt;&lt;p&gt;This is not to say that I have shelved the idea of shifting to a static site generator altogether. On the contrary. This shift is surely happening. It has just been deferred.&lt;/p&gt;&lt;p&gt;The easiest approach would be to maintain my current blog at http://curioustechizen.blogspot.com/ and start the octopress blog afresh. No imports from blogger. No redirection. Only new posts at the new blog. This approach is not without its downsides though.&lt;/p&gt;&lt;p&gt;So, in a nutshell:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I will surely be migrating to a static site generator like octopress in the near future. But for now, I&#39;m sticking with blogger.&lt;/p&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 Mar 2013 11:04:00 +0530</pubDate>
        <link>/blog/2013/03/09/shift-to-octopress-postponed/</link>
        <guid isPermaLink="true">/blog/2013/03/09/shift-to-octopress-postponed/</guid>
        
        <category>migration</category>
        
        <category>platform</category>
        
        <category>octopress</category>
        
        <category>publishing</category>
        
        
      </item>
    
      <item>
        <title>Android Constants: Preference Keys, Actions, Extras and more</title>
        <description>&lt;p&gt;The content of this post may seem ... well .. trivial at first, but I have tripped over these so many times that I decided to write it up - at least to keep me reminded of it, if not for any other reason!&lt;/p&gt;&lt;p&gt;If you have written anything more than a HelloWorld app in Android, chances are you have had to work with a plethora of program elements that are represented as &lt;code&gt;String&lt;/code&gt;s. Consider this sampling:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Keys for &lt;code&gt;SharedPreferences&lt;/code&gt; are &lt;code&gt;String&lt;/code&gt;s&lt;/li&gt;&lt;li&gt;Keys for &lt;code&gt;Bundle&lt;/code&gt;s are &lt;code&gt;String&lt;/code&gt;s&lt;/li&gt;&lt;li&gt;&lt;code&gt;Intent&lt;/code&gt; extras are &lt;code&gt;Bundle&lt;/code&gt;s, and hence, if you want to include any extras or retrieve them from &lt;code&gt;Intent&lt;/code&gt;s, you use their &lt;code&gt;String&lt;/code&gt; keys to work with them. Ditto with &lt;code&gt;Fragment&lt;/code&gt; arguments&lt;/li&gt;&lt;li&gt;&lt;code&gt;Intent&lt;/code&gt; and &lt;code&gt;IntentFilter&lt;/code&gt; actions (and categories) are &lt;code&gt;String&lt;/code&gt;s themselves&lt;/li&gt;&lt;li&gt;. . .&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I used to deal with these the lazy way: Declare the keys as &lt;code&gt;public static&lt;/code&gt; where they are first used (or where they &quot;belong&quot; logically) and refer to them from wherever they are needed in the code. Examples of the class that is the logical owner might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The class that broadcasts an &lt;code&gt;Intent&lt;/code&gt;&lt;/li&gt;&lt;li&gt;The class that creates or sends a non-broadcast &lt;code&gt;Intent&lt;/code&gt; (this might be an &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Service&lt;/code&gt; for example)&lt;/li&gt;&lt;li&gt;The class that creates a &lt;code&gt;SharedPreference&lt;/code&gt; for editing&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, I quickly found out that often it is not possible to cleanly define these keys as belonging to a particular class. Further, since you might end up with a handful of extras, qualifying the class name becomes tedious - more so since it is likely that Activities or Services can have quite long names. How readable is this snippet?&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;basic-example&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;if(AbstractBaseLiveModeActivity.ACTION_LIVE_UPDATE.equals(intent.getAction())){&lt;br /&gt;    Bundle extras = intent.getExtras();&lt;br /&gt;    if(extras.containsKey(AbstractBaseLiveModeActivity.EXTRA_LIVE_UPDATE_TIMESTAMP)){&lt;br /&gt;        long timestamp = extras.getLong(AbstractBaseLiveModeActivity.EXTRA_LIVE_UPDATE_TIMESTAMP);&lt;br /&gt;        // Do something with timestamp here&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Constants Almighty&lt;/h3&gt;&lt;p&gt;One common solution to this problem is to put everything into one &quot;God&quot; object called &lt;code&gt;Constants&lt;/code&gt; or whatever, and prefix the constant names with &lt;code&gt;EXTRA_&lt;/code&gt;, &lt;code&gt;ACTION_&lt;/code&gt; or other such descriptive characters to keep them distinct.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class Constants{&lt;br /&gt;    private Constants(){}&lt;br /&gt;&lt;br /&gt;    public static final String ACTION_LIVE_UPDATE = &quot;com.myawesomeapp.action.LIVE_UPDATE&quot;;&lt;br /&gt;    // ...&lt;br /&gt;&lt;br /&gt;    public static final String EXTRA_LIVE_UPDATE_TIMESTAMP = &quot;com.myawesomeapp.extra.LIVE_UPDATE_TIMESTAMP&quot;;&lt;br /&gt;    // ...&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we&#39;ve solved the readability problem since we just qualify the constant names with &lt;code&gt;Constant.&lt;/code&gt; So, all&#39;s well, right?&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;disadvantages&quot;&gt;&lt;/a&gt;&lt;strong&gt;Wrong!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The problem with this approach is as the number of extras, actions and preference keys increases, the &lt;code&gt;Constants&lt;/code&gt; class quickly becomes unmanageable. Also, having to use the &lt;code&gt;ACTION_&lt;/code&gt; and &lt;code&gt;EXTRA_&lt;/code&gt; prefixes hinders usability with some IDE&#39;s. For example, with Eclipse, even if you know that you want &lt;code&gt;EXTRA_LIVE_UPDATE_TIMESTAMP&lt;/code&gt;, you are forced to type the first six characters without which the code assist will not be able to filter only the extras.&lt;/p&gt;&lt;p&gt;Try using Eclipse to find a particular action or extra from the &lt;code&gt;Intent&lt;/code&gt; class if you want to see a real-world example of what I mean.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;split-constant-files&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Split it up into distinct constant files&lt;/h3&gt;&lt;p&gt;Here&#39;s what I do to keep my code free of such stutter. I simply split up the &quot;God&quot; &lt;code&gt;Constants&lt;/code&gt; class into several smaller, easier-to-manage constants classes. Like so:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class Extras{&lt;br /&gt;    private Extras(){}&lt;br /&gt;&lt;br /&gt;    private static String createExtra(String suffix){&lt;br /&gt;        return Constants.NAMESPACE_PREFIX + &quot;.extra.&quot;+suffix; //NAMESPACE_PREFIX could be &quot;com.myawesomeapp&quot;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static final String LIVE_UPDATE_TIMESTAMP = createExtra(&quot;LIVE_UPDATE_TIMESTAMP&quot;);&lt;br /&gt;    public static final String LIVE_UPDATE_VALUE = createExtra(&quot;LIVE_UPDATE_VALUE&quot;);&lt;br /&gt;    public static final String FRIEND_ID = createExtra(&quot;FRIEND_ID&quot;);&lt;br /&gt;    // ...&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Broadcasts{&lt;br /&gt;    private Broadcasts(){}&lt;br /&gt;&lt;br /&gt;    private static String createBroadcast(String suffix){&lt;br /&gt;        return Constants.NAMESPACE_PREFIX + &quot;.broadcast.&quot;+suffix; //NAMESPACE_PREFIX could be &quot;com.myawesomeapp&quot;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static final String LIVE_UPDATE = createBroadcast(&quot;LIVE_UPDATE&quot;);&lt;br /&gt;    public static final String FRIEND_OFFLINE = createBroadcast(&quot;FRIEND_OFFLINE&quot;);&lt;br /&gt;    // ...&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Actions{&lt;br /&gt;    private Actions(){}&lt;br /&gt;&lt;br /&gt;    private static String createAction(String suffix){&lt;br /&gt;        return Constants.NAMESPACE_PREFIX + &quot;.action.&quot;+suffix; //NAMESPACE_PREFIX could be &quot;com.myawesomeapp&quot;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static final String JOIN_CHAT = createAction(&quot;JOIN_CHAT&quot;);&lt;br /&gt;    // ...&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could create classes for Categories, Preference Keys and so on. Note that I differentiate between Broadcasts and Actions because although they are both Intents, they are logically very different. Now, &lt;a href=&quot;#basic-example&quot;&gt;this code snippet&lt;/a&gt; changes to:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;if(Broadcasts.LIVE_UPDATE.equals(intent.getAction())){&lt;br /&gt;    Bundle extras = intent.getExtras();&lt;br /&gt;    if(extras.containsKey(Extras.LIVE_UPDATE_TIMESTAMP)){&lt;br /&gt;        long timestamp = extras.getLong(Extras.LIVE_UPDATE_TIMESTAMP);&lt;br /&gt;        // Do something with timestamp here&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which code snippet would your rather see, especially six months from now when you have to fix a bug? Also note that we&#39;ve made it far more easy to find the exact action or extra that we want using our IDEs.&lt;br&gt;&lt;/p&gt;&lt;h3&gt;Wait, what about constants in XMLs?&lt;/h3&gt;&lt;p&gt;Glad you asked. In android, many of these constants are used not only in Java code, but also from XML files.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Preference keys can be referenced in &lt;a href=&quot;http://developer.android.com/guide/topics/ui/settings.html#DefiningPrefs&quot;&gt;preferences XML&lt;/a&gt; files via the &lt;code&gt;&amp;lt;PreferenceScreen&amp;gt;&lt;/code&gt; element.&lt;/li&gt;&lt;li&gt;Intents can be declared in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. This means, the &lt;code&gt;Intent&lt;/code&gt; action and categories can be referenced from the manifest.&lt;/li&gt;&lt;li&gt;&lt;code&gt;BroadcastReceiver&lt;/code&gt;s can be declared in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. The &lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt; action and categories are referenced here.&lt;/li&gt;&lt;li&gt;. . .&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This presents a problem since we end up duplicating the constants here. We cannot use our &lt;code&gt;Broadcasts.LIVE_UPDATE&lt;/code&gt; constant in XML, so we tend to repeat the constant value:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;br /&gt;    &amp;lt;action android:name=&quot;com.myawesomeapp.broadcast.LIVE_UPDATE&quot;/&amp;gt;&lt;br /&gt;&amp;lt;/intent-filter&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is not good. Any change to any constant involves updating it at multiple places. What&#39;s more, these issues are not caught at compile time and can be hard to debug.&lt;br&gt;&lt;/p&gt;&lt;h3&gt;Using String resources to avoid duplication&lt;/h3&gt;&lt;p&gt;One way to avoid constant literal duplication issue explained in the previous section is to use &lt;a href=&quot;http://developer.android.com/guide/topics/resources/string-resource.html&quot;&gt;string resources&lt;/a&gt;. You are already using string resources for a variety of strings in your Android app. (Wait, you aren&#39;t? I strongly suggest you start doing so right now). All you need to do is add the constants as additional string resources. &lt;/p&gt;&lt;p&gt;To keep things clean, you could keep these constants in their own file under &lt;code&gt;values/&lt;/code&gt; folder - for example &lt;code&gt;constants.xml&lt;/code&gt;. In there, you could add&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;resources&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Broadcast Actions --&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;broadcast_live_update&quot;&amp;gt;com.myawesomeapp.broadcast.LIVE_UPDATE&amp;lt;/string&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;broadcast_friend_offline&quot;&amp;gt;com.myawesomeapp.broadcast.FRIEND_OFFLINE&amp;lt;/string&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Intent Extras --&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;extra_live_update_timestamp&quot;&amp;gt;com.myawesomeapp.extra.LIVE_UPDATE_TIMESTAMP&amp;lt;/string&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;extra_live_update_value&quot;&amp;gt;com.myawesomeapp.extra.LIVE_UPDATE_VALUE&amp;lt;/string&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;extra_friend_id&quot;&amp;gt;com.myawesomeapp.extra.FRIEND_ID&amp;lt;/string&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Preference Keys --&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;pref_key_update_interval&quot;&amp;gt;UPDATE_INTERVAL&amp;lt;/string&amp;gt;&lt;br /&gt;    &amp;lt;string name=&quot;pref_key_theme&quot;&amp;gt;THEME&amp;lt;/string&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/resources&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, you could access these values from XML as follows:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;br /&gt;    &amp;lt;action android:name=&quot;@string/broadcast_live_update&quot;/&amp;gt;&lt;br /&gt;&amp;lt;/intent-filter&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;Preference &lt;br /&gt;    android:key=&quot;@string/pref_key_update_interval&quot;&lt;br /&gt;    ... /&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And so on. In Java code, you&#39;d access these as:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;if(getString(R.string.broadcast_live_update).equals(intent.getAction())){&lt;br /&gt;    // ...&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;mSharedPref.getLong(getString(R.string.pref_key_update_interval));&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Unfortunately, this solution has all the disadvantages I mentioned in an &lt;a href=&quot;#disadvantages&quot;&gt;earlier section&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;Your &lt;code&gt;constants.xml&lt;/code&gt; will quickly become a monolithic clutter. This can be addressed by creating a separate XML file for each type of constant - like &lt;code&gt;broadcasts.xml&lt;/code&gt;, &lt;code&gt;pref_keys.xml&lt;/code&gt; etc. Even if you do that, you will still be accessing all the resources using &lt;code&gt;@string/blah&lt;/code&gt; and &lt;code&gt;R.string.blah&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Also, IDE content assist is still a problem. Your resource names will need to be prefixed with &lt;code&gt;action_&lt;/code&gt; or &lt;code&gt;broadcast_&lt;/code&gt; or &lt;code&gt;pref_key_&lt;/code&gt; etc and finding the key you need could be frustrating.&lt;br&gt;&lt;/p&gt;&lt;h3&gt;A workable strategy&lt;/h3&gt;&lt;p&gt;Here&#39;s a strategy I follow to decide how I should declare these constants:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For preference keys, prefer string resources. This is because you are most likely to be building your Settings screens with XML anyway.&lt;/li&gt;&lt;li&gt;For all other key constants, prefer &lt;a href=&quot;#split-constant-files&quot;&gt;split constant files&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Only if you need to use these from XML, declare them as string resources.&lt;/li&gt;&lt;/ul&gt;</description>
        <pubDate>Mon, 18 Feb 2013 13:30:00 +0530</pubDate>
        <link>/blog/2013/02/18/android-constants-preference-keys/</link>
        <guid isPermaLink="true">/blog/2013/02/18/android-constants-preference-keys/</guid>
        
        <category>technique</category>
        
        <category>programming</category>
        
        <category>constants</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Android: Passing an arbitrary object to a custom View</title>
        <description>&lt;p&gt;So, I came across a situation where I wanted to create a custom &lt;code&gt;View&lt;/code&gt; in Android (let&#39;s call it &lt;code&gt;MyAwesomeView&lt;/code&gt;). I had to work with a couple of constraints:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;I have to be able to pass in an additional object to &lt;code&gt;MyAwesomeView&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;MyAwesomeView&lt;/code&gt; should also be usable from XML.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;MyAwesomeView&lt;/code&gt; should be distinct from the application itself - i.e., it should be possible to distribute the &lt;code&gt;MyAwesomeView&lt;/code&gt; as a library.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To elaborate a bit on the &quot;pass in an additional object&quot; part: &lt;code&gt;View&lt;/code&gt; provides three standard constructors using which you can pass in &lt;/p&gt;&lt;ul&gt;&lt;li&gt;a &lt;code&gt;Context&lt;/code&gt;, &lt;/li&gt;&lt;li&gt;an &lt;code&gt;AttributeSet&lt;/code&gt; and &lt;/li&gt;&lt;li&gt;an &lt;code&gt;int&lt;/code&gt; representing the style.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I want to also pass in a &lt;a href=&quot;https://github.com/chrisbanes/Android-BitmapCache&quot;&gt;&lt;code&gt;BitmapCache&lt;/code&gt;&lt;/a&gt; object since &lt;code&gt;MyAwesomeView&lt;/code&gt; uses lots of &lt;code&gt;Bitmap&lt;/code&gt;s and I don&#39;t want to encounter the dreaded &lt;code&gt;OutOfMemoryError&lt;/code&gt; that goes hand in hand with decoding large bitmaps in an Android app. &lt;code&gt;MyAwesomeView&lt;/code&gt; decodes a bitmap only if it is not already present in the cache.&lt;/p&gt;&lt;p&gt;The second constraint makes things really difficult. It is possible to pass in additional &quot;configuration&quot; information to a &lt;code&gt;View&lt;/code&gt; by &lt;a href=&quot;http://developer.android.com/training/custom-views/create-view.html#customattr&quot;&gt;creating custom attributes&lt;/a&gt;.  However, this obviously cannot be used to pass in an object like a &lt;code&gt;BitmapCache&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;Augmenting the &lt;code&gt;Context&lt;/code&gt; object with additional information&lt;/h3&gt;&lt;p&gt;This solution I came across is as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an interface &lt;code&gt;BitmapCacheProvider&lt;/code&gt; with a single method &lt;code&gt;provideBitmapCache()&lt;/code&gt;;&lt;/li&gt;&lt;li&gt;Make your &lt;code&gt;Activity&lt;/code&gt; class implement the interface defined in step 1. Override the interface method to return an appropriate &lt;code&gt;BitmapCache&lt;/code&gt; object.&lt;/li&gt;&lt;li&gt;In the constructor of &lt;code&gt;MyAwesomeView&lt;/code&gt;, check to see if the context object passed in to implements the &lt;code&gt;BitmapCacheProvider&lt;/code&gt; interface. If it does - we&#39;re good. If not, then fail fast (or disable cacheing - whatever works for you).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In code, here&#39;s what this would look like:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;/**&lt;br /&gt; * Interface to be implemented by the Context (Activity etc) in which `MyAwesomeView` runs&lt;br /&gt; */&lt;br /&gt;public interface BitmapCacheProvider{&lt;br /&gt;    BitmapCache provideBitmapCache();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * An example of an Activity that implements BitmapCacheProvider&lt;br /&gt; */&lt;br /&gt;&lt;br /&gt;public class MyActivity extends Activity implements BitmapCacheProvider{&lt;br /&gt;    //... Life-cycle methods of the Activity here&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public BitmapCache provideBitmapCache(){&lt;br /&gt;        //Get your instance of bitmapcache here - probably from your Application&lt;br /&gt;        BitmapCache bitmapCache = ...;&lt;br /&gt;        return bitmapCache;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Custom View that uses an additional object (BitmapCache) for its configuration.&lt;br /&gt; */&lt;br /&gt;public class MyAwesomeView extends View{&lt;br /&gt;    private BitmapCache mBitmapCache;&lt;br /&gt;&lt;br /&gt;    public MyAwesomeView(Context context){&lt;br /&gt;        init(context, null, 0);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public MyAwesomeView(Context context, AttributeSet attrs){&lt;br /&gt;        init(context, attrs, 0);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public MyAwesomeView(Context context, AttributeSet attrs, int style){&lt;br /&gt;        init(context, attrs, style);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void init(Context context, AttributeSet attrs, int style){&lt;br /&gt;        try{&lt;br /&gt;            /*&lt;br /&gt;             * Try casting the contex to BitmapCacheProvider. &lt;br /&gt;             * &lt;br /&gt;             * If the required interface is not implemented, &lt;br /&gt;             * it&#39;ll throw a ClassCastException&lt;br /&gt;             */&lt;br /&gt;            mBitmapCache = ((BitmapCacheProvider) context).provideBitmapCache();&lt;br /&gt;        } catch(ClassCastException e){&lt;br /&gt;             throw new ClassCastException(context.toString()&lt;br /&gt;                    + &quot; must implement BitmapCacheProvider&quot;);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        //At this point, we have the BitmapCacheObject which we can use for further processing.&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Conclusion:&lt;/h3&gt;&lt;p&gt;What we saw in this post was how it is possible to create a custom &lt;code&gt;View&lt;/code&gt; in Android, that can take in an arbitrary object in its constructor - and still be usable from XML. Admittedly, it is a bit round-about, but it has its benefits. Here are a few other points worth considering if you are following this approach:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;In this example, I just augmented the main &lt;code&gt;Activity&lt;/code&gt; with the desired &lt;code&gt;interface&lt;/code&gt;, but you might need to do this for other classes. Basically, the &lt;code&gt;Context&lt;/code&gt; that is passed in to the custom &lt;code&gt;View&lt;/code&gt; constructor must be enhanced to implement the interface. What this context is depends on how you are including the custom &lt;code&gt;View&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;You might argue that the BitmapCache should be part of the custom &lt;code&gt;View&lt;/code&gt; and not passed in to it by the application. This depends on the use case. If you have multiple custom Views that require Bitmap cacheing (as is the case with my app), it probably makes sense for the app to maintain the cache. We might not want too maintain too many caches lest the cache overhead cancels out any benefits we derive from having the cache in the first place!&lt;/li&gt;&lt;/ul&gt;</description>
        <pubDate>Fri, 01 Feb 2013 09:34:00 +0530</pubDate>
        <link>/blog/2013/02/01/android-passing-arbitrary-object-to/</link>
        <guid isPermaLink="true">/blog/2013/02/01/android-passing-arbitrary-object-to/</guid>
        
        <category>custom-view</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Android: is onDestroy the new onStop?</title>
        <description>&lt;p&gt;Conventional Android development logic dictates that if there is some action you want to perform (or rather, stop performing) when your &lt;code&gt;Activity&lt;/code&gt; is no longer visible to the user, do it in &lt;code&gt;onStop()&lt;/code&gt;. Likewise, if there is some action you want to restart performing when the user restarts interacting with your &lt;code&gt;Activity&lt;/code&gt;, do it in &lt;code&gt;onStart()&lt;/code&gt;. The disadvantage of this approach, of course, is that it wouldn&#39;t play well with device orientation changes. &lt;/p&gt;&lt;p&gt;This post explores a couple of solutions to this problem, and concludes that there are cases where one has no choice but to postpone the actions that would be ideally taken in &lt;code&gt;onStop()&lt;/code&gt;, to &lt;code&gt;onDestroy()&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;A trivial (incorrect) example&lt;/h3&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public TrivialIncorrectActivity extends Activity{&lt;br /&gt;&lt;br /&gt;    //onCreate() and other life-cycle overrides like onResume() go here ...&lt;br /&gt;&lt;br /&gt;    @Override public void onStart(){&lt;br /&gt;        super.onStart();&lt;br /&gt;        startMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override public void onStop(){&lt;br /&gt;        super.onStop();&lt;br /&gt;        stopMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // ... Other life-cycle overrides like onDestroy() go here&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example is incorrect. Every time the user rotates the device, your app would stop making a REST call and then again start making the call. Not good at all.&lt;/p&gt;&lt;h3&gt;&lt;code&gt;setRetainInstance&lt;/code&gt; to the rescue . . .&lt;/h3&gt;&lt;p&gt;API 11 introduced the Fragment API, and along with it, the &lt;a href=&quot;http://developer.android.com/reference/android/app/Fragment.html#setRetainInstance(boolean)&quot;&gt;setRetainInstance&lt;/a&gt; method, which is also usable with older versions of Android by means of the &lt;a href=&quot;http://developer.android.com/tools/extras/support-library.html&quot;&gt;support library&lt;/a&gt;. You can go through the documentation to understand the effect of a &lt;code&gt;setRetainInstance(true)&lt;/code&gt;. Essentially, when a configuration change is happening, even though the hosting &lt;code&gt;Activity&lt;/code&gt; is being re-created, the &lt;code&gt;Fragment&lt;/code&gt; instance is not destroyed.&lt;/p&gt;&lt;p&gt;So, this allows us to improve upon our previous example. &lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public IncorrectRotationTolerantActivity extends FragmentActivity{&lt;br /&gt;&lt;br /&gt;    private static final String TAG_RETAIN_FRAGMENT = &quot;RetainFragment&quot;;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onCreate(savedInstanceState);&lt;br /&gt;        if(savedInstanceState == null){&lt;br /&gt;            getSupportFragmentManager().beginTransaction()&lt;br /&gt;                .add(IncorrectRetainFragment.newInstance(), TAG_RETAIN_FRAGMENT).commit();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class IncorrectRetainFragment extends Fragment{&lt;br /&gt;&lt;br /&gt;    public IncorrectRetainFragment(){}&lt;br /&gt;&lt;br /&gt;    public static IncorrectRetainFragment newInstance(){&lt;br /&gt;        IncorrectRetainFragment frag = new IncorrectRetainFragment();&lt;br /&gt;        frag.setRetainInstance(true);&lt;br /&gt;        return frag;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onStart() {&lt;br /&gt;        super.onStart();&lt;br /&gt;        startMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onStop() {&lt;br /&gt;        super.onStop();&lt;br /&gt;        stopMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code snippet still doesn&#39;t do what we want it to do. It does &lt;strong&gt;not&lt;/strong&gt; prevent re-making that REST call during orientation changes. Why?&lt;/p&gt;&lt;p&gt;Because, &lt;code&gt;setRetainInstance&lt;/code&gt; doesn&#39;t prevent a Fragment&#39;s &lt;code&gt;onStop()&lt;/code&gt; from being called - it just prevents &lt;code&gt;onDestroy()&lt;/code&gt; from being called. So, even if you ask for a Fragment instance to be retained across configuration changes, the &lt;code&gt;onStop()&lt;/code&gt; method of the Fragment is always still called when the device is rotated.&lt;/p&gt;&lt;h3&gt;&lt;code&gt;onDestroy()&lt;/code&gt; is the new &lt;code&gt;onStop()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;To fix the problem, postpone stopping the REST call to the &lt;code&gt;onDestroy()&lt;/code&gt; of the Fragment. Similarly, start making the call in &lt;code&gt;onCreate()&lt;/code&gt; instead of in &lt;code&gt;onStart()&lt;/code&gt;, since &lt;code&gt;onCreate()&lt;/code&gt; is not called when the device is rotated, but &lt;code&gt;onStart()&lt;/code&gt; is.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public RotationTolerantActivity extends FragmentActivity{&lt;br /&gt;&lt;br /&gt;    private static final String TAG_RETAIN_FRAGMENT = &quot;RetainFragment&quot;;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onCreate(savedInstanceState);&lt;br /&gt;        if(savedInstanceState == null){&lt;br /&gt;            getSupportFragmentManager().beginTransaction()&lt;br /&gt;                .add(RetainFragment.newInstance(), TAG_RETAIN_FRAGMENT).commit();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class RetainFragment extends Fragment{&lt;br /&gt;&lt;br /&gt;    public RetainFragment(){}&lt;br /&gt;&lt;br /&gt;    public static RetainFragment newInstance(){&lt;br /&gt;        RetainFragment frag = new RetainFragment();&lt;br /&gt;        frag.setRetainInstance(true);&lt;br /&gt;        return frag;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onStart(savedInstanceState);&lt;br /&gt;        startMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onDestroy() {&lt;br /&gt;        super.onStop();&lt;br /&gt;        stopMakingThatPeriodicRestCall();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This seems so semantically wrong though. &lt;code&gt;onDestroy()&lt;/code&gt; represents the end of the &lt;em&gt;entire lifetime&lt;/em&gt; of an Activity/Fragment and what we really wanted to do was monitor the &lt;em&gt;visible lifetime&lt;/em&gt;. Also, there is no guarantee that &lt;code&gt;onDestroy()&lt;/code&gt; will ever be called. If you really try out this example on a phone or emulator, chances are that you&#39;ll never see the Rest call being stopped - at least not right away.&lt;/p&gt;&lt;h3&gt;A more correct, more restrictive solution:&lt;/h3&gt;&lt;p&gt;There exists another solution to this problem - but it works only on API 11 and later, because it uses methods introduced in API 11 - &lt;code&gt;isChangingConfigurations()&lt;/code&gt; and &lt;code&gt;getChangingConfigurations()&lt;/code&gt;.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public RotationTolerantActivity extends FragmentActivity{&lt;br /&gt;&lt;br /&gt;    private boolean mRotated;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onCreate(savedInstanceState);&lt;br /&gt;        Boolean nonConfigState =&lt;br /&gt;            (Boolean)getLastCustomNonConfigurationInstance();&lt;br /&gt;        if (nonConfigState == null) {&lt;br /&gt;            mRotated = false;&lt;br /&gt;        } else {&lt;br /&gt;            mRotated = nonConfigState.booleanValue();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override &lt;br /&gt;    public void onStart(){&lt;br /&gt;        super.onStart();&lt;br /&gt;        if(!mRotated){&lt;br /&gt;            startMakingThatPeriodicRestCall();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onStop(){&lt;br /&gt;        super.onStop();&lt;br /&gt;        mRotated = false;&lt;br /&gt;        if (isChangingConfigurations()) {&lt;br /&gt;            int changingConfig = getChangingConfigurations();&lt;br /&gt;            if ((changingConfig &amp;amp; ActivityInfo.CONFIG_ORIENTATION) == ActivityInfo.CONFIG_ORIENTATION) {&lt;br /&gt;                mRotated = true;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        if(!mRotated){&lt;br /&gt;               stopMakingThatPeriodicRestCall();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Object onRetainCustomNonConfigurationInstance() {&lt;br /&gt;            return mRotated ? Boolean.TRUE : Boolean.FALSE;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This solution is semantically correct, and works as expected. However, &lt;strong&gt;it only works on API 11 and higher, &lt;em&gt;even though we extend &lt;code&gt;FragmentActivity&lt;/code&gt; from the support library&lt;/em&gt; &lt;/strong&gt;.&lt;/p&gt;&lt;h3&gt;Bonus: Why &lt;code&gt;onStop()&lt;/code&gt; and not &lt;code&gt;onPause()&lt;/code&gt;?&lt;/h3&gt;&lt;p&gt;The keen reader would have observed that this post talks about stopping un-needed tasks in &lt;code&gt;onStop()&lt;/code&gt;and not &lt;code&gt;onPause()&lt;/code&gt; - even though &lt;code&gt;onPause()&lt;/code&gt; is the only one of these methods that is guaranteed to be called. Remember that after &lt;code&gt;onPause()&lt;/code&gt; is called, the process could be killed in order to reclaim memory and thus &lt;code&gt;onStop()&lt;/code&gt; and &lt;code&gt;onDestroy()&lt;/code&gt; might never be called.&lt;/p&gt;&lt;p&gt;Yet, this entire post insists on using &lt;code&gt;onStop()&lt;/code&gt; to stop un-needed tasks. The reason for this lies in the technique used in my library &lt;a href=&quot;https://github.com/curioustechizen/android-app-pause&quot;&gt;android-app-pause&lt;/a&gt;. Unfortunately, this library in its current form does not handle device orientation changes correctly. This will be fixed in a future release though.&lt;/p&gt;</description>
        <pubDate>Tue, 29 Jan 2013 10:00:00 +0530</pubDate>
        <link>/blog/2013/01/29/android-ondestroy-is-new-onstop/</link>
        <guid isPermaLink="true">/blog/2013/01/29/android-ondestroy-is-new-onstop/</guid>
        
        <category>orientation</category>
        
        <category>life-cycle</category>
        
        <category>programming</category>
        
        <category>onStop</category>
        
        <category>android</category>
        
        <category>onDestroy</category>
        
        
      </item>
    
  </channel>
</rss>
