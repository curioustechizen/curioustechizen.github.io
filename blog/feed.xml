<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curious Techizen</title>
    <description>A place for discussing anything tech. Old and new. Experiences and Opinions. Questions and rants. Primarily programming-related, but not exclusively.</description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 07 Jan 2020 21:12:47 +0100</pubDate>
    <lastBuildDate>Tue, 07 Jan 2020 21:12:47 +0100</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Android DiffUtil Part 2: List Diffs on other platforms</title>
        <description>&lt;p&gt;This is the second post in a series that looks into calculating diffs between two lists on Android. You can read &lt;a href=&quot;/blog/2020/01/06/diff-util-part1/&quot;&gt;Part 1 here&lt;/a&gt;. In this post, we will look at how other platforms handle list diffing.&lt;/p&gt;

&lt;h2&gt;Swift Standard Library&lt;/h2&gt;

&lt;p&gt;The Swift standard library has a &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200721-difference&quot;&gt;&lt;code&gt;difference(from:)&lt;/code&gt;&lt;/a&gt; method on &lt;code&gt;BidirectionalCollection&lt;/code&gt; protocol that returns a &lt;code&gt;CollectionDifference&lt;/code&gt; result. &lt;a href=&quot;https://www.fivestars.blog/code/swift-5-1-collection-diffing.html&quot;&gt;This blog post&lt;/a&gt; does a deep dive into this API in Swift.&lt;/p&gt;

&lt;p&gt;It looks like this facility is intended as a general purpose list diff API, not specific to UI programming. Remember, it is in the &lt;em&gt;standard library&lt;/em&gt; so it can be used in backend server programming, for example.&lt;/p&gt;

&lt;p&gt;Some notable features of this API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most interesting feature is the return type: &lt;code&gt;CollectionDifference&lt;/code&gt;. This API provides you a way to iterate through all the diff operations, or even to only pick the insertions (or removals). This is different from how Android does it. More on this in a minute.&lt;/li&gt;
&lt;li&gt;By default, it does not detect moves, but there&amp;#39;s an &lt;code&gt;inferringMoves()&lt;/code&gt; method on &lt;code&gt;CollectionDifference&lt;/code&gt; that you can use if you want to do this&lt;/li&gt;
&lt;li&gt;It uses equality by default for the comparison, but you can customize how the comparison occurs using &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection/3200722-difference&quot;&gt;&lt;code&gt;difference(from: by:)&lt;/code&gt;&lt;/a&gt; variant. Here you pass in a closure that returns a &lt;code&gt;Bool&lt;/code&gt; so you can use whatever logic you wish to compare the elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;CollectionDifference&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;CollectionDifference&lt;/code&gt; provides in itself a Collection of &lt;code&gt;CollectionDifference.Change&lt;/code&gt; - which is an enum with 2 values: &lt;code&gt;.insert&lt;/code&gt; and &lt;code&gt;.remove&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.insert&lt;/code&gt; provides you with an &lt;code&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;final list&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.remove&lt;/code&gt; provides you with an &lt;code&gt;element&lt;/code&gt; and its offset in the &lt;em&gt;original list&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;associatedWith&lt;/code&gt; parameter of the enums inform you about moves&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#39;s no concept of &amp;quot;changes&amp;quot; in this API - i.e., it does not tell you if an item retained its identity but did not retain equality.&lt;/p&gt;

&lt;p&gt;I could not find a way to convert positions between old and new lists, but I&amp;#39;m not sure if it is ever required when using this API in practice.&lt;/p&gt;

&lt;h2&gt;Swift Apple platforms&lt;/h2&gt;

&lt;p&gt;We started this series with an example of how Android&amp;#39;s RecyclerView animates between 2 lists using DiffUtil. It should come as no surprise that Apple&amp;#39;s UI frameworks have similar capabilities too.&lt;/p&gt;

&lt;p&gt;It has always been possible to achieve this on Apple platforms but it has been verbose and error-prone (frequently giving rise to the Swift equivalent of &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;). Recent API improvements have greatly enhanced the developer ergonomics here.&lt;/p&gt;

&lt;p&gt;The headline API is &lt;code&gt;UITableViewDiffableDataSource&lt;/code&gt; and friends (quite a mouthful!). This is completely out of my comfort zone so I&amp;#39;ll point you to &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/215&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/220&quot;&gt;talks&lt;/a&gt; from WWDC (there are also PDF slides available) if you want to learn more. I will point out though, that the items participating in this API need to be &lt;code&gt;Hashable&lt;/code&gt;. This is how the framework decides that items have &amp;quot;changed&amp;quot;. It fulfils the role of &lt;code&gt;areContentsTheSame()&lt;/code&gt; from Android&amp;#39;s DiffUtil.&lt;/p&gt;

&lt;h2&gt;Flutter&lt;/h2&gt;

&lt;p&gt;I could not find any official API for List Diffs in Flutter. However, there&amp;#39;s a third party library that is inspired by Android&amp;#39;s DiffUtils. It is called &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list&quot;&gt;AnimatedStreamList&lt;/a&gt;. The relevant files in this repo are &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart&quot;&gt;&lt;code&gt;myers_diff.dart&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/diff_payload.dart&quot;&gt;&lt;code&gt;diff_payload.dart&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of note in this library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It returns a &lt;code&gt;List&amp;lt;Diff&amp;gt;&lt;/code&gt;. In this sense it is similar to the Swift implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Diff&lt;/code&gt; can be one of &lt;code&gt;InsertDiff&lt;/code&gt;, &lt;code&gt;DeleteDiff&lt;/code&gt; or &lt;code&gt;ChangeDiff&lt;/code&gt;. This library does not implement moves.&lt;/li&gt;
&lt;li&gt;Each instance of &lt;code&gt;Diff&lt;/code&gt; includes an &lt;code&gt;index&lt;/code&gt; and a &lt;code&gt;size&lt;/code&gt;. In this respect, it is similar to the Android DiffUtil implementation.&lt;/li&gt;
&lt;li&gt;It uses an &lt;a href=&quot;https://github.com/adithyaxx/animated-stream-list/blob/c5b3b17e8dd0b723e2b3777521924c272580c4bf/lib/src/myers_diff.dart#L5&quot;&gt;&lt;code&gt;Equalizer&lt;/code&gt;&lt;/a&gt; to customize the comparison.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Angular&lt;/h2&gt;

&lt;p&gt;Angular has an &lt;code&gt;IterableDiffer&lt;/code&gt; API that can be used to compute the diff between 2 Iterables. From what I can tell, it is not intended to be used directly by applications, instead it is used internally by the framework (for example, by the &lt;code&gt;NgForOf&lt;/code&gt; directive). &lt;a href=&quot;https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/&quot;&gt;This article&lt;/a&gt; goes into the nuts and bolts of this API.&lt;/p&gt;

&lt;p&gt;The interesting classes are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableDiffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt;: The entry point of the API. Offers the &lt;code&gt;diff&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChanges&quot;&gt;&lt;code&gt;IterableChanges&lt;/code&gt;&lt;/a&gt;: The diff result, which in itself is an Iterable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/api/core/IterableChangeRecord&quot;&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt;&lt;/a&gt;: Each individual update operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;IterableChanges&lt;/code&gt; interface is pretty interesting: it exposes functions to iterate over the changes in a variety of ways (all updates, only additions, only removals etc). The &lt;code&gt;DefaultIterableDiffer&lt;/code&gt; accepts a &lt;code&gt;TrackByFn&lt;/code&gt; argument, which fulfils the role of Android&amp;#39;s &lt;code&gt;DiffUtil.Callback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt; is also interesting: It does not directly state the diff operation. Instead, it contains &lt;code&gt;currentIndex&lt;/code&gt; and &lt;code&gt;previousIndex&lt;/code&gt;. Together, these can be used to decide if an item was added, removed etc. It also fulfils the role of position conversion APIs in Android. &lt;/p&gt;

&lt;p&gt;In practice, you&amp;#39;d probably use the &lt;code&gt;IterableChanges&lt;/code&gt; API to figure out the additions and removals.&lt;/p&gt;

&lt;h2&gt;At a glance&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a table summarizing all the diff APIs across these platforms.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Android&lt;/th&gt;
&lt;th&gt;Swift&lt;/th&gt;
&lt;th&gt;Flutter (3rd party)&lt;/th&gt;
&lt;th&gt;Angular&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Detect Moves&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change payloads&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom comparison&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DiffUtil.Callback&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;difference(from:by:)&lt;/code&gt;, &lt;code&gt;Hashable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Equalizer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TrackByFn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Position conversion&lt;/td&gt;
&lt;td&gt;Methods on &lt;code&gt;DiffResult&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IterableChangeRecord&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;A note about declarative UI frameworks&lt;/h3&gt;

&lt;p&gt;This series of blog posts actually started when I was trying to implement custom animations for a list view on Android. When I started this research, the question I wanted to answer was&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How do declarative UI frameworks deal with allowing custom animations for changes in lists?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that declarative UI frameworks in general receive a UI state and render that state. They don&amp;#39;t have a concept of &amp;quot;previous state&amp;quot; so &amp;quot;this item was removed&amp;quot; animation does not fit into this paradigm.&lt;/p&gt;

&lt;p&gt;So far, I haven&amp;#39;t found an answer to this question!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SwiftUI provides some default animations, but I did not find a way to customize them.&lt;/li&gt;
&lt;li&gt;Flutter has no official APIs for this use case.&lt;/li&gt;
&lt;li&gt;Angular has some APIs that look like they are used internally. I&amp;#39;m way out of my depth about Angular to form any practical opinion about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will be really interesting to see how Jetpack Compose is going to solve this problem!&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After my research for this post, I came to the conclusion that Android&amp;#39;s DiffUtil API is the most flexible of all. It is the lowest level API for exposing the diff operations (the &lt;code&gt;ListUpdateCallback&lt;/code&gt;). All other platforms expose collection-style APIs for this purpose.&lt;/p&gt;

&lt;p&gt;I reckon Android has this low-level API because it plays well together with RecyclerView Adapter API. One can write a wrapper to expose it as a collection-style API.&lt;/p&gt;

&lt;p&gt;That is exactly what we will do in the next post in this series: Look at an example situation where RecyclerView might not be best fit, and instead wrap the &lt;code&gt;ListUpdateCallback&lt;/code&gt; to implement some custom UI.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jan 2020 10:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2020/01/07/diff-util-part2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/07/diff-util-part2/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>What's the big difference? A deep dive into Android DiffUtil</title>
        <description>&lt;p&gt;This is a series of posts that looks into calculating the diffs between two lists on Android. This first post in the series looks at the basics of what the DiffUtil is.&lt;/p&gt;

&lt;h2&gt;What&amp;#39;s DiffUtil?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil&quot;&gt;docs for DiffUtil&lt;/a&gt; describe it as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DiffUtil is a utility class that calculates the difference between two lists and outputs a list of update operations that converts the first list into the second one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The selling point of this utility is it is nicely integrated with RecyclerView such that the following simple series of steps is sufficient to display nice animations for newly added items and disappearing items in the list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;diffResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatchUpdatesTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Given the following data&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While switching back and forth between these 2 lists, this code produces this animation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff_basic.gif&quot; alt=&quot;Basic diff animation&quot; style=&quot;max-height: 512px; max-width: 288px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You could also achieve this effect using the &lt;code&gt;notifyItemXYZ&lt;/code&gt; family of methods on &lt;code&gt;RecyclerView.Adapter&lt;/code&gt;, if you maintain the list of items yourself and mutate it. However, in unidirectional data flow architectures, it is likely that you have an immutable list in your state. In those situations, &lt;code&gt;DiffUtil&lt;/code&gt; is more suitable.&lt;/p&gt;

&lt;h2&gt;DiffUtil API usage in detail&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s dig into how to use the API. Using DiffUtil consists of the following high-level steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You tell the API how to compare items in the list (what constitutes a &amp;quot;removal&amp;quot;? What does a &amp;quot;change&amp;quot; mean?)&lt;/li&gt;
&lt;li&gt;You ask the API to calculate the diff and give you a result&lt;/li&gt;
&lt;li&gt;You use the DiffResult object to get called back for each update operation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;#39;s go through each step in more detail. We&amp;#39;ll use a &lt;code&gt;Player&lt;/code&gt; class like this for this example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 1: Comparing list items&lt;/h3&gt;

&lt;p&gt;DiffUtil tells you what items were removed, added and changed between 2 lists, but how does it know? Android chose to not use &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; for this purpose - instead having you extend a &lt;code&gt;DiffUtil.Callback&lt;/code&gt; class. The relevant methods that you need to override are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;areItemsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;identity comparison&lt;/strong&gt;. In the case of the Player class above, 2 items have the same identity if they have the same name. We don&amp;#39;t care about the score for this comparison&lt;/li&gt;
&lt;li&gt;&lt;code&gt;areContentsTheSame()&lt;/code&gt; - This method is used for &lt;strong&gt;equality comparison&lt;/strong&gt;. In the case of the Player class, 2 items have the same contents if they have the same name and score.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is used to tell you if an item retained the same identity but its contents changed. This can be useful for item change animations (for example, if a user liked a tweet you can animate the heart icon using this feature)&lt;/p&gt;

&lt;p&gt;The entire code for the callback would be&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areItemsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOldListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNewListSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;areContentsTheSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newItemPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 2: Calculating the diff&lt;/h3&gt;

&lt;p&gt;This step is a one-liner&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;diffResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiffUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlayerDiffCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there&amp;#39;s a lot going on behind the scenes. &lt;code&gt;calculateDiff&lt;/code&gt; implements the standard algorithm used for diffing: Eugene Myers diff algorithm. This is also the algorithm used by diff tools like &lt;code&gt;git diff&lt;/code&gt; and text editors. It is not necessary to know the implementation details of this algorithm, but if you are interested, you can go through &lt;a href=&quot;https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DiffUtil can also detect moves. If the position of an item in the list changes, then instead of reporting it as a removal followed by an insertion, DiffUtil can report it as a move from position A to position B. You do this by passing &lt;code&gt;true&lt;/code&gt; to the second argument (&lt;code&gt;detectMoves&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;We will ignore moves for the rest of this series.&lt;/p&gt;

&lt;h3&gt;Step 3: Using the DiffResult&lt;/h3&gt;

&lt;p&gt;This is the step where I found the API to be a bit ... unexpected. I would expect the DiffResult to give me a collection of update operations in the order that they need to be performed (something like a &lt;code&gt;List&amp;lt;DiffOperation&amp;gt;&lt;/code&gt;). Instead, you need to call one of the &lt;code&gt;dispatchUpdatesTo&lt;/code&gt; overloads:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dispatchUpdatesTo(adapter: Adapter)&lt;/code&gt;: This is the one that you&amp;#39;ll probably use 99% of the time. You pass on the results to your existing RecyclerView adapter and you get all those animations automagically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchUpdatesTo(updateCallback: ListUpdateCallback)&lt;/code&gt;: You use this if you want custom animations. In a later post in this series, we&amp;#39;ll look at an example where you might need this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;code&gt;ListUpdateCallback&lt;/code&gt; in detail&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/androidx/recyclerview/widget/ListUpdateCallback.html&quot;&gt;This interface&lt;/a&gt; has the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onChanged(position: Int, count: Int, payload: Any?)&lt;/code&gt;: This is called when DiffUtil detects that &lt;code&gt;count&lt;/code&gt; items have changed starting at &lt;code&gt;position&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onInserted(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code&gt;count&lt;/code&gt; elements have been inserted into the old list starting at &lt;code&gt;position&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRemoved(position: Int, count: Int)&lt;/code&gt;: This is called when DiffUtil determines that &lt;code&gt;count&lt;/code&gt; elements have been removed from the old list starting at &lt;code&gt;position&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some important points to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These methods &lt;strong&gt;atomic&lt;/strong&gt;: the &lt;code&gt;position&lt;/code&gt; argument reported in every method is with reference to the &lt;em&gt;list as it was after the previous step&lt;/em&gt;, not as it was at the beginning of the diff operation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;count&lt;/code&gt; parameter in these methods makes it so that only consecutive similar changes are grouped together, not disjoint ones. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 2 above merits more discussion. To put it another way, if items at position 0 and 2 are deleted, DiffUtil reports it as &amp;quot;Hey item 2 was removed&amp;quot; and &amp;quot;Hey item 0 was removed&amp;quot; as separate callbacks instead of telling you &amp;quot;Hey items 0 and 2 were removed&amp;quot; in a single callback. This follows as a consequence of point 1 because each disjoint operation might have altered the structure of the list.&lt;/p&gt;

&lt;p&gt;The API designed this way allows you to basically endlessly &amp;quot;stream&amp;quot; diff operations from DiffResult to your UI component. This is powerful, but can also have downsides (as we will see in a future post).&lt;/p&gt;

&lt;h4&gt;Position conversions&lt;/h4&gt;

&lt;p&gt;In addition to &lt;code&gt;ListUpdateCallback&lt;/code&gt;, there are 2 additional API&amp;#39;s offered by &lt;code&gt;DiffResult&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;convertOldPositionToNew(oldListPosition: Int)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;convertNewPositionToOld(newListPosition: Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They do what their names suggest. When would you use these? Remember that when one of the ListUpdate callbacks has been dispatched, the number of items in the list might have changed. An item at index &lt;code&gt;i&lt;/code&gt; in the new list might not represent the same item at index &lt;code&gt;i&lt;/code&gt; in the old list (it might not even exist in the old list). This pair of conversion methods is useful in such situations. One example is for animations, where you need to access the same view in both the old and new layouts.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we got an introduction to DiffUtil and how to use it. We also peeked under the hood into &lt;code&gt;ListUpdateCallback&lt;/code&gt;, but we haven&amp;#39;t used it in an example yet.&lt;/p&gt;

&lt;p&gt;In the next post in this series, we will conduct a brief survey of how other platforms handle list diffs.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 16:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2020/01/06/diff-util-part1/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/06/diff-util-part1/</guid>
        
        <category>android</category>
        
        <category>diff</category>
        
        
      </item>
    
      <item>
        <title>The Limits of One-size-fits-all</title>
        <description>&lt;p&gt;At Google I/O 2017, Google announced Android Go, a  configuration of Android that is optimized for entry-level devices. The focus of this initiative is around affordability, limited connectivity and multi-lingual capability. Starting Android O, all devices that have a memory of 1GB or less will ship with this configuration.&lt;/p&gt;

&lt;p&gt;I see this step as sort of an acknowledgement that we are reaching the limits of &amp;quot;one-size-fits-all&amp;quot; mentality we&amp;#39;ve had all these years. It is a refreshing change from the &amp;quot;We have a potential target of a billion users, hence we &lt;strong&gt;must&lt;/strong&gt; make a single app that caters to all&amp;quot;. Android has reached the tipping point (2 billion active users) where that approach no longer scales. In the best case it results in a solution that satisfies one subset of users at the expense of the other. In the worst case it produces something that does not solve the needs of either!&lt;/p&gt;

&lt;p&gt;The requirements and constraints of the developing world are vastly different from that of the developed world. App usage patterns for the same app might differ between the target groups. Localization is about more than translating strings, currency and temperature units. Not all the guidelines about &lt;a href=&quot;https://material.io/guidelines/style/writing.html#&quot;&gt;writing style&lt;/a&gt; are applicable globally. Metaphors do not scale well across languages and cultures.&lt;/p&gt;

&lt;p&gt;Facebook set the ball rolling with the Facebook Lite app. This is a tiny app (&lt;2MB installed size excluding data on my Android 6.0 phone). Compare this with the regular Facebook app that is &gt;70MB at the time of this writing. The Facebook Lite app is also frugal in its mobile data usage.&lt;/p&gt;

&lt;p&gt;YouTube Go seems to be following in the footsteps. They have studied and understood how people use YouTube in developing markets. They have realized that always requiring an internet connection is absurd to the point of being stupid. The peer to peer sharing feature is the killer. Most people were using some shady youtube downloader apps to download YT videos offline, and then sharing it with peers using ShareIt or the like anyway.&lt;/p&gt;

&lt;p&gt;I believe Android Go will act as a turning point in the industry&amp;#39;s approach to global apps. It is no longer taboo to offer multiple flavors of the same app, catering to different target groups. In fact, with Android Go&amp;#39;s Google Play catalog that highlights apps optimized for the entry-level devices, I believe this will become a norm going forward.&lt;/p&gt;

&lt;p&gt;Remember, it is not about how many users you have, but about how useful your app is to those users.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 11:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2017/05/25/one-size-doesnt-fit-all/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/05/25/one-size-doesnt-fit-all/</guid>
        
        <category>next-billion</category>
        
        <category>android-go</category>
        
        
      </item>
    
      <item>
        <title>Java: Value classes and the equals() method</title>
        <description>&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; When overriding &lt;code&gt;equals()&lt;/code&gt; method for a &lt;em&gt;value class&lt;/em&gt; in java, it is preferable to reject instances of sub-classes of this class. In other words, use &lt;code&gt;getClass()&lt;/code&gt; instead of &lt;code&gt;instanceof&lt;/code&gt; for ensuring that the other object is of the correct type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; Exception to Rule 1: If it is likely that the object that will be passed around is an instance of &lt;strong&gt;&lt;em&gt;a proxy of your class&lt;/em&gt;&lt;/strong&gt;, then use &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Deep-dive&lt;/h2&gt;

&lt;p&gt;A lot has been written about &lt;code&gt;equals()&lt;/code&gt; in Java. For me the definitive source has been from &amp;quot;Effective Java 2nd Edition&amp;quot;. Item 8 says &amp;quot;Obey the general contract when overriding equals&amp;quot;.&lt;/p&gt;

&lt;p&gt;However, as a programmer I do not need to remember the recipe provided by Joshua Bloch (well, most of the time). This is because IDEs offer options to auto-generate the &lt;code&gt;equals()&lt;/code&gt; (and a corresponding &lt;code&gt;hashCode()&lt;/code&gt;) methods for me. Mechanisms for creating value classes (like &lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot;&gt;AutoValue&lt;/a&gt; or Kotlin&amp;#39;s &lt;a href=&quot;https://kotlinlang.org/docs/reference/data-classes.html&quot;&gt;data classes&lt;/a&gt;) go one step further by not even requiring you to maintain the equals() method in source code format. &lt;/p&gt;

&lt;p&gt;That said, there are some gotchas to be aware of that crop up from time to time. The point relevant to this post is (I might be para-phrasing it)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not possible to extend an instantiable class and add a field without violating the contract of the equals method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I encourage you to read Joshua Bloch&amp;#39;s explanation of this along with the excellent examples to understand what the contract is and why extending a class might break this contract. Once you understand this concept, Rule 1 is a logical conclusion. If you are comparing an instance of this class with an instance of a sub-class, you want to return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, this is not always feasible. There are cases where the value class is just a crutch for a framework to do its work. The value class that you define serves as the interface between you and the framework, while the framework generates sub-classes of your class to use as a proxy.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;p&gt;That&amp;#39;s a lot of hand-waving! Let&amp;#39;s get to a concrete example, in this case the example which led me to write this blog post in the first place - &lt;a href=&quot;https://realm.io/docs/java/latest/&quot;&gt;Realm&lt;/a&gt;. Realm is an object database for Android. You declare your models as POJOs and you can then use Realm to persist/query them.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how you would define a User model in Realm:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Rest of the class left out for brevity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let&amp;#39;s see what happens when we use the strict interpretation of the &lt;code&gt;equals()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Strict type comparison&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, assume you are writing a test to check whether a &lt;code&gt;User&lt;/code&gt; instance retrieved from Realm is what you expect it to be.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;givenADatabase_whenRetrieveByName_thenReturnsCorrectUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will find that this test fails, even though the instance returned from Realm has the correct &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. Why is this so?&lt;/p&gt;

&lt;h4&gt;Proxy classes&lt;/h4&gt;

&lt;p&gt;This is because the object that Realm returns is an instance of &lt;code&gt;UserRealmProxy&lt;/code&gt; that extends your &lt;code&gt;User&lt;/code&gt; class. Even though the fields that matter for this comparison are the same, the &lt;code&gt;if (!getClass().equals(o.getClass()) return false;&lt;/code&gt; line leads our equals implementation to report that the instances are not equal.&lt;/p&gt;

&lt;p&gt;The fix is of course to be more lenient in checking the types in equals(), with the trade-off that you potentially break the contract of &lt;code&gt;equals()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//lenient type comparison&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Realm is just one example of where a proxy class is used. There is a host of libraries/frameworks that proxy your value classes under the covers. Although the intent is for you as a user of the framework to be largely unaware of the use of these proxies, the peculiar case of &lt;code&gt;equals()&lt;/code&gt; and sub-classes means that at times you need to be aware of these implementation details.&lt;/p&gt;

&lt;h4&gt;Aside: Order of Expected and Actual in tests&lt;/h4&gt;

&lt;p&gt;When I got started with unit testing, I often did not care about the order in which I passed the &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; in tests. I did not differentiate between &lt;code&gt;assertEquals(expected, actual)&lt;/code&gt; and &lt;code&gt;assertEquals(actual, expected)&lt;/code&gt;. The worst that could happen was that I would be slightly confused by the JUnit error message sometimes, but my tests that should pass would still pass, and those that should fail would still fail.&lt;/p&gt;

&lt;p&gt;However, in the example above, you will notice that if you switch the positions of &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt;, the result of the test will be different. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXPECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test fails. This is because the &lt;code&gt;UserRealmProxy&lt;/code&gt; class has extended &lt;code&gt;User&lt;/code&gt; and overridden &lt;code&gt;equals()&lt;/code&gt; in a way that breaks symmetry.&lt;/p&gt;

&lt;p&gt;This is one of the reasons why the contract of &lt;code&gt;equals&lt;/code&gt; says that it should be symmetric, i.e., &lt;code&gt;x.equals(y)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; &lt;strong&gt;if and only if&lt;/strong&gt; &lt;code&gt;y.equals(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;A survey of equals-generators&lt;/h2&gt;

&lt;p&gt;We will now survey existing tools that generate &lt;code&gt;equals()&lt;/code&gt; for you and see how they handle type-checks.&lt;/p&gt;

&lt;h4&gt;Eclipse&lt;/h4&gt;

&lt;p&gt;At the time of this writing, Eclipse Neon, in the wizard to &amp;quot;Generate hashCode() and equals()&amp;quot; has a checkbox &amp;quot;Use &amp;#39;instanceof&amp;#39; to compare types&amp;quot;. If you check this checkbox that Eclipse generates a strict type comparison, else it generates the more lenient one.&lt;/p&gt;

&lt;h4&gt;IntelliJ IDEs&lt;/h4&gt;

&lt;p&gt;IntelliJ IDEA, Android Studio and other similar IDEs have a checkbox &amp;quot;Accept subclasses as parameters to equals() method&amp;quot;. Checking this checkbox will generate the &lt;em&gt;lenient&lt;/em&gt; type comparison, while the default (un-checking it) will generate the strict type comparison&lt;/p&gt;

&lt;h4&gt;Kotlin data classes&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates bytecode equivalent to the following Java code&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intrinsics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;areEqual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it generates an &lt;code&gt;instanceof&lt;/code&gt; check but this &lt;strong&gt;does not violate the contract of equals()&lt;/strong&gt;. This is because in Kotlin (as of v1.1.0), data classes cannot be sub-classed.&lt;/p&gt;

&lt;h4&gt;Auto-Value&lt;/h4&gt;

&lt;p&gt;With this declaration using AutoValue&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@AutoValue&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AutoValue_UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated code (snipped to show only relevant portions) is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoValue_UserAV&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...snip...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two points to observe:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The generated &lt;code&gt;equals()&lt;/code&gt; uses the lenient &lt;code&gt;instanceof&lt;/code&gt; for type comparison&lt;/li&gt;
&lt;li&gt;The generated class is declared &lt;code&gt;final&lt;/code&gt;, hence it is guaranteed that there are no sub-classes which means the contract of &lt;code&gt;equals()&lt;/code&gt; is not violated.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In a majority of the cases, tools that generate &lt;code&gt;equals()&lt;/code&gt; method are good enough. There is no reason to customize the code that they generate for you. However, there are cases where it is advantageous to be aware of what is going on under the hood.&lt;/p&gt;

&lt;p&gt;For value classes, prefer to do a strict type comparison in the &lt;code&gt;equals()&lt;/code&gt; method, unless it is likely that the value class might be proxied.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Apr 2017 22:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2017/04/03/java-value-classes-equals/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/04/03/java-value-classes-equals/</guid>
        
        <category>effectivejava</category>
        
        
      </item>
    
      <item>
        <title>Delegates - Composition over Inheritance in Kotlin</title>
        <description>&lt;p&gt;Joshua Bloch&amp;#39;s Effective Java Item 16 says &amp;quot;Favor composition over Inheritance&amp;quot;. The reasons for doing so are well-described in the book, so we will concentrate on the implementation aspects and how Kotlin helps. &lt;/p&gt;

&lt;p&gt;The idea behind composition is that if &lt;code&gt;class A&lt;/code&gt; needs behavior defined in &lt;code&gt;class B&lt;/code&gt;, then instead of inheriting from &lt;code&gt;class B&lt;/code&gt;, it could have a member variable of &lt;code&gt;class B&lt;/code&gt;. Then any behavior that &lt;code&gt;class A&lt;/code&gt; would have achieved by calling a method on &lt;code&gt;super&lt;/code&gt;, it achieves the same by calling that method on the member variable of type &lt;code&gt;class B&lt;/code&gt; instead. &lt;/p&gt;

&lt;p&gt;An example of this is seen in the book: The &lt;code&gt;InstrumentedSet&lt;/code&gt; - first a broken implementation that uses &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/InstrumentedHashSet.java&quot;&gt;Inheritance&lt;/a&gt;, and then corrects it &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/ForwardingSet.java&quot;&gt;using&lt;/a&gt; &lt;a href=&quot;https://github.com/marhan/effective-java-examples/blob/master/src/main/java/org/effectivejava/examples/chapter04/item16/InstrumentedSet.java&quot;&gt;Composition&lt;/a&gt;. When you use the composition pattern, the &lt;strong&gt;wrapper&lt;/strong&gt; class simply forwards all method calls to an instance of the &lt;strong&gt;wrapped&lt;/strong&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/*
     * ForwardingSet is the wrapper class and it wraps the Set.
     *
     * In this example ForwardingSet also implements Set interface but that is just 
     * in order to adhere to the interface and not for inheritance. Set, being an interface, there is
     * no implementations in {@code super}!
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, the downside of using the composition pattern is the verbosity. This is boilerplace, tedious, robotic code that should be automated.&lt;/p&gt;

&lt;p&gt;And, well, it can be automated. IDE&amp;#39;s do this automation for you. IntelliJ, for example, has &amp;quot;Replace Inheritance with Delegation&amp;quot; as an option in the &amp;quot;Refactor&amp;quot; menu. However, the generated code is still code that needs to be maintained. When you change methods/add new methods, you now have two (or more) places where you need to make the change. Also over time you are no longer sure what parts of this class were generated and what parts were hand-writtern.&lt;/p&gt;

&lt;h2&gt;Delegation in Kotlin&lt;/h2&gt;

&lt;p&gt;Enter Kotlin&amp;#39;s delegates. Here is the same example using Kotlin delegates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardingMutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It really is as simple as that. The &lt;code&gt;by s&lt;/code&gt; clause basically tells Kotlin to maintain an object of &lt;code&gt;MutableSet&lt;/code&gt; and forward any applicable calls to that instance instead. And remember all this is done at compile time.&lt;/p&gt;

&lt;p&gt;The complete example, including a simple unit test is hosted &lt;a href=&quot;http://try.kotlinlang.org/#/UserProjects/r6h47rducuggpve5g1l4d2d8nd/on2i6nnt4armofoep69ch5qknk&quot;&gt;here&lt;/a&gt;. You can play around with it thanks to the awesome try.kotlinlang.org.&lt;/p&gt;

&lt;h2&gt;Limitations&lt;/h2&gt;

&lt;p&gt;This is a limitation with the pattern, rather than with Kotlin&amp;#39;s implementation of the pattern - you can only use delegation if you control the instantiation of the object of the wrapped class. You cannot, for example compose Android&amp;#39;s Activity classes because the framework instantiates an Activity for you. Of course, you should probably be composing Presenters/ViewModels/Whatever rather than Activities/Fragments but that is a topic for another blog post!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 16:21:22 +0100</pubDate>
        <link>http://localhost:4000/blog/2017/03/05/kotlin-coi/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/03/05/kotlin-coi/</guid>
        
        <category>kotlin</category>
        
        
      </item>
    
      <item>
        <title>AO(sp)y Episode 2 - Lambdas</title>
        <description>&lt;p&gt;This post is the second episode in a series where I peek into random commits on AOSP and try to predict what&amp;#39;s coming to the world of Android development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: These tidbits have been gleaned primarily from the commit messages on AOSP. I very rarely even read (let alone understand) the code. As such expect inaccuracies or downright mistakes here. Do not make decisions based on what you read in this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That out of the way, let’s dig in. This episode was supposed to be about toolchain improvements, but the headline feature is what the title says - lambdas! Lest I am accused of clickbait, let me clarify that all of this is still experimental. Several commits are not even merged. There is no saying when (and if) any of these features will actually find their way into production.&lt;/p&gt;

&lt;p&gt;Ever since Java8 was released, the clamor for using lambdas in Android development has been growing, with good reason too. Android is full of anonymous inner classes for all kinds of things and several of these use cases would benefit from the use of lambdas.&lt;/p&gt;

&lt;p&gt;Java 8 brought about two types of enhancements to the Java programming language:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Features and syntax in the language itself&lt;/li&gt;
&lt;li&gt;Additions to the standard libraries to take advantage of the new features&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article concentrates purely on the first type of enhancements, i.e.,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&quot;&gt;Method references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;Default methods in interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static methods in interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not look like there is any move to bring the enhancements to the runtime libraries in the form of new collections and &lt;code&gt;java.util.function&lt;/code&gt; package to Android.&lt;/p&gt;

&lt;p&gt;So, what’s cooking?&lt;/p&gt;

&lt;h3&gt;Runtime support&lt;/h3&gt;

&lt;p&gt;Opcodes for creating and invoking lambdas are &lt;a href=&quot;https://android-review.googlesource.com/#/c/147957/&quot;&gt;being added&lt;/a&gt; to the Dalvik bytecode (dex) format. The ART interpreter is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155661/&quot;&gt;being updated&lt;/a&gt; to be able to use these opcodes.&lt;/p&gt;

&lt;p&gt;The first of these commits also points to the &lt;code&gt;dex2oat&lt;/code&gt; compiler being taught how to compile lambdas from your dex bytecode into the corresponding opcodes for OAT.&lt;/p&gt;

&lt;p&gt;What does all this mean? It means that &lt;em&gt;lambdas might be supported natively&lt;/em&gt; in a future version of Android.&lt;/p&gt;

&lt;h3&gt;Toolchain enhancements&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/c/158285/&quot;&gt;This commit&lt;/a&gt; and related ones point to the possibility of Jack compiler doing basically what is achieved with &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;gradle-retrolambda&lt;/a&gt; today. In other words, Jack compiler will be able to compile lambdas into bytecode that works even on runtimes that don’t support lambda opcodes. Similarly, Jill will likely do to lambdas in .class/.jar libraries what Jack does to them in source code.&lt;/p&gt;

&lt;h3&gt;Other Java8 features&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s more to Java8 than just the lambda syntax. AOSP also has commits that hint at support for &lt;a href=&quot;https://android-review.googlesource.com/#/c/169003/&quot;&gt;default methods&lt;/a&gt; and &lt;a href=&quot;https://android-review.googlesource.com/#/c/158165/&quot;&gt;Single Abstract Methods&lt;/a&gt;. I did not find any obvious mention of method references, but that might be because I&amp;#39;m not looking hard enough. In any case, method references are just syntax sugar for lambdas so if lambda expressions are supported, so should method references.&lt;/p&gt;

&lt;h3&gt;Compatibility&lt;/h3&gt;

&lt;p&gt;At first glance, one might conclude that lambdas will be used only if &lt;code&gt;minSdkVersion &amp;gt;=&lt;/code&gt; the version of Android in which they are introduced, and that Jack&amp;#39;s feature of down-compiling lambdas into Java7-compatible bytecode will be used in all other cases. This means that the runtime lambdas will not be used &lt;em&gt;even on the runtimes that support them unless &lt;code&gt;minSdkVersion&lt;/code&gt; is set to the latest&lt;/em&gt;. However, this is (more than) likely to negatively impact the adoption of lambdas.&lt;/p&gt;

&lt;p&gt;So, what might be strategies to work around this? What follows is a &lt;strong&gt;wild guess&lt;/strong&gt; as to how this might pan out. I haven&amp;#39;t dug in the source code into much (or ... &lt;em&gt;any&lt;/em&gt;) detail (not that I&amp;#39;d understand much of it even if I had, but that&amp;#39;s beside the point).&lt;/p&gt;

&lt;p&gt;Remember that &lt;code&gt;dex2oat&lt;/code&gt; runs on the Android device. The APK file only has dex bytecode, and it is converted into OAT at installation time. Could this be used to enhance the compatibility story?&lt;/p&gt;

&lt;p&gt;Jack might use &lt;code&gt;targetSdkVersion&lt;/code&gt; to decide whether to include lambdas in the compiled dex bytecode. If &lt;code&gt;targetSdkVersion &amp;gt;=&lt;/code&gt; the version in which lambda support is introduced, then the generated dex might &lt;em&gt;include&lt;/em&gt; the Java8 bytecode. But wait, aren&amp;#39;t we back at square one? &lt;code&gt;dex2oat&lt;/code&gt; is part of the Android OS and cannot (yet) be updated independently of the OS. This means that &lt;code&gt;dex2oat&lt;/code&gt; that is running on an older version of the OS will not understand the new dex bytecode.&lt;/p&gt;

&lt;p&gt;This is why I say &lt;em&gt;include&lt;/em&gt; Java8 opcodes instead of &lt;em&gt;generate&lt;/em&gt; - that is to say, Jack might generate both the Java7-compatible byte code as well as new Java8 opcodes. Hopefully, &lt;code&gt;dex2oat&lt;/code&gt; running on older versions of Android simply ignore the Java8 opcodes. But, what about the size implications of this arrangement? In lambda-heavy apps, will this result in bloated &lt;code&gt;.dex&lt;/code&gt; files?&lt;/p&gt;

&lt;p&gt;The other option is that Jack might always generate Java7 compatible bytecode (compiles lambda expressions into anonymous inner classes), but it might include some sort of flag to indicate to &lt;code&gt;dex2oat&lt;/code&gt; that these constructs be compiled into the corresponding Java8 OAT format. But this begs the question - what, then, is the point of the new opcodes in &lt;code&gt;.dex&lt;/code&gt; format at all?&lt;/p&gt;

&lt;p&gt;I do not have the answers to these questions yet (nor does AOSP). But I&amp;#39;m sure the answers will reveal themselves in the days to come. If you are interested in this topic, you can follow the progress yourself at the following locations on AOSP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:platform/art&quot;&gt;platform/art&lt;/a&gt; project ...&lt;/li&gt;
&lt;li&gt;... particularly, the &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:merged+project:platform/art+branch:master+topic:lambda_experimental&quot;&gt;lambda_experimental&lt;/a&gt; topic&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/#/q/project:toolchain/jack&quot;&gt;toolchain/jack&lt;/a&gt; project &lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;a href=&quot;https://android-review.googlesource.com/#/q/status:open+project:toolchain/jack+branch:ub-jack-lang-dev&quot;&gt;ub-jack-lang-dev&lt;/a&gt; branch&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2015/09/06/ao-spy-2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/09/06/ao-spy-2/</guid>
        
        <category>aosp</category>
        
        <category>android</category>
        
        <category>java8</category>
        
        <category>lambda</category>
        
        
      </item>
    
      <item>
        <title>AO(sp)y Part 1</title>
        <description>&lt;p&gt;This post is the first in a series (hopefully) in which I spy on AOSP (hence the title - yes, I know I&amp;#39;m not winning any prizes for creative blog post titles!) and try to gather glimpses of what&amp;#39;s coming to the world of Android.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Most of this is guess work. In many cases I&amp;#39;m not even looking at any code - the commit messages and review comments are as far I go. Do not make any decisions based on this post!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this first episode, we will look at improvements coming to Android Studio (most probably in 1.4)&lt;/p&gt;

&lt;h3&gt;Material Icon Picker&lt;/h3&gt;

&lt;p&gt;There &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7647?pr=androidstudio&quot;&gt;already exist&lt;/a&gt; plugins for Android Studio that make it easy for you to include Material Design icons in your project. Google is &lt;a href=&quot;https://android-review.googlesource.com/#/c/155698/&quot;&gt;working on&lt;/a&gt; bringing something similar into the Android Studio.&lt;/p&gt;

&lt;p&gt;Now, I haven&amp;#39;t actually checked out this code and built it so I don&amp;#39;t know what the picker actually looks like, but it would be a safe bet to assume that it&amp;#39;ll be integrated into the existing &amp;quot;Asset Studio&amp;quot; (which itself started as a web app, then found its way into Eclipse and in its current avatar, it is part of AS).&lt;/p&gt;

&lt;h3&gt;Material Color Suggestor&lt;/h3&gt;

&lt;p&gt;If I want to change the color palette of my app today, I need to go to &lt;a href=&quot;http://www.materialpalette.com/&quot;&gt;http://www.materialpalette.com/&lt;/a&gt; and choose my colors there and finally download the styles.xml file. &lt;a href=&quot;https://android-review.googlesource.com/#/c/156624/&quot;&gt;This feature&lt;/a&gt; will make it easy for you to set your material color palette from within Android Studio. Moreover, the tool is a color suggestor - you choose a primary color and AS will suggest a primaryDark and an accent color that goes with it according to the material design specs.&lt;/p&gt;

&lt;h3&gt;Import SVG as Vector Drawable&lt;/h3&gt;

&lt;p&gt;Again, there &lt;a href=&quot;http://inloop.github.io/svg2android/&quot;&gt;already exist&lt;/a&gt; tools to convert an SVG file into an Android-compatibe Vector Drawable, but it would be nice to have &lt;a href=&quot;https://android-review.googlesource.com/#/c/163309/&quot;&gt;this functionality&lt;/a&gt; right in Studio.&lt;/p&gt;

&lt;h3&gt;VectorDrawable to PNG&lt;/h3&gt;

&lt;p&gt;This is not an Android Studio feature - rather it is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/162815/&quot;&gt;Gradle feature&lt;/a&gt;. It will convert vector drawables into PNGs for use with pre-Lollipop. This will be done at build time. I&amp;#39;m not sure if this means that we can do away with creating those &lt;code&gt;drawable-*hdpi&lt;/code&gt; PNGs altogether though.&lt;/p&gt;

&lt;h3&gt;New Layout Editor&lt;/h3&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://android-review.googlesource.com/#/c/159435/&quot;&gt;large list of commits&lt;/a&gt; mentioning the &amp;quot;Nele&amp;quot; which seems to be an internal acronym for New Layout Editor. A cursory glance at it did not reveal much about what exactly is new in this layout editor. However, it is possible that this info is there buried somewhere in one of the 49 related commits and that I have missed it. One thing is for sure - this is a pretty big change and Google wouldn&amp;#39;t have embarked on it if it wouldn&amp;#39;t bring significant advantages to developers.&lt;/p&gt;

&lt;h3&gt;AppBar creation in AS&lt;/h3&gt;

&lt;p&gt;Android Studio is &lt;a href=&quot;https://android-review.googlesource.com/#/c/162681/&quot;&gt;gaining the capability&lt;/a&gt; to include an AppBar when you use the templates to create a new Activity. According to the commit message, this will be optional. Also, a dependency on the design support library will be included by default for new projects. This is a very welcome change.&lt;/p&gt;

&lt;p&gt;Stay tuned for Part 2 where we go beyond the IDE and dig a little deeper into the toolchain.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/2015/08/12/ao-spy-1/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/08/12/ao-spy-1/</guid>
        
        <category>aosp</category>
        
        <category>studio</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragments and the Backstack - Part 3</title>
        <description>&lt;p&gt;This is the third post in the series about Nested Fragments and the Back Stack in Android. Read the previous posts here:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/01/nested-fragments-and-back-stack.html&quot;&gt;Part 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragment-and-backstack-part-2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;The first two posts have looked at the topic taking &lt;code&gt;ViewPager&lt;/code&gt; as an example. I have also mentioned repeatedly that this is not the only use case for having to maintain the back-stack of nested fragments. One use case that I threw up often in comments was about &lt;strong&gt;Navigation Drawers&lt;/strong&gt;. That is exactly what this post will look into.&lt;/p&gt; &lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT: Some Google engineers, including the creators of the Android framework have expressed their reservations regarding this article. Read &lt;a href=&quot;https://plus.google.com/100961288997176421259/posts/BLLi6srFtwT&quot;&gt;this G+ thread&lt;/a&gt; for more details. They point out that using an &lt;code&gt;Application&lt;/code&gt; sub-class to save state is not a good idea, but also that saving &lt;code&gt;Fragment&lt;/code&gt; instance state explicitly might in itself needs to be considered carefully. I hope to gather their thoughts and write a follow-up post in the coming weeks. Stay Tuned.&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt; &lt;h3 id=&quot;re-cap&quot;&gt;Re-cap&lt;/h3&gt; &lt;p&gt;Just to re-cap the conclusion from the previous article:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Consider pro-actively saving your &lt;code&gt;Fragment&lt;/code&gt; states in &lt;code&gt;onPause&lt;/code&gt;, particularly is the &lt;code&gt;Fragment&lt;/code&gt; happens to nest other fragments inside of it. &lt;/li&gt;&lt;li&gt;Do not rely solely on the system saving state for you in &lt;code&gt;onSaveInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;FragmentManager#saveFragmentInstanceState&lt;/code&gt; to save the Fragment state including the back-stack of nested fragment transactions for you.&lt;/li&gt;&lt;li&gt;Do not hold on to the saved state any longer than necessary.&lt;/li&gt;&lt;/ul&gt; &lt;h3 id=&quot;adapting-to-navigation-drawer&quot;&gt;Adapting to Navigation Drawer&lt;/h3&gt; &lt;p&gt;If you take the &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack/tree/master/nested-fragments-backstack-part2&quot;&gt;source code for Part 2&lt;/a&gt; of the series, and adapt it as-is to a Navigation Drawer example, you’ll find that things don’t quite work as you’d expect. In particular, you’ll find that &lt;em&gt;even though you have saved the state of the &lt;code&gt;ContainerFragment&lt;/code&gt; in &lt;code&gt;onPause&lt;/code&gt;&lt;/em&gt;, the next time you return to this fragment, its state is cleared. &lt;/p&gt; &lt;p&gt;Why is this? The alert reader might have spotted the reason.&lt;/p&gt; &lt;p&gt;In the case of the &lt;code&gt;ViewPager&lt;/code&gt; example, we clear the saved fragment state in &lt;code&gt;onDestroy()&lt;/code&gt;. This is because of the way ViewPager works (or rather, &lt;code&gt;FragmentPagerAdapter&lt;/code&gt; or &lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt; works): When you navigate away from a tab, the Fragment’s &lt;code&gt;`onPause&lt;/code&gt; is called but none of the other life-cycle methods are called. This means &lt;code&gt;onDestroy&lt;/code&gt; is skipped and the Fragment is simply torn down. &lt;code&gt;onDestroy&lt;/code&gt; is only called when the hosting &lt;code&gt;Activity&lt;/code&gt; is destroyed.&lt;/p&gt; &lt;pre style=&quot;&quot; class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getFragmentManager&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onDestroy&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, when you use a Navigation Drawer, the case is different. In this situation, there is no &lt;code&gt;PagerAdapter&lt;/code&gt; to deal with. When you navigate from one item in the navigation drawer to another, the “old” Fragment undergoes the complete life-cycle - &lt;code&gt;onPause&lt;/code&gt; all the way to &lt;code&gt;onDestroy&lt;/code&gt; and &lt;code&gt;onDetach&lt;/code&gt;. As a consequence, since you’re clearing the saved Fragment state in &lt;code&gt;onDestroy&lt;/code&gt; of the &lt;code&gt;ContainerFragment&lt;/code&gt;, &lt;strong&gt;you end up clearing the state that you had just saved in &lt;code&gt;onPause&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;h3 id=&quot;solution&quot;&gt;Solution?&lt;/h3&gt; &lt;p&gt;Well, the solution is rather simple - just don’t clear the state in &lt;code&gt;onDestroy&lt;/code&gt; of the parent Fragment! In addition, there are a few other minor changes - like the way you set the initial state of the ContainerFragment (instead of retrieving the saved state in one of the life cycle methods of the Fragment, you use &lt;code&gt;setInitialSavedState&lt;/code&gt; in the static creator method). The source code for this is available at the &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;github repo&lt;/a&gt; for this series.&lt;/p&gt; &lt;pre style=&quot;&quot; class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; newInstance&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;SavedState&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; savedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; frag &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;ContainerFragment&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        frag&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setInitialSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;savedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; frag&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;NestedFragApp&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;setFragmentSavedState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;SAVED_STATE_KEY&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; getFragmentManager&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here’s a video showing this in action (Unfortunately the Android screenrecord tool doesn’t like it if you rotate the device during the recording, but I think the video demnostrates the point sufficiently):&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/JEzerV4Ee_g&quot; allowfullscreen=&quot;&quot; height=&quot;315&quot; width=&quot;420&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;forgetting-the-saved-state&quot;&gt;Forgetting the saved state?&lt;/h3&gt; &lt;p&gt;The bullet points that we established in the previous post (re-capped at the beginning of this post) say that you should not hold on to the saved state any longer than necessary. However, we had to violate that rule in this solution because - well - it is pointless to save the state only to immediately clear it!&lt;/p&gt; &lt;p&gt;However, depending on your use case you might approach this in a different manner. For example, you might only clear the fragment saved state when the hosting &lt;code&gt;Activity&lt;/code&gt; is destroyed. This is &lt;em&gt;not&lt;/em&gt; demonstrated in the sample code on github but should be straightforward to implement.&lt;/p&gt;</description>
        <pubDate>Sun, 09 Feb 2014 07:56:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2014/02/09/nested-fragments-and-backstack-part-3/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2014/02/09/nested-fragments-and-backstack-part-3/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragment and the BackStack - Part 2</title>
        <description>&lt;p&gt;This article is the second in this series about Nested Fragments and the Back Stack in Android. You can read Part 1 &lt;a href=&quot;http://curioustechizen.blogspot.com/2014/01/nested-fragments-and-back-stack.html&quot;&gt;here&lt;/a&gt;. To get this post into context, take a look at the video embedded in the previous post, if nothing else.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edit: Later posts in this series at&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragments-and-backstack-part-3.html&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT: Some Google engineers, including the creators of the Android framework have expressed their reservations regarding this article. Read &lt;a href=&quot;https://plus.google.com/100961288997176421259/posts/BLLi6srFtwT&quot;&gt;this G+ thread&lt;/a&gt; for more details. They point out that using an &lt;code&gt;Application&lt;/code&gt; sub-class to save state is not a good idea, but also that saving &lt;code&gt;Fragment&lt;/code&gt; instance state explicitly might in itself needs to be considered carefully. I hope to gather their thoughts and write a follow-up post in the coming weeks. Stay Tuned.&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt; &lt;p&gt;At the risk of sounding repetitive, I’ll start off this post by once again stating the gist of the previous post:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;A Fragment’s &lt;code&gt;onSaveInstanceState&lt;/code&gt; method is not guaranteed to be called when it is “removed”. The &lt;code&gt;Fragment&lt;/code&gt; might simply be torn down. The only time its state might be saved is when the hosting &lt;code&gt;Activity&lt;/code&gt; saves its state.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;We also saw how this could be a problem when you use nested fragments and a &lt;code&gt;FragmentManager&lt;/code&gt; doesn’t save its backstack of fragment transactions. In this part, we’ll look at one possible solution to this problem.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;save-state-in-onpause&quot;&gt;Save state in onPause&lt;/h3&gt; &lt;p&gt;This is the obvious solution to the problem. The Android docs also state this time and again: it is a best practice to proactively save state. Also, since &lt;code&gt;onPause&lt;/code&gt; is the only callback that is guaranteed to be called, it makes sense to save your instance state here.&lt;/p&gt; &lt;p&gt;Having said that, it is easy to save view states, scroll positions and even entire arbitrary objects in &lt;code&gt;onPause.&lt;/code&gt; But, how does one save a back stack of fragment transactions?&lt;/p&gt; &lt;p&gt;Enter &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/Fragment.SavedState.html&quot;&gt;&lt;code&gt;Fragment.SavedState&lt;/code&gt;&lt;/a&gt;.  You can ask the &lt;code&gt;FragmentManager&lt;/code&gt; to save the state of a &lt;code&gt;Fragment&lt;/code&gt; using &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/FragmentManager.html#saveFragmentInstanceState%28android.support.v4.app.Fragment%29&quot;&gt;&lt;code&gt;saveFragmentInstanceState&lt;/code&gt;&lt;/a&gt;. The back stack being managed by a Fragment’s nested &lt;code&gt;FragmentManager&lt;/code&gt; is included in the state saved by this method.&lt;/p&gt; &lt;h4 id=&quot;the-application-sub-class&quot;&gt;The &lt;code&gt;Application&lt;/code&gt; sub-class&lt;/h4&gt; &lt;p&gt;This post shows how you could use a sub-class of the &lt;code&gt;Application&lt;/code&gt; class to save the state, but you might choose another mechanism to do so. The important thing is that the state has to be saved. We use a &lt;code&gt;Map&lt;/code&gt; of strings as keys and the saved state as values in this example.&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class NestedFragApp extends Application {&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;String, Fragment.SavedState&amp;gt; savedStateMap;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate() {&lt;br /&gt;        savedStateMap = new HashMap&amp;lt;String, Fragment.SavedState&amp;gt;();&lt;br /&gt;        super.onCreate();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void setFragmentSavedState(String key, Fragment.SavedState state){&lt;br /&gt;        savedStateMap.put(key, state);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Fragment.SavedState getFragmentSavedState(String key){&lt;br /&gt;        return savedStateMap.get(key);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;explicitly-saving-fragment-state&quot;&gt;Explicitly saving Fragment state&lt;/h4&gt; &lt;p&gt;Then, you save the state of the container fragment when it pauses as follows:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override&lt;br /&gt;public void onPause() {&lt;br /&gt;    super.onPause();&lt;br /&gt;    ((NestedFragApp) getActivity().getApplication()).setFragmentSavedState(&lt;br /&gt;            SAVED_STATE_KEY, getFragmentManager().saveFragmentInstanceState(this));&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;initializing-the-fragment-transaction&quot;&gt;Initializing the fragment transaction&lt;/h4&gt; &lt;p&gt;Finally, remember to check whether there is a saved state for this fragment before “initializing” the fragment transaction:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SavedState fragmentSavedState = ((NestedFragApp)getActivity().getApplication())&lt;br /&gt;        .getFragmentSavedState(SAVED_STATE_KEY);&lt;br /&gt;if(fragmentSavedState == null){&lt;br /&gt;    if (savedInstanceState == null) {&lt;br /&gt;        getChildFragmentManager().beginTransaction().replace(R.id.nested_fragment_container, &lt;br /&gt;                NestedFragmentOne.newInstance()).commit();&lt;br /&gt;    } else {&lt;br /&gt;        // use savedInstanceState here to restore state saved in onSaveInstance&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that there are two “saved states” here:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;The instance state saved in &lt;code&gt;onSaveInstanceState&lt;/code&gt;, which is provided to you by the system via &lt;code&gt;savedInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The state you explicitly saved in &lt;code&gt;onPause&lt;/code&gt;, which you retrieve from the &lt;code&gt;Application&lt;/code&gt; object as &lt;code&gt;fragmentSavedState&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;The flow you follow for initializing the fragment is as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;You first check to see if you had previously explicitly saved state. If true, then you don’t need to do anything.&lt;/li&gt;&lt;li&gt;If not, then you proceed to check if the system had saved state for you. If true, then you use the &lt;code&gt;savedInstanceState&lt;/code&gt; to restore system-saved state.&lt;/li&gt;&lt;li&gt;Only if neither is true, then you initiate the fragment transaction.&lt;/li&gt;&lt;/ul&gt; &lt;h4 id=&quot;letting-go-of-the-saved-state&quot;&gt;Letting go of the saved state&lt;/h4&gt; &lt;p&gt;One thing you need to be careful of is to not hold on to the saved fragment state any longer than necessary. For example, when the &lt;strong&gt;container &lt;code&gt;Fragment&lt;/code&gt;&lt;/strong&gt; is destroyed, you want to invalidate the back-stack associated with it as well. This sounds obvious but I overlooked it and ended up with strange behaviors.&lt;/p&gt; &lt;p&gt;The best way I found was to “forget” the saved state of a container fragment in its &lt;code&gt;onDestroy&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override&lt;br /&gt;public void onDestroy() {&lt;br /&gt;    super.onDestroy();&lt;br /&gt;    ((NestedFragApp) getActivity().getApplication()).setFragmentSavedState(&lt;br /&gt;            SAVED_STATE_KEY, null);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With all these steps in place, the app now behaves as one would expect it to. Your position within a back-stack, even within a nested fragment, is remembered even when you navigate away and return to the top level fragment.&lt;/p&gt; &lt;p&gt;Here’s a video showing how the app now behaves:&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/7RpzkXGJqNo&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt; &lt;p&gt;The source code for the entire series is at &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;Consider pro-actively saving your &lt;code&gt;Fragment&lt;/code&gt; states in &lt;code&gt;onPause&lt;/code&gt;, particularly is the &lt;code&gt;Fragment&lt;/code&gt; happens to nest other fragments inside of it. &lt;/li&gt;&lt;li&gt;Do not rely solely on the system saving state for you in &lt;code&gt;onSaveInstanceState&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;FragmentManager#saveFragmentInstanceState&lt;/code&gt; to save the Fragment state including the back-stack of nested fragment transactions for you.&lt;/li&gt;&lt;li&gt;Do not hold on to the saved state any longer than necessary.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;This article looked at ActionBar tabs with a ViewPager, but this concept applies to other situations where one would use nested Fragments (Navigation Drawers for example).&lt;/p&gt;</description>
        <pubDate>Sun, 02 Feb 2014 10:35:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2014/02/02/nested-fragment-and-backstack-part-2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2014/02/02/nested-fragment-and-backstack-part-2/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Nested Fragments and the Back Stack</title>
        <description>&lt;p&gt;This article is not about the back stack of &lt;em&gt;activities&lt;/em&gt; that Android maintains for every task. That stuff has been written about adequately elsewhere. This post is about the back stack of &lt;em&gt;fragment transactions&lt;/em&gt; maintained by the &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/FragmentManager.html&quot;&gt;&lt;code&gt;FragmentManager&lt;/code&gt;&lt;/a&gt; and how they relate to nested fragments.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edit: Other posts in this series at&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragment-and-backstack-part-2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://curioustechizen.blogspot.com/2014/02/nested-fragments-and-backstack-part-3.html&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Heads-up:&lt;/strong&gt; If you are using nested fragments, you need to use the support library, even if your app only targets API level 14 and above. This is because nested fragment support was &lt;a href=&quot;http://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot;&gt;added in API 17&lt;/a&gt;, and the feature was back-ported to the support library (revision 11 and later).&lt;/p&gt; &lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt; &lt;p&gt;The gist of this post can be stated as follows:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its &lt;strong&gt;state will not be saved until its owning activity actually needs to save its state&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This is from the &lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/Fragment.html#onSaveInstanceState%28android.os.Bundle%29&quot;&gt;docs&lt;/a&gt; (emphasis mine). Overlooking this can lead to bugs especially when you use nested fragments since the back stack of a child fragment manager could be reset when you least expect it. Remember - if the state of a &lt;code&gt;Fragment&lt;/code&gt; is not saved, then by definition, the back stack of fragment transactions managed by that fragment’s child &lt;code&gt;FragmentManager&lt;/code&gt; is not saved either.&lt;/p&gt; &lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt; &lt;p&gt;With the advent of fragments, more so nested fragments, the general advice one gets from the developer community is this:&lt;/p&gt; &lt;blockquote&gt;  &lt;p&gt;Fragmentize all the everythings!&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;And with good reason too. Consider the following:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;If you use ActionBar tabs, the content of each tab is implemented as a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Each “page” in a &lt;code&gt;ViewPager&lt;/code&gt; is often implemented as a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;In navigation drawers, the “content” of each navigation item is expected to be a &lt;code&gt;Fragment&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;What this translates to is that what would once be implemented as an &lt;code&gt;Activity&lt;/code&gt; now needs to be implemented as a &lt;code&gt;Fragment&lt;/code&gt;. This also means that a &lt;em&gt;flow within that &lt;code&gt;Activity&lt;/code&gt;&lt;/em&gt;, that might have been implemented using &lt;code&gt;Fragment&lt;/code&gt;s, now needs to be implemented using &lt;strong&gt;nested &lt;code&gt;Fragment&lt;/code&gt;s&lt;/strong&gt;. Note that by “flow” I simply mean a sequence of screens to establish a particular task.&lt;/p&gt; &lt;p&gt;Now here’s the thing with flows: If a user “goes away” from a flow and later returns to it, it is expected that the user continues from the screen where they left off. Translated into &lt;code&gt;Fragment&lt;/code&gt; terminology, this means that if a user navigates away and returns to a flow that is implemented using &lt;code&gt;Fragment&lt;/code&gt;s, its is expected that the user’s position in the backstack of fragment transactions is retained. However, this isn’t always the case.&lt;/p&gt; &lt;p&gt;Here is a video demonstrating the problem:&lt;/p&gt; &lt;iframe src=&quot;//www.youtube.com/embed/3gRq3hG9tS4&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt; &lt;p&gt;The video shows an &lt;code&gt;Activity&lt;/code&gt; with three tabs. It is a modified version of an &lt;code&gt;Activity&lt;/code&gt; created using the “New Activity” wizard in ADT or Android Studio and specifying “Fixed Tabs + Swipe” navigation. The modification is as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The content of the first tab has been modified to make it a “Container” &lt;code&gt;Fragment&lt;/code&gt; that in turn contains two nested fragments.&lt;/li&gt;&lt;li&gt;When the container fragment is first created, it shows a nested fragment asking you to enter your name.&lt;/li&gt;&lt;li&gt;On entering the name and Clicking “Next”, you are presented with another nested fragment asking you to enter your GitHub username.&lt;/li&gt;&lt;li&gt;The other two tabs are just simple &lt;code&gt;Fragment&lt;/code&gt;s - no nesting business there.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Now, notice what happens when I follow this sequence:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Enter name, press Next. Then, enter a github username.&lt;/li&gt;&lt;li&gt;Navigate to the tab titled “Section 2” and then back to “Section 1”.&lt;/li&gt;&lt;li&gt;Navigate to the tab titled “Section 3” and then back to “Section 1”.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Uh! In step 3 above, the back stack was nuked. But hey, it didn’t happen in Step 2. Why so?&lt;/p&gt; &lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt; &lt;p&gt;This example uses a &lt;code&gt;ViewPager&lt;/code&gt;. By default, a &lt;code&gt;ViewPager&lt;/code&gt; has an “off screen limit” of 1. This means that in addition to the page being displayed, one adjacent page in each direction is kept in memory. So, when you navigate to “Section 2”, everything in “Section 1” is still intact in memory.&lt;/p&gt; &lt;p&gt;When you navigate to “Section 3”, the page corresponding to “Section 1” is torn down. More importantly, since at this point the &lt;code&gt;Activity&lt;/code&gt; instance state is not being saved, the &lt;code&gt;Fragment&lt;/code&gt; state isn’t saved either. This ties in with what we saw in the “TL;DR” section above. As a result, when you navigate back to “Section 1”, the nested fragment back stack is reset.&lt;/p&gt; &lt;h3 id=&quot;rotation-task-switching&quot;&gt;Rotation? Task Switching?&lt;/h3&gt; &lt;p&gt;Try following this sequence of steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Enter name, press Next. Then, enter a github username.&lt;/li&gt;&lt;li&gt;Rotate the device; or switch to another app and return back to this app&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Now you’ll see that the back stack is retained. This is because when you rotate the device or switch to another task, the Activity saves its instance state. As a consequence the container fragment does too.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Re-iterating what we started off this post with, &lt;strong&gt;keep in mind when you are using nested fragments that a &lt;code&gt;Fragment&lt;/code&gt; is guaranteed to save state only when the containing &lt;code&gt;Activity&lt;/code&gt; saves its instance state. At other times, the &lt;code&gt;Fragment&lt;/code&gt; might simply be torn down&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The code for a sample app illustrating the problem is available &lt;a href=&quot;https://github.com/curioustechizen/blog-nested-fragments-backstack&quot;&gt;at github&lt;/a&gt;. The next part of this series will explore ways to overcome this problem.&lt;/p&gt;</description>
        <pubDate>Sat, 25 Jan 2014 18:39:00 +0100</pubDate>
        <link>http://localhost:4000/blog/2014/01/25/nested-fragments-and-back-stack/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2014/01/25/nested-fragments-and-back-stack/</guid>
        
        <category>nested</category>
        
        <category>fragments</category>
        
        <category>programming</category>
        
        <category>backstack</category>
        
        <category>android</category>
        
        
      </item>
    
  </channel>
</rss>
