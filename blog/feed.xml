<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curious Techizen</title>
    <description>A place for discussing anything tech. Old and new. Experiences and Opinions. Questions and rants. Primarily programming-related, but not exclusively.</description>
    <link>https://kiranrao.in/blog/</link>
    <atom:link href="https://kiranrao.in/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 24 Jul 2021 22:53:18 +0200</pubDate>
    <lastBuildDate>Sat, 24 Jul 2021 22:53:18 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Mobile Multiplatform and Me</title>
        <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post is based on my own experience and is highly opinionated. It is not meant as a blanket “State of the Union” of mobile multiplatform.&lt;/p&gt;

&lt;p&gt;Over the years, there have been several attempts at cross-platform frameworks for building mobile (Android and iOS) apps. This post is about my experience with three of them: &lt;a href=&quot;https://reactnative.dev/&quot;&gt;ReactNative&lt;/a&gt;, &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;Kotlin Multiplatform Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is not meant as a competition. I’m not going to announce a winner at the end of the post. Every framework serves a different audience and has different use cases. I made sure to call out the sweet spot for each of these frameworks.&lt;/p&gt;

&lt;h1 id=&quot;react-native&quot;&gt;React Native&lt;/h1&gt;

&lt;p&gt;RN was my first experience with mobile cross-platform. I worked with it in 2017 and at the time it was not very mature. However I expect things to have evolved since then.&lt;/p&gt;

&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Concepts of React carry over directly. This makes mobile app development approachable for a large developer audience.&lt;/li&gt;
  &lt;li&gt;Edit-refresh development cycle is very rapid compared to traditional mobile app development.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;ReactNative initially had only iOS support. Android was added later. This was obvious when I was working with it - Android frequently lagged behind iOS.&lt;/li&gt;
  &lt;li&gt;ReactNative ultimately interpretes JavaScript code on the target platform. On Android this is achieved using a JS bridge, which makes it slow. It also results in “stringly-typed APIs” while crossing the bridge which kind of negates the productivity gains of the edit-refresh cycle.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sweet-spot&quot;&gt;Sweet spot&lt;/h3&gt;

&lt;p&gt;The sweet spot for RN is when you have web developers that want to get into mobile development.&lt;/p&gt;

&lt;h1 id=&quot;kotlin-mobile-multiplatform&quot;&gt;Kotlin Mobile Multiplatform&lt;/h1&gt;

&lt;p&gt;I worked with KMM in 2019-2020. At the time the technology was not very mature. At the time of writing this, it is still in Alpha. Do note that KMM is from JetBrains. My experience with JetBrains technology is that when it is designated as alpha, it is already very usable, even in production.&lt;/p&gt;

&lt;h3 id=&quot;pros-1&quot;&gt;Pros&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;KMM does not provide multiplatform UI libraries. It is intended to share logic, leaving writing the UIs to platform native code. This, in my opinion, is the correct approach to multiplatform.&lt;/li&gt;
  &lt;li&gt;It is from JetBrains, from the Kotlin team. Hence the tooling is great.&lt;/li&gt;
  &lt;li&gt;It is Kotlin, which is my favourite language!&lt;/li&gt;
  &lt;li&gt;Due to the nature of KMM, you can share as little or as much of the code between platforms as you wish. You don’t give up on any of the platform native features.&lt;/li&gt;
  &lt;li&gt;You don’t need to change the way you develop your Android app to make it multiplatform-capable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cons-1&quot;&gt;Cons&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Kotlin was a JVM language for several years. For mobile, you could interprete this as KMM being Android-first.&lt;/li&gt;
  &lt;li&gt;While Kotlin, the language is very stable and mature, the KMM technology is still immature.&lt;/li&gt;
  &lt;li&gt;KMM can be unnatural for iOS developers. The Kotlin-ObjC (and hence Kotlin-Swift) &lt;a href=&quot;https://www.reddit.com/r/Kotlin/comments/odau0p/marrying_kmm_and_swift_with_sourcery/h4056dq?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;interop has some limitations&lt;/a&gt; which can ruin the experience on the iOS consuming side.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sweet-spot-1&quot;&gt;Sweet spot&lt;/h3&gt;

&lt;p&gt;The sweet spots for KMM are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Android developers who have also dabbled in iOS&lt;/li&gt;
  &lt;li&gt;Minimum Viable Products (MVPs). Remember point 5 from the pros of KMM. If you developed an app using KMM, and you later want to change your iOS app to become a pure native app, what you are left with is still a fully functional native Android app.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;flutter&quot;&gt;Flutter&lt;/h1&gt;

&lt;p&gt;I did not work professionally with Flutter. However, I made an open source app for learning Flutter in 2020.&lt;/p&gt;

&lt;h3 id=&quot;pros-2&quot;&gt;Pros&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Flutter is the most mature of the mobile cross-platform frameworks&lt;/li&gt;
  &lt;li&gt;Hot reload! Seriously. Flutter’s hot-reload is life-changing.&lt;/li&gt;
  &lt;li&gt;Mature implementations of several libraries (especially those from Google like Maps, Analytics etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cons-2&quot;&gt;Cons&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Dart is a dated language compared to Kotlin, Swift or TypeScript. This could have something to do with Dart’s history of a compile-to-JS language that dramatically pivoted to mobile multiplatform.&lt;/li&gt;
  &lt;li&gt;Writing platform plugins for Flutter is not as natural as plugging into native functionality with KMM’s expect/actual mechanism. It used to be stringly-typed but that seems to have changed with the &lt;a href=&quot;https://pub.dev/packages/pigeon&quot;&gt;pigeon package&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sweet-spot-2&quot;&gt;Sweet spot&lt;/h3&gt;

&lt;p&gt;The sweet spot for Flutter is for teams that want end-to-end cross platform apps without having to go through the mess of the web development ecosystem.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Each of the mobile multiplatform frameworks have their use cases, and each have their sore weaknesses. Mobile cross-platform is still very much an unsolved problem.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jul 2021 16:30:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2021/07/24/mobile-multiplatform/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2021/07/24/mobile-multiplatform/</guid>
        
        <category>multiplatform</category>
        
        <category>flutter</category>
        
        <category>android</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Basic before advanced</title>
        <description>&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that already boast extensive literature, I’m merely adding my own annotations. You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;an-anectode&quot;&gt;An anectode&lt;/h2&gt;

&lt;p&gt;I start this post with an anecdote. The era was 1990s and the scene was a bus stand. While my father and I were waiting for a bus, a hawker approached us with a bunch of imitation Casio watches. Here’s the conversation that ensued:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Father:&lt;/strong&gt; How much for that watch?
&lt;br /&gt;
&lt;strong&gt;Hawker:&lt;/strong&gt; 100 rupees
&lt;br /&gt;
&lt;strong&gt;F:&lt;/strong&gt; That is a lot for a watch. Why is it so expensive?
&lt;br /&gt;
&lt;strong&gt;H:&lt;/strong&gt; It has a lot of amazing features …
&lt;br /&gt;
&lt;strong&gt;F:&lt;/strong&gt; Like what?
&lt;br /&gt;
&lt;strong&gt;H:&lt;/strong&gt; See this button here? It activates the stop watch … and look, it glows in the dark … and also, it is water resistant … and oh, do you see the strap? It is reversible .. and …
&lt;br /&gt;
&lt;strong&gt;F:&lt;/strong&gt; I see the watch is running behind by 5 minutes. Why is that?
&lt;br /&gt;
&lt;strong&gt;H:&lt;/strong&gt; Oh that is probably because the light and stopwatch consume a lot of battery
&lt;br /&gt;
&lt;strong&gt;F:&lt;/strong&gt; So you are trying to sell me a watch that does not even tell the time correctly but has lot of other useless fancy features?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;feature-creep&quot;&gt;Feature creep&lt;/h2&gt;

&lt;p&gt;Wikipedia has a great definition of &lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_creep&quot;&gt;featue creep&lt;/a&gt;. To paraphrase it, and add my own flavor to the definition:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Feature creep is the tendency to add advanced features to a system even before the main purpose of the existence of the system is fulfilled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I say “system” but feature creep could also occur in a narrower scope, i.e., a subsystem of a system (more on this in a bit). Let’s take a look at some examples.&lt;/p&gt;

&lt;h3 id=&quot;smartphones&quot;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;A smartphone is perhaps the obvious example that comes to mind. Smartphones function as calculators, cameras, navigation devices, alarms, calendars, books, entertainment devices and a whole bunch more. With so much functionality crammed in, the fundamental purpose of making and receiving phone calls has taken a back seat. All the other features use up resources like battery, leaving very little for actual phone calls.&lt;/p&gt;

&lt;h3 id=&quot;automotive-systems&quot;&gt;Automotive systems&lt;/h3&gt;

&lt;p&gt;In the automotive space, the line between what is infotainment and what is driver-assist is constantly blurring. What is a luxury today becomes a basic safety feature tomorrow. It is no wonder that companies get carried away trying to pack their vehicles to the brim with features This is where things start going awry.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feature creep starts seeping in such a way that safety features of one subsystem are rendered almost useless due to overcrowded features in another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider this. Let’s say you have a vehicle with every major driver assist safety feature that you can think of: Tyre pressure monitoring system, Anti-lock Braking system, Side-stand alert, cruise control, collision warning - you name it. And then, you go and pair this with an infotainment system that distracts the driver, or requires the driver to spend too much time fiddling with the controls in order to achieve anything. What use are all those advanced features then? &lt;strong&gt;The feature creep in the infotainment subsystem could cause fatal crashes long before the safety subsystem can even kick in.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you think this is hypothetical, think again. Next time you use your vehicle, check how easy it is to perform some tasks like the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changing the destination of your navigation system while you are driving&lt;/li&gt;
  &lt;li&gt;Checking the tyre pressure (if your vehicle is equipped with a TPMS)&lt;/li&gt;
  &lt;li&gt;If you use phone projection systems like Android Auto or Apple CarPlay, how seamlessly does the system recover from a lost connection between the vehicle and phone?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And note that this list does not even include the “tainment” part of infotainment. I have not even gotten to the part where you try to control your music or podcasts or message someone.&lt;/p&gt;

&lt;h2 id=&quot;basic-first&quot;&gt;Basic First&lt;/h2&gt;

&lt;p&gt;I’m not here to advocate that there is one true solution to this problem. I’m a fan of the “a product should do one thing and do it well” philosophy but it does not apply to every product.&lt;/p&gt;

&lt;p&gt;What might be interesting is to come up with some principles for a threshold for a feature to make it in. This tweet about Minimum Viable Product comes to mind:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Debunking the &lt;a href=&quot;https://twitter.com/hashtag/MVP?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#MVP&lt;/a&gt; myth: a key figure from &amp;quot;The Lean Product Playbook&amp;quot; &lt;a href=&quot;http://t.co/TvuHbBnE7e&quot;&gt;http://t.co/TvuHbBnE7e&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/leanstartup?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#leanstartup&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/prodmgmt?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#prodmgmt&lt;/a&gt; &lt;a href=&quot;http://t.co/DqM0tWPzLG&quot;&gt;pic.twitter.com/DqM0tWPzLG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dan Olsen (@danolsen) &lt;a href=&quot;https://twitter.com/danolsen/status/613581087617384449?ref_src=twsrc%5Etfw&quot;&gt;June 24, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;It might be an interesting experiment to repurpose (and kind of negate) the second image in this tweet and use it as a template for deciding if a feature should be added:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bottom of the pyramid (Functionality): Will absence of this feature prevent the core functionality of the feature from being fulfilled?&lt;/li&gt;
  &lt;li&gt;Second from the bottom (Reliability): Without this feature, will the reliability of the product be impacted?&lt;/li&gt;
  &lt;li&gt;Second from top (Usability): Does absence of this feature have detrimental effect on the usability of the core product?&lt;/li&gt;
  &lt;li&gt;Top of the pyramid (Delight): Only if the product passes through the other three filters, then ask the question - Do we have no way to delight the user without this feature?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the answer to all these questions is a resounding Yes, then the feature makes it in, else it stays out.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At the risk of restating the obvious, &lt;strong&gt;advanced features are useless if the basic ones don’t work well&lt;/strong&gt;. Products ought to focus on the basic reason for their existence to work solidly before trying to add more. Otherwise it risks being perceived as gimmicky.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Mar 2021 16:30:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2021/03/21/basic-first/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2021/03/21/basic-first/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Facebook and Privacy</title>
        <description>&lt;p&gt;It is no secret that using Facebook is detrimental to one’s privacy. However, not everyone is in a position to quit the platform. In this post, I look into some steps that I took while attempting to use Facebook with minimal intrusion to my privacy. Your mileage may vary.&lt;/p&gt;

&lt;h2 id=&quot;facebook-mobile-app&quot;&gt;Facebook mobile app&lt;/h2&gt;

&lt;p&gt;I used the Facebook Android app for a long time and for some startling reason, I realized that I had granted it several permissions. My first step towards setting things right was to revoke every single permission that I had granted it.&lt;/p&gt;

&lt;p&gt;What does this mean in practice though?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I can no longer upload pictures to FB directly from my phone. Which is actually a blessing in disguise. I use my laptop for that.&lt;/li&gt;
  &lt;li&gt;… that is all!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebook had a bazillion permissions, including Contacts, camera, storage and what not. And the single gain it brought me was the ability to upload photos! I can live without that!&lt;/p&gt;

&lt;p&gt;For some time I also used the Facebook Lite app - it is a slimmed down version and uses less storage space and data. Still, I made sure to not give it any permissions&lt;/p&gt;

&lt;h2 id=&quot;getting-rid-of-the-app&quot;&gt;Getting rid of the app&lt;/h2&gt;

&lt;p&gt;But just having the app installed is enough to compromise on your privacy. In slightly older verisons of Android, &lt;em&gt;any&lt;/em&gt; app can know what other apps are installed on a phone (without any permission). Using this, it is possible to “fingerprint” a device. You can read more about fingerprinting &lt;a href=&quot;https://www.mozilla.org/en-GB/firefox/features/block-fingerprinting/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, I decided to get rid of the app altogether. This comes with some minor inconveniences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I no longer get notifications when someone sends me a friend request or comments on my posts. This is actually a good thing (I’ll probably write a separate post about taming notifications some day)&lt;/li&gt;
  &lt;li&gt;I can no longer share something directly to Facebook. I often come across interesting articles and use Android’s Share functionality to share it on Twitter and Facebook. This requires the app to be installed and after getting rid of the app, I have to log in on a browser and paste the link manually. This is something I’m ready to live with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;browsing-on-the-desktop-firefox&quot;&gt;Browsing on the desktop: Firefox&lt;/h2&gt;

&lt;p&gt;Unfortunately, it is still possible for Facebook to track me on the web. &lt;strong&gt;Even if I’m not logged in to Facebook&lt;/strong&gt;. All I need to do is visit a website that includes a “Like” or “Share” button.&lt;/p&gt;

&lt;p&gt;To really make it difficult for Facebook to track me while I’m browsing, I use Mozilla Firefox with the dedicated &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/facebook-container/&quot;&gt;“Facebook container” plugin&lt;/a&gt;. This is an official plugin from Mozilla. What it does is, it tries to isolate my Facebook activity on the web from my non-Facebook activity. I’ve been using it for a couple of months now and it just works.&lt;/p&gt;

&lt;h2 id=&quot;browsing-on-android-firefox-focus&quot;&gt;Browsing on Android: Firefox Focus&lt;/h2&gt;

&lt;p&gt;On my phone, I use &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mozilla.focus&amp;amp;hl=en_US&amp;amp;gl=US&quot;&gt;Firefox Focus&lt;/a&gt; browser, which is a browser by Mozilla, but is different from Firefox itself. This browser is also available for iOS and even for desktop.&lt;/p&gt;

&lt;p&gt;It is somewhat like Incognito mode in Chrome, except it is better. It not only deletes all cookies as soon as you close the browser, it also blocks several trackers by default.&lt;/p&gt;

&lt;p&gt;So, how do I use it?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Whenever I want to browse Facebook on my phone, I just browse to the website on Firefox Focus.&lt;/li&gt;
  &lt;li&gt;Since I’m in the EU, I’m first presented with some cookie consent - which I accept (because the cookies will be deleted anyway). This step will not apply if I’m outside the EU.&lt;/li&gt;
  &lt;li&gt;Then I login with my username and password (I use Android’s auto-fill for this purpose).&lt;/li&gt;
  &lt;li&gt;After browsing, I logout and hit the big “delete” button. Done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is marginally more work than having the app installed, but it has actually benefited me. I spend way less time on Facebook now.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is possible to use Facebook without entirely letting go of my privacy. It introduces some friction but in my personal experience, it has only resulted in a net gain for me.&lt;/p&gt;

&lt;p&gt;This is a post in my series related to digital privacy. You can read more posts in this series &lt;a href=&quot;/blog/tags/privacy&quot;&gt;here&lt;/a&gt;. For more advanced information and inspiration about digital privacy, you can visit the &lt;a href=&quot;https://privacytools.io/&quot;&gt;Privacy Tools&lt;/a&gt; page.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Mar 2021 17:30:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2021/03/20/facebook-privacy/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2021/03/20/facebook-privacy/</guid>
        
        <category>privacy</category>
        
        
      </item>
    
      <item>
        <title>Moving to Counter for analytics</title>
        <description>&lt;p&gt;Analytics is often crucial for a business. This includes web anaytics, app analytics and everything in between.&lt;/p&gt;

&lt;p&gt;However, for a simple blog like this one, there is no need for advanced analytics. These are the features that would be nice to have. Note that these are restricted to &lt;em&gt;page&lt;/em&gt; analytics.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many hits has my blog received, page-wise&lt;/li&gt;
  &lt;li&gt;What was the source of the hits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Specifically, what I &lt;em&gt;don’t&lt;/em&gt; need is &lt;em&gt;user&lt;/em&gt; analytics. This means things like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tracking new versus returning users&lt;/li&gt;
  &lt;li&gt;Tracking a user’s flow through my blog (they landed on this page and then went to this other page and finally exited from this page)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve been using Google Analytics all this while for this blog, but today I have decided to move away from it. The reason is that GA provides advanced features but this comes at a cost. It uses cookies and this comes at a cost, not for my privacy, but that of the readers of my blog. It is totally unfair for me to compromise on the privacy of my readers for no tangible benefit.&lt;/p&gt;

&lt;p&gt;For now I have installed &lt;a href=&quot;https://counter.dev/&quot;&gt;Counter&lt;/a&gt;. Counter is a privacy friendly web analytics service and it is open source. It is also very simple and has very few features, not more than what I need.&lt;/p&gt;

&lt;p&gt;Depending on how often I update this blog, I might even consider removing analytics altogether.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next up:&lt;/strong&gt; My comments system (I need to evaluate whether I need this disqus commenting system at all)&lt;/p&gt;

&lt;h4 id=&quot;footnote&quot;&gt;Footnote&lt;/h4&gt;

&lt;p&gt;Even for businesses, there are privacy-friendly alternatives to traditional analytics engines. I want to end this post by advocating against analytics engine that invade your users’ privacy. We can do better and our users deserve better.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Mar 2021 18:15:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2021/03/13/privacy-friendly-analytics/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2021/03/13/privacy-friendly-analytics/</guid>
        
        <category>privacy</category>
        
        
      </item>
    
      <item>
        <title>UI ≠ UX</title>
        <description>&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/R8DfByhDJL&quot;&gt;pic.twitter.com/R8DfByhDJL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rachel Appel (@RachelAppel) &lt;a href=&quot;https://twitter.com/RachelAppel/status/1168905856773230594?ref_src=twsrc%5Etfw&quot;&gt;September 3, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that have been discussed at length, I’m just making my own observations about them. You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m not a designer, so please take the opinions in this post with a pinch of salt.&lt;/p&gt;

&lt;h2 id=&quot;ui-and-ux&quot;&gt;UI and UX&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good user interface is a user acquisition tool, while a good user experience is a user retention tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To put it differently, a good user interface attracts users to your system, while a good user experience gets users to keep using your system. A couple of important observations about this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Neither is a subset of the other; a good UI does not necessarily translate to good UX and it is possible to have a good UX while the UI is poor.&lt;/li&gt;
  &lt;li&gt;Both of these are important; their relative importance depends on the nature of the system (more on this when we discuss some examples in a minute).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;good-ui-not-so-good-ux&quot;&gt;Good UI, not so good UX&lt;/h3&gt;

&lt;p&gt;Let’s look at some examples where UI is good, but UX not so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Automatic soap dispensers:&lt;/strong&gt; I got one for myself because it worked great when I tried it (It had a great UI). However during everyday use, I realized that it dispenses too much soap and that causes a mess near the sink. It has a poor UX.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Xcode:&lt;/strong&gt; All those “poof” animations looks so sleek (amazing UI) but they completely and utterly destroy the overall IDE experience (unacceptably poor UX). So many actions rely on gimmicky gestures and are completely undiscoverable (how do you remove a breakpoint that you set in XCode? Clue: It is not “right click and remove” like every other sane IDE on the planet)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-car controls:&lt;/strong&gt; Multi-function controls on the steering wheels give them such a futuristic look. Those buttons on the infotainment console looks straight out of a spaceship. Amazing UI. But, how many times do you need to click on the steering wheel button to achieve a certain task? How reliably can you turn on or off the defogger using the center console? Can you do all of this without taking your eyes off the road?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a reason I chose that last example. Imagine an ill-thought out UX that causes a driver to take their eyes off the road for even a couple of seconds at three-digit speeds. The consequences can be disastrous, even death. This is compounded by the fact that the &lt;em&gt;problems with the UX are often not discoverable&lt;/em&gt; until it is too late.&lt;/p&gt;

&lt;p&gt;This goes back to the relative importance part. The In-car controls example above is an instance where UX ought to be given a lot more importance than just UI.&lt;/p&gt;

&lt;h3 id=&quot;good-ux-with-mediocre-ui&quot;&gt;Good UX with mediocre UI&lt;/h3&gt;

&lt;p&gt;Now, some examples of systems where the UX is good but UI not so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Elevators:&lt;/strong&gt; The elevator in my apartment is old-fashioned and … how do I say this … &lt;em&gt;boring&lt;/em&gt;. It is not really welcoming in appearance. However, it just works. All the buttons are intuitive, it is disabled-friendly with braille buttons and you just cannot go wrong using it. The UX is near-perfect even though the UI does leave a lot to be desired.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Older cars:&lt;/strong&gt; My first car was very low on features, but now that I look back I have to admit the UX for the driver was fantastic. It had barely any features but whatever little it did, was a breeze to operate. The only control on the steering wheel was the horn, the stalks on the steering wheel column only had the light, indicators and wiper controls. The Air conditioner and defogger were trivial to operate without taking my eyes off the road, even in the dark. Fantastic UX, not an inviting UI at all.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Git:&lt;/strong&gt; (Uh oh .. I failed in my resolve to not include any programming related examples). Git is an indispensable tool for programmers and makes our lives so much easier. The whole experience of cheap branching, not requiring a network to work and more make it orders of magnitude better than its predecessors like CVS. However, the commands are named rather weirdly. Worse, some commands do very different things compared to what they did in previous source control systems like SVN. Incredibly good UX, a UI that leaves a lot to be desired.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This category probably has a lot more examples than the first. Think of all the things around you that just work even though they are not particularly attractive.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;UI ≠ UX. In my limited experience, UI is given more importance than UX. In my opinion this is counter-productive in the long run, both for businesses and users.&lt;/p&gt;

</description>
        <pubDate>Sun, 20 Dec 2020 17:30:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/20/ui-not-ux/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/20/ui-not-ux/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Tech as an Enhancer</title>
        <description>&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that have been beaten to pulp already. I’m simply adding to the cacophony. You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-trigger-for-this-post&quot;&gt;The trigger for this post&lt;/h2&gt;

&lt;p&gt;In November 2020, some Amazon Web Services servers suffered an outage that caused a domino effect across countless products and services which depend on AWS. Social media was quick to poke fun at the incident with an explosion of jokes and memes. This tweet is a summary of the mood of social media on that day:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I... can&amp;#39;t vacuum... because us-east-1 is down.&lt;/p&gt;&amp;mdash; Geoff Belknap (@geoffbelknap) &lt;a href=&quot;https://twitter.com/geoffbelknap/status/1331690657170157568?ref_src=twsrc%5Etfw&quot;&gt;November 25, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt&lt;/h2&gt;

&lt;p&gt;My take-away from this incident (and others before it) is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most products and services ought to dwell on the role of technology in the system. Does tech bring the most value as an &lt;em&gt;enhancer&lt;/em&gt; or as a &lt;em&gt;prerequisite&lt;/em&gt;? In other words, &lt;strong&gt;does the system degrade gracefully&lt;/strong&gt; in the absence of the very tech that differentiates it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(In this post, I use the term “tech” in a very loose sense)&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let’s look at some (mostly hypothetical) examples. Since I spent a large portion of my career in two domains (IoT and automobile), some bias is bound to creep into the examples.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is awesome that my air-conditioner is connected to the internet. I can set the temperature on my way home so that the house is already comfortable when I reach there. But should it really &lt;em&gt;require&lt;/em&gt; the internet to function? Do I absolutely have to configure the WiFi settings &lt;em&gt;before&lt;/em&gt; using the air-conditioner?&lt;/li&gt;
  &lt;li&gt;An internet-connected blood pressure monitor is a really good idea since it eliminates the manual data entry process and lets medical personnel have direct access to the necessary data. However, a blood pressure monitor that &lt;em&gt;refuses to function when a server is down&lt;/em&gt; is not very useful, is it?&lt;/li&gt;
  &lt;li&gt;I can unlock my car with my phone? Amazing. Does it also have a good old key for backup? It would be awkward if my &lt;em&gt;phone is out of battery and I cannot even unlock the car&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That last point seems far-fetched but it really isn’t. It is just one step away from this:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Got in our &lt;a href=&quot;https://twitter.com/Zipcar?ref_src=twsrc%5Etfw&quot;&gt;@Zipcar&lt;/a&gt; we&amp;#39;ve been driving for 3 days. It doesn&amp;#39;t start. Call Zipcar and get told that the car can&amp;#39;t access the internet so it won&amp;#39;t start. The only option is to have a tow truck come and tow it to somewhere where it has internet.&lt;/p&gt;&amp;mdash; Keith Smiley (@SmileyKeith) &lt;a href=&quot;https://twitter.com/SmileyKeith/status/1078417333540990976?ref_src=twsrc%5Etfw&quot;&gt;December 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I could go on with dozens of examples but I think I’ve illustrated my point.&lt;/p&gt;

&lt;h3 id=&quot;offline-first&quot;&gt;Offline first&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://offlinefirst.org/&quot;&gt;“Offline-first”&lt;/a&gt; is often used to describe apps that function when the network is unavailable, but it is more than that. Offline-first apps also behave well in the face of a &lt;em&gt;poor network connection&lt;/em&gt;. As an end user, the experience when you have that feeble network is way worse than when you have no network at all.&lt;/p&gt;

&lt;p&gt;This concept of offline-first can be extended to all things tech. In majority of the cases, solutions need to be designed&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First&lt;/strong&gt; for the situation where the tech crutch on which the solution depends is unavailable for whatever reason&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then&lt;/strong&gt; for the case where the tech is available but in a significantly reduced form&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then and only then&lt;/strong&gt; for the case where the differentiating technology is healthy and functioning at its peak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do qualify all my opinions with “majority of” or “most of” because I’m pretty sure there are situations where this is not feasible. I know there must be some solutions out there that rely completely on the tech, where the solution ceases to exist without the tech.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tech is making its mark in unimaginable ways in unprecedented fields. It works really well when it enhances an existing system. It would be a shame to go overboard and make a system overly reliant on tech where there is no real need to.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Dec 2020 21:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/18/tech-enhancer/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/18/tech-enhancer/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Scalable tech ≠ scalable business</title>
        <description>&lt;p&gt;This is a non-programming post in the series I call “re-stating the obvious”. This series talks about topics that are nothing new, a lot has been said and written about these topics already. I’m simply putting it in my own words.&lt;/p&gt;

&lt;p&gt;You can find all posts in this series &lt;a href=&quot;/blog/tags/obvious&quot;&gt;here&lt;/a&gt;. Be sure to check back because more posts will be added in this series over the coming period.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-scalable&quot;&gt;What exactly is “scalable”?&lt;/h2&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalability&quot;&gt;wikipedia definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt; is the property of a system to handle a growing amount of work by adding resources to the system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the initial stages of my career, a tech lead once described a scalable system in layman terms to me as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A scalable system is one where by adding just a small amount effort or resources you can increase the output or gain by a large amount.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A real-life (albeit silly) example I like to cite is cooking rice versus making rotis. Cooking rice is scalable because you don’t need to double the effort in order to cook double the amount of rice. On the other hand, if you want to double the number of rotis, you need to (more or less) double the effort. Making rotis, is thus not scalable.&lt;/p&gt;

&lt;h2 id=&quot;scalable-tech&quot;&gt;Scalable tech&lt;/h2&gt;

&lt;p&gt;In technology terms, scalability refers to the ability to handle more users, requests, traffic etc without the system hitting its limits. Let’s say you create a system that can handle 1 million users with a team of 100 engineers. If you want to increase your target 10 fold to 10 million, you should not need to employ 10 times as many engineers.&lt;/p&gt;

&lt;p&gt;The software industry has brought about a revolution in massively scalable technology. We routinely see CXOs of tech giants at their respective annual conferences reeling off staggering statistics about their products.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X million concurrent users per second&lt;/li&gt;
  &lt;li&gt;Y billion total active users&lt;/li&gt;
  &lt;li&gt;Z terabytes of data served per day&lt;/li&gt;
  &lt;li&gt;… and so on …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is no mean feat, mind you. Achieving this scale is a humongous engineering effort that requires coordintation between countless moving parts (from the software stack to the OS to the hardware to the network, even ventilation, cooling and geopolitical factors come into play). It is a marvel, no less.&lt;/p&gt;

&lt;p&gt;But does this translate to a scalable business? For example&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How does the cost for manual fallbacks increase with the problem size for a business based on &lt;strong&gt;algorithmic decisions&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What’s the cost of mistakes when the business relies on &lt;strong&gt;content moderation&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;How well does the tech mesh with the need for global &lt;strong&gt;regulatory compliance&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scalable-business&quot;&gt;Scalable business&lt;/h2&gt;

&lt;p&gt;A scalable business refers to one that can expand (for example to multiple geographies) with just an increment in investment (in terms of cost or effort).&lt;/p&gt;

&lt;p&gt;The manufacturing industry has shown the world how to conduct a globally scalable business for decades. Here are some examples&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every country has differing standards when it comes to &lt;strong&gt;automobile industry&lt;/strong&gt;. This includes factors like pollution limits, safety features like seat belts, airbags, ISOFix and more.&lt;/li&gt;
  &lt;li&gt;Norway is very strict about speed limits. So much so that cars sold in Norway are &lt;strong&gt;required to calibrate the speedometer&lt;/strong&gt; to show the speed as 10% more than the actual speed.&lt;/li&gt;
  &lt;li&gt;Every country has differing standards regarding &lt;strong&gt;consumer electrical and electronic equipment&lt;/strong&gt;. Refrigerators, air conditioners, microwave ovens etc have to adhere to different standards of energy consumption, fluctuations, even noise requirements.&lt;/li&gt;
  &lt;li&gt;Some countries like South Korea require that cellphone cameras should always have the &lt;strong&gt;shutter sound permanently enabled&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In spite of these differences, we see the automotive, consumer electronics and other industries comply with these local requirements. These industries have built scalable businesses that work with differing local policies around the globe.&lt;/p&gt;

&lt;h2 id=&quot;scalable-tech--scalable-business&quot;&gt;Scalable tech ≠ scalable business&lt;/h2&gt;

&lt;p&gt;Sadly, the tech industry does not seem to have learnt from the manufacturing industry. Here are a few examples that illustrate the problem:&lt;/p&gt;

&lt;h3 id=&quot;mobile-app-stores&quot;&gt;Mobile app stores&lt;/h3&gt;

&lt;p&gt;Mobile app stores are grappling with the problem of app approvals. Approvals take weeks or even months and this is a major pain point for businesses that wish to publish apps on the stores.&lt;/p&gt;

&lt;p&gt;The story doesn’t end there. At least one of the big mobile app stores has serious problems with automated app removals. If you are a mobile app developer, chances are you have come across multiple instances of apps being removed for no apparent reason, and developers not being given a fair chance at redressal.&lt;/p&gt;

&lt;p&gt;This here is a classic example of confusing the scalability of the tech for scalability of the business.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The app review algorithms are great piece of scalable technology. Unfortunately, the same algorithms come in the way of a scalable business because the business has been designed around not requiring much manual review.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;content-moderation&quot;&gt;Content moderation&lt;/h3&gt;

&lt;p&gt;Social networks, video platforms and similar platforms have a problem very similar to mobile app stores, except the stumbling block is content moderation. Some examples of situations where the scale failed the business:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Social media used for interference in the electoral process&lt;/li&gt;
  &lt;li&gt;Misinformation campaigns on social media, ranging from incorrect information about Covid-19 vaccines to using social media to whip up mob frenzy (remember all the lynching incidents across the world in 2018-2020?)&lt;/li&gt;
  &lt;li&gt;Gory incidents telecast live over various video streaming platforms (remember Christchurch shootings in 2019?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some platforms have scrambled to “fix” some of these problems (some social networks added “labels” to disputed posts etc).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But these seem to be band-aid. The real problem is that the products themselves are not built for real scale (beyond the technology itself).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;regulatory-compliance&quot;&gt;Regulatory compliance&lt;/h3&gt;

&lt;p&gt;We all know what happened with user data (in the scandal-that-shall-not-be-named involving the social-network-that-also-shall-not-be-named). But that is just part of the picture.&lt;/p&gt;

&lt;p&gt;Several countries are now coming up with regulations around privacy of the data of their citizens. Some are taking it a step further and proposing rules that dictate where the data of their citizens should physically reside.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real problem here is tech companies building their business models around regulations that existed &lt;em&gt;when the product was conceptualized&lt;/em&gt;, and failing to foresee that regulations will catch up eventually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, the products scale really well from a purely technical standpoint, but leave a lot to be desired when the rubber meets the road.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’m pretty sure I just scratched the surface - of both sides of the coin. There are dozens more examples of business scaling done right; and dozens more where they fall short despite a stellar tech stack.&lt;/p&gt;

&lt;p&gt;In conclusion, at the risk of re-stating the obvious, &lt;strong&gt;A scalable tech stack is necessary but not sufficient for running a scalable business&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2020 19:00:00 +0100</pubDate>
        <link>https://kiranrao.in/blog/2020/12/15/scalable-tech-business/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/12/15/scalable-tech-business/</guid>
        
        <category>obvious</category>
        
        
      </item>
    
      <item>
        <title>Falsehoods programmers believe about addresses</title>
        <description>&lt;p&gt;I’ve spent the better part of the last three years developing a navigation app at work. It includes features like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Searching for a location&lt;/li&gt;
  &lt;li&gt;Adding a location to favorites&lt;/li&gt;
  &lt;li&gt;Turn by turn navigation to a destination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had the seemingly simple task of splitting an address into two parts for displaying in the user interface (line 1 and line 2). The exact mechanism of the split didn’t matter as long as it could be reasonably split.&lt;/p&gt;

&lt;p&gt;Here as some examples of how I presumed it could be split depending on the length of the address&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 1 = Place Name; Line 2 = address&lt;/li&gt;
  &lt;li&gt;Line 1 = Place name, number, street; Line 2 = city, state&lt;/li&gt;
  &lt;li&gt;Line 1 = Place name, number; Line 2 = street, city&lt;/li&gt;
  &lt;li&gt;… and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple, right? Wrong.&lt;/p&gt;

&lt;p&gt;Over the course, I’ve made several assumptions about addresses that turned out to be incorrect. This post attempts to list the things I learned about addresses.&lt;/p&gt;

&lt;p&gt;This post is inspired by other “Falsehood programmers believe” posts (and hence uses a similar format). In fact, there’s a &lt;a href=&quot;https://github.com/kdeldycke/awesome-falsehood&quot;&gt;GitHub repo&lt;/a&gt; that lists all such posts. Other people before me have already made “Falsehoods about addresses” lists, but I’m making one based on my own experience.&lt;/p&gt;

&lt;p&gt;So, let’s get right to the falsehoods. Every one of the statements below is false.&lt;/p&gt;

&lt;p&gt;About &lt;strong&gt;locations&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every location has a unique address. This is false: every location has a unique &lt;em&gt;geocoordinate&lt;/em&gt; (lat-long), or other such &lt;em&gt;identifier&lt;/em&gt; like &lt;a href=&quot;https://maps.google.com/pluscodes/&quot;&gt;Google Plus Codes&lt;/a&gt; or &lt;a href=&quot;https://what3words.com/about-us/&quot;&gt;what3words&lt;/a&gt;, but it does not have a unique &lt;em&gt;address&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;A location has an address&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;addresses&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The concept of an address is universal&lt;/li&gt;
  &lt;li&gt;What constitutes an address is universal&lt;/li&gt;
  &lt;li&gt;An address has a number&lt;/li&gt;
  &lt;li&gt;An address identifies a single house/shop/office&lt;/li&gt;
  &lt;li&gt;An address has a street name&lt;/li&gt;
  &lt;li&gt;An address has a post code/zip code/pin code&lt;/li&gt;
  &lt;li&gt;An address has a neighborhood/locality name&lt;/li&gt;
  &lt;li&gt;An address has a place name&lt;/li&gt;
  &lt;li&gt;An address is hierarchical (number, street, city, state, country)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;User interface&lt;/strong&gt; related:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An address has sufficient info to make sense in a user interface&lt;/li&gt;
  &lt;li&gt;An address, when shortened (ellipsized etc) to fit on a user interface, still gives enough context to the user&lt;/li&gt;
  &lt;li&gt;An address fits on one screen on a mobile phone with a readable font size&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;streets&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A street has a name&lt;/li&gt;
  &lt;li&gt;A street name is unique in a city&lt;/li&gt;
  &lt;li&gt;A street name is unique in a locality&lt;/li&gt;
  &lt;li&gt;A road number (like highway number) is unique in a locality&lt;/li&gt;
  &lt;li&gt;A road number uniquely identifies a road&lt;/li&gt;
  &lt;li&gt;A neighborhood/locality name is unique in a city&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About &lt;strong&gt;directions&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What constitutes a navigation instruction is universal&lt;/li&gt;
  &lt;li&gt;A navigation instruction at a point is unambiguous&lt;/li&gt;
  &lt;li&gt;Restrictions applied to navigation (like avoid highways, avoid tolls etc) are unambiguous&lt;/li&gt;
  &lt;li&gt;Navigation directions are user-friendly (this one is an opinion, and not a fact)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 24 Oct 2020 11:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/10/24/falsehoods-about-addresses/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/10/24/falsehoods-about-addresses/</guid>
        
        <category>falsehoods</category>
        
        
      </item>
    
      <item>
        <title>Stateless widget animations in Flutter</title>
        <description>&lt;p&gt;I’m a Flutter newbie (my day job is Android developer), and it took me some time to understand how animations work in Flutter. In particular, most posts and videos on this topic show how to achieve one of these:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How to animate properties of a State&lt;em&gt;less&lt;/em&gt; widget between a fixed pair of start and end values&lt;/li&gt;
  &lt;li&gt;How to animate properties of a State&lt;em&gt;ful&lt;/em&gt; widget from whatever the current value is, to an end value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I wanted to achieve was a mix of the two. My objective was:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Animate a State&lt;strong&gt;less&lt;/strong&gt; widget to an end value, beginning with whatever the &lt;em&gt;current&lt;/em&gt; value is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, we’re going to look at exactly that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Within your Stateless widget, use an implicit animation (a widget that extend from &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt;) to animate the properties you wish to.&lt;/p&gt;

&lt;p&gt;This is the animation that we are going to build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/flutter_stateless_animation.gif&quot; alt=&quot;Flutter stateless animation&quot; style=&quot;max-height: 200px; max-width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is a very simple animation. Every time you tap the container, it animates:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The background color (this animates between a shade of blue and completely transparent)&lt;/li&gt;
  &lt;li&gt;A drop shadow for the background&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These properties are applied wrapping our content in a &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBox&lt;/code&gt; widget, and applying these properties as a &lt;code class=&quot;highlighter-rouge&quot;&gt;BoxDecoration(color:, borderRadius:, boxShadow:[])&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;starting-point-one-time-animation&quot;&gt;Starting point: One-time animation&lt;/h2&gt;

&lt;p&gt;To start off, we’ll see how to achieve this as a one-time animation, without the tap handling. This requires us to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt;, provide an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationController&lt;/code&gt; and provide a tween. All this is pretty standard for making an animation in Flutter.&lt;/p&gt;

&lt;p&gt;Here’s the tween definition&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;end:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAlpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedBorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;boxShadow:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoxShadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BoxShadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withOpacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;blurRadius:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;offset:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedShadowOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;begin:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUnselectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedBorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// No shadow.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s how we use it inside of a &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DecoratedBoxTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;decoration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*Rest of the content*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the full runnable example on &lt;a href=&quot;https://dartpad.dev/9e9d8a42de5ec14ee6e61f75b71953c8&quot;&gt;this DartPad snippet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;toggling-between-states-on-tap&quot;&gt;Toggling between states on tap&lt;/h2&gt;

&lt;p&gt;As the next step, we’ll introduce an &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; state that we toggle when the user taps on our widget. This allows us to make the animation go forward/reverse depending on the state.&lt;/p&gt;

&lt;p&gt;First, we introduce a bool field in our state class&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in our &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; method we wrap our &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;GestureDetector&lt;/code&gt; to handle taps&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GestureDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_handleTap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoratedBoxTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*Rest of the code as before*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, instead of starting the animation in &lt;code class=&quot;highlighter-rouge&quot;&gt;initState()&lt;/code&gt;, we start the animation in either forward or reverse direction in &lt;code class=&quot;highlighter-rouge&quot;&gt;_handleTap&lt;/code&gt;, depending on the &lt;code class=&quot;highlighter-rouge&quot;&gt;_isSelected&lt;/code&gt; state. And of course, we need to update the state by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see this in action on &lt;a href=&quot;https://dartpad.dev/b424985022624c3d8c94a0ea184d5699&quot;&gt;this Dartpad&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;going-stateless&quot;&gt;Going Stateless&lt;/h2&gt;

&lt;p&gt;The previous solutions both work, but what I really wanted was to make my widget stateless. The reason is that in my app, state is managed outside the widgets. When a user taps on a widget, it simply calls a &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; that was passed to it. I have a different component in my architecture that updates the state and passes back the new &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; to me.&lt;/p&gt;

&lt;p&gt;So, can we just cheat and give the &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; only the end value so that it begins with whatever the current value is?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Does NOT work - throws an exception&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorationTween&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecorationTween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;end:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_boxDecorationSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_boxDecorationUnselected&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Don't provide a begin&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, this does not work. &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; expects both &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; to be not null. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; is not an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt;. Understanding this was a light bulb moment for me.&lt;/p&gt;

&lt;p&gt;To achieve what I want, what we really need is an implicit animation. Is there one that suits my needs? Indeed, there is.&lt;/p&gt;

&lt;h3 id=&quot;enter-animatedcontainer&quot;&gt;Enter, &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; and it allows setting several properties of a child, including &lt;code class=&quot;highlighter-rouge&quot;&gt;constraints&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;paddding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt; and, the one relevant for us: &lt;code class=&quot;highlighter-rouge&quot;&gt;decoration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, all I had to do was replace &lt;code class=&quot;highlighter-rouge&quot;&gt;DecoratedBoxTransition&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt; and voila! My widget works exactly as I expect it to.&lt;/p&gt;

&lt;p&gt;Some relevant pieces of code: First, make the widget completely stateless by passing in the &lt;code class=&quot;highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; and a function to handle taps as constructor parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in the build method, return an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimatedContainer&lt;/code&gt;, passing in a &lt;code class=&quot;highlighter-rouge&quot;&gt;decoration&lt;/code&gt; object that conditionally returns either an empty decoration or the one we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GestureDetector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnimatedContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;decoration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoxDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAlpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUnselectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;borderRadius:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BorderRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;circular&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;boxShadow:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;_selectedBoxShadow:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;duration:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;milliseconds:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;curve:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the full working sample on &lt;a href=&quot;https://dartpad.dev/1dc8122b218795f118dbfd4339538397&quot;&gt;this Dartpad&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;I was able to get away with using a Stateless widget in my case because there already existed an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; that fulfils my needs. This might not always be the case, so you might end up needing to make your widget stateful anyway. If you are faced with this situation, you might also consider creating your own subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;ImplicitlyAnimatedWidget&lt;/code&gt; to perform the animation - so that you can keep your actual widget stateless.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we saw how to use implicit animations in Flutter to keep your widget stateless, and what the limitations are.&lt;/p&gt;

&lt;p&gt;To see a real world use of the techniques described in this post, see the &lt;a href=&quot;https://github.com/curioustechizen/covid19india-flutter&quot;&gt;Covid19-India flutter app&lt;/a&gt; (where you switch between the categories like “active”, “recovered” etc.)&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2020 21:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/05/21/flutter-stateless-animations/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/05/21/flutter-stateless-animations/</guid>
        
        <category>flutter</category>
        
        <category>animations</category>
        
        
      </item>
    
      <item>
        <title>Diff animations with SwiftUI</title>
        <description>&lt;p&gt;A few months back, I wrote &lt;a href=&quot;https://kiranrao.in/blog/2020/01/12/diff-util-part3/&quot;&gt;a post&lt;/a&gt; about implementing custom animations in Android using DiffUtil. In this post, we’ll explore how similar animations can be achieved with Apple’s &lt;a href=&quot;https://developer.apple.com/documentation/swiftui&quot;&gt;SwiftUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler Alert:&lt;/strong&gt; It was a breeze to implement this with SwiftUI. It was an enjoyable experience with the Preview canvas in XCode, and the framework itself is very well suited for stuff like implementing animations.&lt;/p&gt;

&lt;p&gt;This post uses GIFs to show off videos of the animations I achieved, but GIFs don’t convey really how smooth the animations are. I encourage you to check out the code and run it on a simulator or iOS device. The code for everything in this post is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks&quot;&gt;here&lt;/a&gt;. You’ll need XCode 11 and Mac OSX Catalina to run it.&lt;/p&gt;

&lt;h2 id=&quot;the-sample-app&quot;&gt;The sample app&lt;/h2&gt;

&lt;p&gt;Here’s an example of what we will achieve&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-custom.gif&quot; alt=&quot;Custom animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not exactly the same as the one we ended up in the Android example, but it is close enough.&lt;/p&gt;

&lt;p&gt;To recap, this is how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are up to 7 colored circle views, arranged in a circle&lt;/li&gt;
  &lt;li&gt;Some circles are “expanded”&lt;/li&gt;
  &lt;li&gt;When you click on “Toggle”, some colored circles get removed, while others are added, and some get resized (their expansion state changes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The model consists of 2 pre-defined lists of circle data. Clicking the toggle button simple toggles the state between these 2 lists.&lt;/p&gt;

&lt;h2 id=&quot;baseline-toggling-state-without-animations&quot;&gt;Baseline: Toggling state without animations&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/tree/swift_ui_no_animations/CircleDiffAnimationsSwiftUI&quot;&gt;starting point&lt;/a&gt; of this experiment is toggling between 2 states, &lt;em&gt;without&lt;/em&gt; any animation. For this, I took inspiration from &lt;a href=&quot;https://github.com/christophedellac/CDCircularMenu&quot;&gt;this library&lt;/a&gt; to arrange the views in a circle. Then, all I had to do was set the color and size property of each view from the model.&lt;/p&gt;

&lt;p&gt;On clicking the Toggle button, I update a &lt;code class=&quot;highlighter-rouge&quot;&gt;@State var&lt;/code&gt; property. All this is pretty standard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CircleInfo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toggle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The relevant code is in &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swift_ui_no_animations/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;this file&lt;/a&gt; and here’s how this looks&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-no-anims.gif&quot; alt=&quot;No animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-animations&quot;&gt;Adding animations&lt;/h2&gt;

&lt;p&gt;This is where SwiftUI impresses. All I had to do was add one line to get nice default animations. Yes, you read that right. It was &lt;strong&gt;a one-line change&lt;/strong&gt; to get animations out of the box.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Replace this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//With this&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;withAnimation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This change is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_withAnimation_default/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;tagged here&lt;/a&gt; and this is what it looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-withAnimation.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cannot get over how easy this was. Did you notice that we wrote zero code to find out what the diff was, zero code to tell what to insert, what to delete? Nothing. Compare this with what I had to do in the previous article on Android!&lt;/p&gt;

&lt;p&gt;But wait, it gets better.&lt;/p&gt;

&lt;h2 id=&quot;custom-animations&quot;&gt;Custom animations&lt;/h2&gt;

&lt;p&gt;This default animation is okay, but it is not what we want. You can see that item appearance animation doesn’t look all that good. The item just fades in behind whatever was there previously.&lt;/p&gt;

&lt;p&gt;How can we improve this? Well, again, just a handful of lines of code. First, create a transition to describe what the animation should look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;combined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asymmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, just apply an animation to each circle view specifying the transition and the curve.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circleInfoModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeCircles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ColorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circleInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*calculate offset */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it. With these changes, you get the nice animations that you saw at the top of this post. The code is &lt;a href=&quot;https://github.com/curioustechizen/diff-animations-declarative-ui-frameworks/blob/swiftui_custom_animation/CircleDiffAnimationsSwiftUI/CircleDiffAnimations/CircularArrangementView.swift&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There seems to be a problem with the Preview Canvas in XCode. It did not show the custom animation when I tried this code. Instead, it kept showing the default animation. Don’t rely too much on the LivePreview feature, especially for animations.&lt;/p&gt;

&lt;h3 id=&quot;icing-on-the-cake&quot;&gt;Icing on the cake&lt;/h3&gt;

&lt;p&gt;If you see the post on the Android implementation, you see this disclaimer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you submit a list while animations for the previous diff are already in progress, it could crash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do we need to make our SwiftUI version handle this case? What happens if an animation is in progress and you click the Toggle button again?&lt;/p&gt;

&lt;p&gt;Well, the answer is - you guessed it - &lt;strong&gt;We need to do nothing&lt;/strong&gt;. The animations are interruptible by default. If we click on the toggle button while an animation is in progress, then the next animation starts. Like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/video/diff-circle-swiftui-interruptible.gif&quot; alt=&quot;Default animation&quot; style=&quot;max-height: 448px; max-width: 207px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-catch&quot;&gt;What’s the catch?&lt;/h2&gt;

&lt;p&gt;This automagical animation feature is fine for a lot of situations, but there are still a lot of them that it might not be able to handle. For example&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choreographing the animations: If you look at the Android example, we wanted to perform the animations in a certain order (removals first, followed by moves and finally inserts). The SwiftUI version just animates everything simultaneously. You could probably play with &lt;code class=&quot;highlighter-rouge&quot;&gt;asymmetric(insertion:removal:)&lt;/code&gt; to impose some ordering but it would be rather limited.&lt;/li&gt;
  &lt;li&gt;Animations occur on individual items: What if you wanted the animation to occur in relation to the containing view? For example, what if you wanted to animate scrolling to a different row in a list when the currently “selected” one gets deleted? These are possible but would probably require a lot of code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are probably others that I’m missing.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;SwiftUI is great for implementing animations. I had to barely write any code to achieve this pretty cool animation (it took me days to achieve the same on Android, and I’ve several years of Android experience!). However, all of this magic does come with its own limitations and it is good to be aware of them before going all-in.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 21:00:00 +0200</pubDate>
        <link>https://kiranrao.in/blog/2020/04/21/diff-animations-swiftui/</link>
        <guid isPermaLink="true">https://kiranrao.in/blog/2020/04/21/diff-animations-swiftui/</guid>
        
        <category>swiftui</category>
        
        <category>animations</category>
        
        
      </item>
    
  </channel>
</rss>
